{"version":3,"names":["baseAnimation","isIos","createAnimation","duration","menuOverlayAnimation","menu","closedX","openedX","width","menuAnimation","backdropAnimation","isEndSide","addElement","menuInnerEl","fromTo","mode","getIonMode","opacity","backdropEl","addAnimation","menuPushAnimation","contentOpenedX","menuClosedX","contentAnimation","contentEl","menuRevealAnimation","contentOpen","createMenuController","menuAnimations","Map","menus","open","async","menuEl","get","close","undefined","getOpen","toggle","enable","shouldEnable","disabled","swipeGesture","isOpen","isEnabled","logOnMultipleSideMenus","waitUntilReady","menuRefs","filter","m","side","length","printIonWarning","map","el","sideMenuRefs","find","menuId","_getOpenSync","getMenus","getMenusSync","isAnimating","isAnimatingSync","registerAnimation","name","animation","set","_register","indexOf","push","_unregister","index","splice","_setOpen","shouldOpen","animated","openedMenu","setOpen","_createAnimation","type","menuCmp","animationBuilder","Error","_isOpen","some","predicate","instance","Promise","all","Array","from","document","querySelectorAll","resolve","componentOnReady","doc","addEventListener","ev","openMenu","detail","register","MENU_BACK_BUTTON_PRIORITY","menuController","appDialogRestartCss","AppDialogRestart","this","confirmRestartModal","present","render","h","Host","key","ref","e","slot","onClick","dismiss","restart","class","reset","routerProvider","ionRouterElement","animationBuilderFadePages","appMenuCss","AppMenu","contentId","id","appPages","appPage","t","state","autoHide","location","pathname","url","href","routerDirection","lines","color","icon","checkmarkCircleOutline","src","getAssetPath","title","informationCircleOutline","button","refreshOutline","backButtonIosCss","backButtonMdCss","BackButton","constructor","hostRef","inheritedAttributes","nav","closest","preventDefault","canGoBack","pop","routerAnimation","skipIfBusy","openURL","defaultHref","text","componentWillLoad","inheritAriaAttributes","config","backButtonIcon","chevronBack","arrowBackSharp","backButtonText","defaultBackButtonText","hasIconOnly","rippleType","showBackButton","ariaLabel","createColorClasses","hostContext","part","lazy","listHeaderIosCss","listHeaderMdCss","ListHeader","menuIosCss","menuMdCss","iosEasing","mdEasing","iosEasingReverse","mdEasingReverse","focusableQueryString","Menu","lastOnEnd","blocker","GESTURE_CONTROLLER","createBlocker","disableScroll","didLoad","operationCancelled","handleFocus","lastOverlay","getPresentedOverlay","contains","trapKeyboardFocus","isPaneVisible","maxEdgeStart","typeChanged","oldType","classList","remove","add","removeAttribute","disabledChanged","updateState","ionMenuChange","emit","sideChanged","isEnd","swipeGestureChanged","connectedCallback","customElements","whenDefined","content","getElementById","console","error","menuChanged","gesture","import","createGesture","gestureName","gesturePriority","threshold","blurOnStart","canStart","onWillStart","onStart","onMove","onEnd","componentDidLoad","disconnectedCallback","destroy","onSplitPaneChanged","target","closestSplitPane","isPane","onBackdropClick","timeStamp","shouldClose","composedPath","includes","stopPropagation","onKeydown","isActive","_isActive","focusFirstDescendant","firstInput","querySelector","focus","focusLastDescendant","inputs","lastInput","lastFocus","activeElement","beforeAnimation","loadAnimation","startAnimation","afterAnimation","offsetWidth","getBoolean","fill","isReversed","easing","easingReverse","ani","direction","play","sync","getDirection","canSwipe","isModalPresented","checkEdgeSide","window","currentX","assert","progressStart","delta","computeDelta","deltaX","stepValue","progressStep","velocity","velocityX","z","shouldCompleteRight","shouldCompleteLeft","shouldComplete","currentTime","newStepValue","adjustedStepValue","getTimeGivenProgression","clamp","playTo","onFinish","oneTimeCallback","progressEnd","SHOW_MENU","setAttribute","SHOW_BACKDROP","MENU_CONTENT_OPEN","block","ionWillOpen","ionWillClose","_a","unblock","ionDidOpen","focusedMenu","stop","ionDidClose","removeEventListener","onKeyDown","shouldUseCloseWatcher","role","tappable","Math","max","win","posX","innerWidth","updateVisibility","menuButtonIosCss","menuButtonMdCss","MenuButton","visible","visibilityChanged","menuIcon","menuOutline","menuSharp","hidden","attrs","Object","assign","menuToggleCss","MenuToggle"],"sources":["node_modules/@ionic/core/dist/collection/utils/menu-controller/animations/base.js","node_modules/@ionic/core/dist/collection/utils/menu-controller/animations/overlay.js","node_modules/@ionic/core/dist/collection/utils/menu-controller/animations/push.js","node_modules/@ionic/core/dist/collection/utils/menu-controller/animations/reveal.js","node_modules/@ionic/core/dist/collection/utils/menu-controller/index.js","src/components/app-dialog-restart/app-dialog-restart.css?tag=app-dialog-restart&encapsulation=shadow","src/components/app-dialog-restart/app-dialog-restart.tsx","src/components/app-menu/app-menu.css?tag=app-menu","src/components/app-menu/app-menu.tsx","node_modules/@ionic/core/dist/collection/components/back-button/back-button.ios.css?tag=ion-back-button&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/back-button/back-button.md.css?tag=ion-back-button&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/back-button/back-button.js","node_modules/@ionic/core/dist/collection/components/list-header/list-header.ios.css?tag=ion-list-header&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/list-header/list-header.md.css?tag=ion-list-header&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/list-header/list-header.js","node_modules/@ionic/core/dist/collection/components/menu/menu.ios.css?tag=ion-menu&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/menu/menu.md.css?tag=ion-menu&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/menu/menu.js","node_modules/@ionic/core/dist/collection/components/menu-toggle/menu-toggle-util.js","node_modules/@ionic/core/dist/collection/components/menu-button/menu-button.ios.css?tag=ion-menu-button&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/menu-button/menu-button.md.css?tag=ion-menu-button&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/menu-button/menu-button.js","node_modules/@ionic/core/dist/collection/components/menu-toggle/menu-toggle.css?tag=ion-menu-toggle&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/menu-toggle/menu-toggle.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../animation/animation\";\n/**\n * baseAnimation\n * Base class which is extended by the various types. Each\n * type will provide their own animations for open and close\n * and registers itself with Menu.\n */\nexport const baseAnimation = (isIos) => {\n    // https://material.io/guidelines/motion/movement.html#movement-movement-in-out-of-screen-bounds\n    // https://material.io/guidelines/motion/duration-easing.html#duration-easing-natural-easing-curves\n    /**\n     * \"Apply the sharp curve to items temporarily leaving the screen that may return\n     * from the same exit point. When they return, use the deceleration curve. On mobile,\n     * this transition typically occurs over 300ms\" -- MD Motion Guide\n     */\n    return createAnimation().duration(isIos ? 400 : 300);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { getIonMode } from \"../../../global/ionic-global\";\nimport { createAnimation } from \"../../animation/animation\";\nimport { baseAnimation } from \"./base\";\n/**\n * Menu Overlay Type\n * The menu slides over the content. The content\n * itself, which is under the menu, does not move.\n */\nexport const menuOverlayAnimation = (menu) => {\n    let closedX;\n    let openedX;\n    const width = menu.width + 8;\n    const menuAnimation = createAnimation();\n    const backdropAnimation = createAnimation();\n    if (menu.isEndSide) {\n        // right side\n        closedX = width + 'px';\n        openedX = '0px';\n    }\n    else {\n        // left side\n        closedX = -width + 'px';\n        openedX = '0px';\n    }\n    menuAnimation.addElement(menu.menuInnerEl).fromTo('transform', `translateX(${closedX})`, `translateX(${openedX})`);\n    const mode = getIonMode(menu);\n    const isIos = mode === 'ios';\n    const opacity = isIos ? 0.2 : 0.25;\n    backdropAnimation.addElement(menu.backdropEl).fromTo('opacity', 0.01, opacity);\n    return baseAnimation(isIos).addAnimation([menuAnimation, backdropAnimation]);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { getIonMode } from \"../../../global/ionic-global\";\nimport { createAnimation } from \"../../animation/animation\";\nimport { baseAnimation } from \"./base\";\n/**\n * Menu Push Type\n * The content slides over to reveal the menu underneath.\n * The menu itself also slides over to reveal its bad self.\n */\nexport const menuPushAnimation = (menu) => {\n    let contentOpenedX;\n    let menuClosedX;\n    const mode = getIonMode(menu);\n    const width = menu.width;\n    if (menu.isEndSide) {\n        contentOpenedX = -width + 'px';\n        menuClosedX = width + 'px';\n    }\n    else {\n        contentOpenedX = width + 'px';\n        menuClosedX = -width + 'px';\n    }\n    const menuAnimation = createAnimation()\n        .addElement(menu.menuInnerEl)\n        .fromTo('transform', `translateX(${menuClosedX})`, 'translateX(0px)');\n    const contentAnimation = createAnimation()\n        .addElement(menu.contentEl)\n        .fromTo('transform', 'translateX(0px)', `translateX(${contentOpenedX})`);\n    const backdropAnimation = createAnimation().addElement(menu.backdropEl).fromTo('opacity', 0.01, 0.32);\n    return baseAnimation(mode === 'ios').addAnimation([menuAnimation, contentAnimation, backdropAnimation]);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { getIonMode } from \"../../../global/ionic-global\";\nimport { createAnimation } from \"../../animation/animation\";\nimport { baseAnimation } from \"./base\";\n/**\n * Menu Reveal Type\n * The content slides over to reveal the menu underneath.\n * The menu itself, which is under the content, does not move.\n */\nexport const menuRevealAnimation = (menu) => {\n    const mode = getIonMode(menu);\n    const openedX = menu.width * (menu.isEndSide ? -1 : 1) + 'px';\n    const contentOpen = createAnimation()\n        .addElement(menu.contentEl) // REVIEW\n        .fromTo('transform', 'translateX(0px)', `translateX(${openedX})`);\n    return baseAnimation(mode === 'ios').addAnimation(contentOpen);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { doc } from \"../browser/index\";\nimport { MENU_BACK_BUTTON_PRIORITY } from \"../hardware-back-button\";\nimport { printIonWarning } from \"../logging/index\";\nimport { componentOnReady } from \"../helpers\";\nimport { menuOverlayAnimation } from \"./animations/overlay\";\nimport { menuPushAnimation } from \"./animations/push\";\nimport { menuRevealAnimation } from \"./animations/reveal\";\nconst createMenuController = () => {\n    const menuAnimations = new Map();\n    const menus = [];\n    const open = async (menu) => {\n        const menuEl = await get(menu, true);\n        if (menuEl) {\n            return menuEl.open();\n        }\n        return false;\n    };\n    const close = async (menu) => {\n        const menuEl = await (menu !== undefined ? get(menu, true) : getOpen());\n        if (menuEl !== undefined) {\n            return menuEl.close();\n        }\n        return false;\n    };\n    const toggle = async (menu) => {\n        const menuEl = await get(menu, true);\n        if (menuEl) {\n            return menuEl.toggle();\n        }\n        return false;\n    };\n    const enable = async (shouldEnable, menu) => {\n        const menuEl = await get(menu);\n        if (menuEl) {\n            menuEl.disabled = !shouldEnable;\n        }\n        return menuEl;\n    };\n    const swipeGesture = async (shouldEnable, menu) => {\n        const menuEl = await get(menu);\n        if (menuEl) {\n            menuEl.swipeGesture = shouldEnable;\n        }\n        return menuEl;\n    };\n    const isOpen = async (menu) => {\n        if (menu != null) {\n            const menuEl = await get(menu);\n            // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n            return menuEl !== undefined && menuEl.isOpen();\n        }\n        else {\n            const menuEl = await getOpen();\n            return menuEl !== undefined;\n        }\n    };\n    const isEnabled = async (menu) => {\n        const menuEl = await get(menu);\n        if (menuEl) {\n            return !menuEl.disabled;\n        }\n        return false;\n    };\n    /**\n     * Finds and returns the menu specified by \"menu\" if registered.\n     * @param menu - The side or ID of the desired menu\n     * @param logOnMultipleSideMenus - If true, this function will log a warning\n     * if \"menu\" is a side but multiple menus on the same side were found. Since this function\n     * is used in multiple places, we default this log to false so that the calling\n     * functions can choose whether or not it is appropriate to log this warning.\n     */\n    const get = async (menu, logOnMultipleSideMenus = false) => {\n        await waitUntilReady();\n        if (menu === 'start' || menu === 'end') {\n            // there could be more than one menu on the same side\n            // so first try to get the enabled one\n            const menuRefs = menus.filter((m) => m.side === menu && !m.disabled);\n            if (menuRefs.length >= 1) {\n                if (menuRefs.length > 1 && logOnMultipleSideMenus) {\n                    printIonWarning(`menuController queried for a menu on the \"${menu}\" side, but ${menuRefs.length} menus were found. The first menu reference will be used. If this is not the behavior you want then pass the ID of the menu instead of its side.`, menuRefs.map((m) => m.el));\n                }\n                return menuRefs[0].el;\n            }\n            // didn't find a menu side that is enabled\n            // so try to get the first menu side found\n            const sideMenuRefs = menus.filter((m) => m.side === menu);\n            if (sideMenuRefs.length >= 1) {\n                if (sideMenuRefs.length > 1 && logOnMultipleSideMenus) {\n                    printIonWarning(`menuController queried for a menu on the \"${menu}\" side, but ${sideMenuRefs.length} menus were found. The first menu reference will be used. If this is not the behavior you want then pass the ID of the menu instead of its side.`, sideMenuRefs.map((m) => m.el));\n                }\n                return sideMenuRefs[0].el;\n            }\n        }\n        else if (menu != null) {\n            // the menuId was not left or right\n            // so try to get the menu by its \"id\"\n            return find((m) => m.menuId === menu);\n        }\n        // return the first enabled menu\n        const menuEl = find((m) => !m.disabled);\n        if (menuEl) {\n            return menuEl;\n        }\n        // get the first menu in the array, if one exists\n        return menus.length > 0 ? menus[0].el : undefined;\n    };\n    /**\n     * Get the instance of the opened menu. Returns `null` if a menu is not found.\n     */\n    const getOpen = async () => {\n        await waitUntilReady();\n        return _getOpenSync();\n    };\n    /**\n     * Get all menu instances.\n     */\n    const getMenus = async () => {\n        await waitUntilReady();\n        return getMenusSync();\n    };\n    /**\n     * Get whether or not a menu is animating. Returns `true` if any\n     * menu is currently animating.\n     */\n    const isAnimating = async () => {\n        await waitUntilReady();\n        return isAnimatingSync();\n    };\n    const registerAnimation = (name, animation) => {\n        menuAnimations.set(name, animation);\n    };\n    const _register = (menu) => {\n        if (menus.indexOf(menu) < 0) {\n            menus.push(menu);\n        }\n    };\n    const _unregister = (menu) => {\n        const index = menus.indexOf(menu);\n        if (index > -1) {\n            menus.splice(index, 1);\n        }\n    };\n    const _setOpen = async (menu, shouldOpen, animated) => {\n        if (isAnimatingSync()) {\n            return false;\n        }\n        if (shouldOpen) {\n            const openedMenu = await getOpen();\n            if (openedMenu && menu.el !== openedMenu) {\n                await openedMenu.setOpen(false, false);\n            }\n        }\n        return menu._setOpen(shouldOpen, animated);\n    };\n    const _createAnimation = (type, menuCmp) => {\n        const animationBuilder = menuAnimations.get(type); // TODO(FW-2832): type\n        if (!animationBuilder) {\n            throw new Error('animation not registered');\n        }\n        const animation = animationBuilder(menuCmp);\n        return animation;\n    };\n    const _getOpenSync = () => {\n        return find((m) => m._isOpen);\n    };\n    const getMenusSync = () => {\n        return menus.map((menu) => menu.el);\n    };\n    const isAnimatingSync = () => {\n        return menus.some((menu) => menu.isAnimating);\n    };\n    const find = (predicate) => {\n        const instance = menus.find(predicate);\n        if (instance !== undefined) {\n            return instance.el;\n        }\n        return undefined;\n    };\n    const waitUntilReady = () => {\n        return Promise.all(Array.from(document.querySelectorAll('ion-menu')).map((menu) => new Promise((resolve) => componentOnReady(menu, resolve))));\n    };\n    registerAnimation('reveal', menuRevealAnimation);\n    registerAnimation('push', menuPushAnimation);\n    registerAnimation('overlay', menuOverlayAnimation);\n    doc === null || doc === void 0 ? void 0 : doc.addEventListener('ionBackButton', (ev) => {\n        const openMenu = _getOpenSync();\n        if (openMenu) {\n            ev.detail.register(MENU_BACK_BUTTON_PRIORITY, () => {\n                return openMenu.close();\n            });\n        }\n    });\n    return {\n        registerAnimation,\n        get,\n        getMenus,\n        getOpen,\n        isEnabled,\n        swipeGesture,\n        isAnimating,\n        isOpen,\n        enable,\n        toggle,\n        close,\n        open,\n        _getOpenSync,\n        _createAnimation,\n        _register,\n        _unregister,\n        _setOpen,\n    };\n};\nexport const menuController = /*@__PURE__*/ createMenuController();\n",":host {\n  display: block;\n}\n","import { Component, Host, Method, h } from '@stencil/core';\nimport { animationBuilderFadePages } from '../../global/page-animation';\nimport routerProvider from '../../global/router-provider';\nimport { reset } from '../../global/store';\n\n@Component({\n  tag: 'app-dialog-restart',\n  styleUrl: 'app-dialog-restart.css',\n  shadow: true,\n})\nexport class AppDialogRestart {\n  confirmRestartModal: HTMLIonModalElement;\n  @Method() async open() {\n    await this.confirmRestartModal.present();\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-modal ref={e => (this.confirmRestartModal = e)}>\n          <ion-header>\n            <ion-toolbar>\n              <ion-buttons slot=\"start\">\n                <ion-button onClick={() => this.confirmRestartModal.dismiss()}>Nein</ion-button>\n              </ion-buttons>\n              <ion-title>Von vorne beginnen?</ion-title>\n              <ion-buttons slot=\"end\">\n                <ion-button onClick={() => this.restart()}>Ja</ion-button>\n              </ion-buttons>\n            </ion-toolbar>\n          </ion-header>\n          <ion-content class=\"ion-padding\">Der Spielstand wird gelöscht und das Puzzle beginnt erneut.</ion-content>\n        </ion-modal>\n      </Host>\n    );\n  }\n\n  private async restart() {\n    await this.confirmRestartModal.dismiss();\n    reset();\n    await routerProvider.ionRouterElement.push('/intro', 'forward', animationBuilderFadePages);\n  }\n}\n","ion-menu ion-content {\n  --background: var(--ion-item-background, var(--ion-background-color, #fff));\n}\n\nion-menu.md ion-content {\n  --padding-start: 8px;\n  --padding-end: 8px;\n  --padding-top: 20px;\n  --padding-bottom: 20px;\n}\n\nion-menu.md ion-list {\n  padding: 20px 0;\n}\n\nion-menu.md ion-note {\n  margin-bottom: 30px;\n}\n\nion-menu.md ion-list-header,\nion-menu.md ion-note {\n  padding-left: 10px;\n}\n\nion-menu.md ion-list#inbox-list {\n  border-bottom: 1px solid var(--ion-color-step-150, #d7d8da);\n}\n\nion-menu.md ion-list#inbox-list ion-list-header {\n  font-size: 22px;\n  font-weight: 600;\n  min-height: 20px;\n}\n\nion-menu.md ion-list#labels-list ion-list-header {\n  font-size: 16px;\n  margin-bottom: 18px;\n  min-height: 26px;\n}\n\nion-menu.md ion-item {\n  --padding-start: 10px;\n  --padding-end: 10px;\n  border-radius: 4px;\n}\n\nion-menu.md ion-item.selected {\n  --background: rgba(var(--ion-color-primary-rgb), 0.14);\n}\n\nion-menu.md ion-item.selected ion-icon {\n  color: var(--ion-color-primary);\n}\n\nion-menu.md ion-item ion-icon {\n  color: #616e7e;\n}\n\nion-menu.md ion-item ion-label {\n  font-weight: 500;\n}\n\nion-menu.ios ion-content {\n  --padding-bottom: 20px;\n}\n\nion-menu.ios ion-list {\n  padding: 20px 0 0 0;\n}\n\nion-menu.ios ion-note {\n  line-height: 24px;\n  margin-bottom: 20px;\n}\n\nion-menu.ios ion-item {\n  --padding-start: 16px;\n  --padding-end: 16px;\n  --min-height: 50px;\n}\n\nion-menu.ios ion-item ion-icon {\n  font-size: 24px;\n  color: #73849a;\n}\n\nion-menu.ios ion-item .selected ion-icon {\n  color: var(--ion-color-primary);\n}\n\nion-menu.ios ion-list#labels-list ion-list-header {\n  margin-bottom: 8px;\n}\n\nion-menu.ios ion-list-header,\nion-menu.ios ion-note {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n\nion-menu.ios ion-note {\n  margin-bottom: 8px;\n}\n\nion-note {\n  display: inline-block;\n  font-size: 16px;\n  color: var(--ion-color-medium-shade);\n}\n\nion-item.selected {\n  --color: var(--ion-color-primary);\n}\n","import { Component, getAssetPath, h } from '@stencil/core';\nimport { checkmarkCircleOutline, informationCircleOutline, refreshOutline } from 'ionicons/icons';\nimport { appPages } from '../../global/appPages';\nimport { state } from '../../global/store';\n\n@Component({\n  tag: 'app-menu',\n  styleUrl: 'app-menu.css',\n  // shadow: true,\n})\nexport class AppMenu {\n  confirmRestartModal: HTMLAppDialogRestartElement;\n\n  render() {\n    return (\n      <ion-menu contentId=\"main-menu\" type=\"overlay\">\n        <ion-content>\n          <ion-list id=\"inbox-list\">\n            <ion-list-header>Inhalt</ion-list-header>\n            <ion-note>Eine Geschichte – 12 Teile</ion-note>\n\n            {appPages.map((appPage, index) => {\n              const t = state[appPage.key];\n              return (\n                <ion-menu-toggle key={index} autoHide={false}>\n                  <ion-item\n                    disabled={t === 'locked' || t === 'highlighted'}\n                    class={location.pathname === appPage.url ? 'selected' : ''}\n                    href={appPage.url}\n                    routerDirection=\"forward\"\n                    lines=\"none\"\n                    detail={false}\n                  >\n                    {t === 'done' ? (\n                      <ion-icon color=\"primary\" aria-hidden=\"true\" slot=\"start\" icon={checkmarkCircleOutline} />\n                    ) : (\n                      <ion-icon color=\"primary\" aria-hidden=\"true\" slot=\"start\" src={getAssetPath('../../assets/icons/hexagon-outline.svg')} />\n                    )}\n                    <ion-label>{appPage.title}</ion-label>\n                  </ion-item>\n                </ion-menu-toggle>\n              );\n            })}\n          </ion-list>\n\n          <ion-list id=\"labels-list\">\n            {/* <ion-list-header>Impressum</ion-list-header> */}\n            <ion-note>Rund um diese App</ion-note>\n            <ion-menu-toggle autoHide={false}>\n              <ion-item lines=\"none\" href={'/about-us'}>\n                <ion-icon color=\"primary\" aria-hidden=\"true\" slot=\"start\" icon={informationCircleOutline} />\n                <ion-label>Impressum</ion-label>\n              </ion-item>\n            </ion-menu-toggle>\n            <ion-item lines=\"none\" button detail={false} onClick={() => this.confirmRestartModal.open()}>\n              <ion-icon color=\"primary\" aria-hidden=\"true\" slot=\"start\" icon={refreshOutline} />\n              <ion-label>Neustart ...</ion-label>\n            </ion-item>\n            <app-dialog-restart ref={e => (this.confirmRestartModal = e)}></app-dialog-restart>\n          </ion-list>\n        </ion-content>\n      </ion-menu>\n    );\n  }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n    * @prop --background: Background of the button\n    * @prop --background-focused: Background of the button when focused with the tab key\n    * @prop --background-focused-opacity: Opacity of the button background when focused with the tab key\n    * @prop --background-hover: Background of the button on hover\n    * @prop --background-hover-opacity: Opacity of the background on hover\n    *\n    * @prop --color: Text color of the button\n    * @prop --color-focused: Text color of the button when focused with the tab key\n    * @prop --color-hover: Text color of the button on hover\n    *\n    * @prop --min-width: Minimum width of the button\n    * @prop --min-height: Minimum height of the button\n    *\n    * @prop --transition: Transition of the button\n    *\n    * @prop --border-radius: Border radius of the button\n    *\n    * @prop --ripple-color: Color of the button ripple effect\n    *\n    * @prop --opacity: Opacity of the button\n    *\n    * @prop --margin-top: Top margin of the button\n    * @prop --margin-end: Right margin if direction is left-to-right, and left margin if direction is right-to-left of the button\n    * @prop --margin-bottom: Bottom margin of the button\n    * @prop --margin-start: Left margin if direction is left-to-right, and right margin if direction is right-to-left of the button\n    *\n    * @prop --padding-top: Top padding of the button\n    * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n    * @prop --padding-bottom: Bottom padding of the button\n    * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n    *\n    * @prop --icon-margin-top: Top margin of the button icon\n    * @prop --icon-margin-end: Right margin if direction is left-to-right, and left margin if direction is right-to-left of the button icon\n    * @prop --icon-margin-bottom: Bottom margin of the button icon\n    * @prop --icon-margin-start: Left margin if direction is left-to-right, and right margin if direction is right-to-left of the button icon\n    *\n    * @prop --icon-padding-top: Top padding of the button icon\n    * @prop --icon-padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button icon\n    * @prop --icon-padding-bottom: Bottom padding of the button icon\n    * @prop --icon-padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button icon\n    *\n    * @prop --icon-font-size: Font size of the button icon\n    * @prop --icon-font-weight: Font weight of the button icon\n    */\n  --background: transparent;\n  --color-focused: currentColor;\n  --color-hover: currentColor;\n  --icon-margin-top: 0;\n  --icon-margin-bottom: 0;\n  --icon-padding-top: 0;\n  --icon-padding-end: 0;\n  --icon-padding-bottom: 0;\n  --icon-padding-start: 0;\n  --margin-top: 0;\n  --margin-end: 0;\n  --margin-bottom: 0;\n  --margin-start: 0;\n  --min-width: auto;\n  --min-height: auto;\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --opacity: 1;\n  --ripple-color: currentColor;\n  --transition: background-color, opacity 100ms linear;\n  display: none;\n  min-width: var(--min-width);\n  min-height: var(--min-height);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  text-align: center;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  text-transform: none;\n  white-space: nowrap;\n  user-select: none;\n  font-kerning: none;\n}\n\nion-ripple-effect {\n  color: var(--ripple-color);\n}\n\n:host(.ion-color) .button-native {\n  color: var(--ion-color-base);\n}\n\n:host(.show-back-button) {\n  display: block;\n}\n\n:host(.back-button-disabled) {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n.button-native {\n  border-radius: var(--border-radius);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  -webkit-margin-start: var(--margin-start);\n  margin-inline-start: var(--margin-start);\n  -webkit-margin-end: var(--margin-end);\n  margin-inline-end: var(--margin-end);\n  margin-top: var(--margin-top);\n  margin-bottom: var(--margin-bottom);\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n  transition: var(--transition);\n  border: 0;\n  outline: none;\n  background: var(--background);\n  line-height: 1;\n  cursor: pointer;\n  opacity: var(--opacity);\n  overflow: hidden;\n  user-select: none;\n  z-index: 0;\n  appearance: none;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\nion-icon {\n  -webkit-padding-start: var(--icon-padding-start);\n  padding-inline-start: var(--icon-padding-start);\n  -webkit-padding-end: var(--icon-padding-end);\n  padding-inline-end: var(--icon-padding-end);\n  padding-top: var(--icon-padding-top);\n  padding-bottom: var(--icon-padding-bottom);\n  -webkit-margin-start: var(--icon-margin-start);\n  margin-inline-start: var(--icon-margin-start);\n  -webkit-margin-end: var(--icon-margin-end);\n  margin-inline-end: var(--icon-margin-end);\n  margin-top: var(--icon-margin-top);\n  margin-bottom: var(--icon-margin-bottom);\n  display: inherit;\n  font-size: var(--icon-font-size);\n  font-weight: var(--icon-font-weight);\n  pointer-events: none;\n}\n\n:host(.ion-focused) .button-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity);\n  }\n}\n:host(.ion-color.ion-focused) .button-native {\n  color: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(.ion-color:hover) .button-native {\n    color: var(--ion-color-base);\n  }\n}\n:host(.in-toolbar:not(.in-toolbar-color)) {\n  color: var(--ion-toolbar-color, var(--color));\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background-hover: transparent;\n  --background-hover-opacity: 1;\n  --background-focused: currentColor;\n  --background-focused-opacity: .1;\n  --border-radius: 4px;\n  --color: var(--ion-color-primary, #3880ff);\n  --icon-margin-end: 1px;\n  --icon-margin-start: -4px;\n  /**\n   * The icon should be sized relative\n   * to the size of the text which is\n   * why we use em here instead of rem.\n   * This allows developers to override\n   * the text font size while ensuring that\n   * the icon is sized relative to that.\n   */\n  --icon-font-size: 1.6em;\n  --min-height: 32px;\n  /**\n   * Main content should be prioritized over the back\n   * button which is why a maximum font size is applied.\n   * Also, we want the text to remain readable\n   * so a minimum font size is applied.\n   * Using 1.294 instead of 1.3 aligns the text\n   * with the icon a bit nicer in Firefox.\n   */\n  font-size: clamp(17px, 1.0625rem, 21.998px);\n}\n\n.button-native {\n  transform: translateZ(0);\n  overflow: visible;\n  z-index: 99;\n}\n\n:host(.ion-activated) .button-native {\n  opacity: 0.4;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) {\n    opacity: 0.6;\n  }\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n    * @prop --background: Background of the button\n    * @prop --background-focused: Background of the button when focused with the tab key\n    * @prop --background-focused-opacity: Opacity of the button background when focused with the tab key\n    * @prop --background-hover: Background of the button on hover\n    * @prop --background-hover-opacity: Opacity of the background on hover\n    *\n    * @prop --color: Text color of the button\n    * @prop --color-focused: Text color of the button when focused with the tab key\n    * @prop --color-hover: Text color of the button on hover\n    *\n    * @prop --min-width: Minimum width of the button\n    * @prop --min-height: Minimum height of the button\n    *\n    * @prop --transition: Transition of the button\n    *\n    * @prop --border-radius: Border radius of the button\n    *\n    * @prop --ripple-color: Color of the button ripple effect\n    *\n    * @prop --opacity: Opacity of the button\n    *\n    * @prop --margin-top: Top margin of the button\n    * @prop --margin-end: Right margin if direction is left-to-right, and left margin if direction is right-to-left of the button\n    * @prop --margin-bottom: Bottom margin of the button\n    * @prop --margin-start: Left margin if direction is left-to-right, and right margin if direction is right-to-left of the button\n    *\n    * @prop --padding-top: Top padding of the button\n    * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n    * @prop --padding-bottom: Bottom padding of the button\n    * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n    *\n    * @prop --icon-margin-top: Top margin of the button icon\n    * @prop --icon-margin-end: Right margin if direction is left-to-right, and left margin if direction is right-to-left of the button icon\n    * @prop --icon-margin-bottom: Bottom margin of the button icon\n    * @prop --icon-margin-start: Left margin if direction is left-to-right, and right margin if direction is right-to-left of the button icon\n    *\n    * @prop --icon-padding-top: Top padding of the button icon\n    * @prop --icon-padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button icon\n    * @prop --icon-padding-bottom: Bottom padding of the button icon\n    * @prop --icon-padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button icon\n    *\n    * @prop --icon-font-size: Font size of the button icon\n    * @prop --icon-font-weight: Font weight of the button icon\n    */\n  --background: transparent;\n  --color-focused: currentColor;\n  --color-hover: currentColor;\n  --icon-margin-top: 0;\n  --icon-margin-bottom: 0;\n  --icon-padding-top: 0;\n  --icon-padding-end: 0;\n  --icon-padding-bottom: 0;\n  --icon-padding-start: 0;\n  --margin-top: 0;\n  --margin-end: 0;\n  --margin-bottom: 0;\n  --margin-start: 0;\n  --min-width: auto;\n  --min-height: auto;\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --opacity: 1;\n  --ripple-color: currentColor;\n  --transition: background-color, opacity 100ms linear;\n  display: none;\n  min-width: var(--min-width);\n  min-height: var(--min-height);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  text-align: center;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  text-transform: none;\n  white-space: nowrap;\n  user-select: none;\n  font-kerning: none;\n}\n\nion-ripple-effect {\n  color: var(--ripple-color);\n}\n\n:host(.ion-color) .button-native {\n  color: var(--ion-color-base);\n}\n\n:host(.show-back-button) {\n  display: block;\n}\n\n:host(.back-button-disabled) {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n.button-native {\n  border-radius: var(--border-radius);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  -webkit-margin-start: var(--margin-start);\n  margin-inline-start: var(--margin-start);\n  -webkit-margin-end: var(--margin-end);\n  margin-inline-end: var(--margin-end);\n  margin-top: var(--margin-top);\n  margin-bottom: var(--margin-bottom);\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n  transition: var(--transition);\n  border: 0;\n  outline: none;\n  background: var(--background);\n  line-height: 1;\n  cursor: pointer;\n  opacity: var(--opacity);\n  overflow: hidden;\n  user-select: none;\n  z-index: 0;\n  appearance: none;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\nion-icon {\n  -webkit-padding-start: var(--icon-padding-start);\n  padding-inline-start: var(--icon-padding-start);\n  -webkit-padding-end: var(--icon-padding-end);\n  padding-inline-end: var(--icon-padding-end);\n  padding-top: var(--icon-padding-top);\n  padding-bottom: var(--icon-padding-bottom);\n  -webkit-margin-start: var(--icon-margin-start);\n  margin-inline-start: var(--icon-margin-start);\n  -webkit-margin-end: var(--icon-margin-end);\n  margin-inline-end: var(--icon-margin-end);\n  margin-top: var(--icon-margin-top);\n  margin-bottom: var(--icon-margin-bottom);\n  display: inherit;\n  font-size: var(--icon-font-size);\n  font-weight: var(--icon-font-weight);\n  pointer-events: none;\n}\n\n:host(.ion-focused) .button-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity);\n  }\n}\n:host(.ion-color.ion-focused) .button-native {\n  color: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(.ion-color:hover) .button-native {\n    color: var(--ion-color-base);\n  }\n}\n:host(.in-toolbar:not(.in-toolbar-color)) {\n  color: var(--ion-toolbar-color, var(--color));\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-radius: 4px;\n  --background-focused: currentColor;\n  --background-focused-opacity: .12;\n  --background-hover: currentColor;\n  --background-hover-opacity: 0.04;\n  --color: currentColor;\n  --icon-margin-end: 0;\n  --icon-margin-start: 0;\n  --icon-font-size: 1.5rem;\n  --icon-font-weight: normal;\n  --min-height: 32px;\n  --min-width: 44px;\n  --padding-start: 12px;\n  --padding-end: 12px;\n  font-size: 0.875rem;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n\n:host(.back-button-has-icon-only) {\n  --border-radius: 50%;\n  min-width: 48px;\n  min-height: 48px;\n  /**\n   * This allows the icon only button to\n   * keep its circular shape even when the\n   * text scales up.\n   */\n  aspect-ratio: 1/1;\n}\n\n.button-native {\n  box-shadow: none;\n}\n\n.button-text {\n  -webkit-padding-start: 4px;\n  padding-inline-start: 4px;\n  -webkit-padding-end: 4px;\n  padding-inline-end: 4px;\n  padding-top: 0;\n  padding-bottom: 0;\n}\n\nion-icon {\n  line-height: 0.67;\n  text-align: start;\n}\n\n@media (any-hover: hover) {\n  :host(.ion-color:hover) .button-native::after {\n    background: var(--ion-color-base);\n  }\n}\n:host(.ion-color.ion-focused) .button-native::after {\n  background: var(--ion-color-base);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { inheritAriaAttributes } from \"../../utils/helpers\";\nimport { createColorClasses, hostContext, openURL } from \"../../utils/theme\";\nimport { arrowBackSharp, chevronBack } from \"ionicons/icons\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @part native - The native HTML button element that wraps all child elements.\n * @part icon - The back button icon (uses ion-icon).\n * @part text - The back button text.\n */\nexport class BackButton {\n    constructor() {\n        this.inheritedAttributes = {};\n        this.onClick = async (ev) => {\n            const nav = this.el.closest('ion-nav');\n            ev.preventDefault();\n            if (nav && (await nav.canGoBack())) {\n                return nav.pop({ animationBuilder: this.routerAnimation, skipIfBusy: true });\n            }\n            return openURL(this.defaultHref, ev, 'back', this.routerAnimation);\n        };\n        this.color = undefined;\n        this.defaultHref = undefined;\n        this.disabled = false;\n        this.icon = undefined;\n        this.text = undefined;\n        this.type = 'button';\n        this.routerAnimation = undefined;\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAriaAttributes(this.el);\n        if (this.defaultHref === undefined) {\n            this.defaultHref = config.get('backButtonDefaultHref');\n        }\n    }\n    get backButtonIcon() {\n        const icon = this.icon;\n        if (icon != null) {\n            // icon is set on the component or by the config\n            return icon;\n        }\n        if (getIonMode(this) === 'ios') {\n            // default ios back button icon\n            return config.get('backButtonIcon', chevronBack);\n        }\n        // default md back button icon\n        return config.get('backButtonIcon', arrowBackSharp);\n    }\n    get backButtonText() {\n        const defaultBackButtonText = getIonMode(this) === 'ios' ? 'Back' : null;\n        return this.text != null ? this.text : config.get('backButtonText', defaultBackButtonText);\n    }\n    get hasIconOnly() {\n        return this.backButtonIcon && !this.backButtonText;\n    }\n    get rippleType() {\n        // If the button only has an icon we use the unbounded\n        // \"circular\" ripple effect\n        if (this.hasIconOnly) {\n            return 'unbounded';\n        }\n        return 'bounded';\n    }\n    render() {\n        const { color, defaultHref, disabled, type, hasIconOnly, backButtonIcon, backButtonText, icon, inheritedAttributes, } = this;\n        const showBackButton = defaultHref !== undefined;\n        const mode = getIonMode(this);\n        const ariaLabel = inheritedAttributes['aria-label'] || backButtonText || 'back';\n        return (h(Host, { key: '9e837be314ee8ea487ba2771d36668ef58442faa', onClick: this.onClick, class: createColorClasses(color, {\n                [mode]: true,\n                button: true, // ion-buttons target .button\n                'back-button-disabled': disabled,\n                'back-button-has-icon-only': hasIconOnly,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n                'ion-activatable': true,\n                'ion-focusable': true,\n                'show-back-button': showBackButton,\n            }) }, h(\"button\", { key: 'c4531348bd80cf6163931c5fb432526aa8127043', type: type, disabled: disabled, class: \"button-native\", part: \"native\", \"aria-label\": ariaLabel }, h(\"span\", { key: 'aab8c6d5f0a84aed9f4e4a2532a239b28c7d5589', class: \"button-inner\" }, backButtonIcon && (h(\"ion-icon\", { key: '121eae10947b46a3d109709b79f4126b1c40ade4', part: \"icon\", icon: backButtonIcon, \"aria-hidden\": \"true\", lazy: false, \"flip-rtl\": icon === undefined })), backButtonText && (h(\"span\", { key: '11c28875cc52b99470525d18c1f88f27c390a75a', part: \"text\", \"aria-hidden\": \"true\", class: \"button-text\" }, backButtonText))), mode === 'md' && h(\"ion-ripple-effect\", { key: '804bf8a06cd033c99d61ec2665c842b3b25945fa', type: this.rippleType }))));\n    }\n    static get is() { return \"ion-back-button\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"back-button.ios.scss\"],\n            \"md\": [\"back-button.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"back-button.ios.css\"],\n            \"md\": [\"back-button.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"defaultHref\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The url to navigate back to by default when there is no history.\"\n                },\n                \"attribute\": \"default-href\",\n                \"reflect\": false\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the button.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"icon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The built-in named SVG icon name or the exact `src` of an SVG file\\nto use for the back button.\"\n                },\n                \"attribute\": \"icon\",\n                \"reflect\": false\n            },\n            \"text\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text to display in the back button.\"\n                },\n                \"attribute\": \"text\",\n                \"reflect\": false\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'submit' | 'reset' | 'button'\",\n                    \"resolved\": \"\\\"button\\\" | \\\"reset\\\" | \\\"submit\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The type of the button.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'button'\"\n            },\n            \"routerAnimation\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AnimationBuilder | undefined\",\n                    \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n                    \"references\": {\n                        \"AnimationBuilder\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AnimationBuilder\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When using a router, it specifies the transition animation when navigating to\\nanother page.\"\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the list header\n   * @prop --color: Color of the list header text\n   *\n   * @prop --border-color: Color of the list header border\n   * @prop --border-width: Width of the list header border\n   * @prop --border-style: Style of the list header border\n   *\n   * @prop --inner-border-width: Width of the inner list header border\n   */\n  --border-style: solid;\n  --border-width: 0;\n  --inner-border-width: 0;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  min-height: 40px;\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  color: var(--color);\n  overflow: hidden;\n}\n\n:host(.ion-color) {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n.list-header-inner {\n  display: flex;\n  position: relative;\n  flex: 1;\n  flex-direction: inherit;\n  align-items: inherit;\n  align-self: stretch;\n  min-height: inherit;\n  border-width: var(--inner-border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  overflow: inherit;\n  box-sizing: border-box;\n}\n\n::slotted(ion-label) {\n  flex: 1 1 auto;\n}\n\n:host(.list-header-lines-inset),\n:host(.list-header-lines-none) {\n  --border-width: 0;\n}\n\n:host(.list-header-lines-full),\n:host(.list-header-lines-none) {\n  --inner-border-width: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: transparent;\n  --color: var(--ion-color-step-850, #262626);\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));\n  /* stylelint-disable */\n  padding-right: var(--ion-safe-area-right);\n  padding-left: calc(var(--ion-safe-area-left, 0px) + 16px);\n  /* stylelint-enable */\n  position: relative;\n  align-items: flex-end;\n  font-size: min(1.375rem, 56.1px);\n  font-weight: 700;\n  letter-spacing: 0;\n}\n:host-context([dir=rtl]) {\n  padding-right: calc(var(--ion-safe-area-right, 0px) + 16px);\n  padding-left: var(--ion-safe-area-left);\n}\n\n@supports selector(:dir(rtl)) {\n  :host(:dir(rtl)) {\n    padding-right: calc(var(--ion-safe-area-right, 0px) + 16px);\n    padding-left: var(--ion-safe-area-left);\n  }\n}\n\n::slotted(ion-button),\n::slotted(ion-label) {\n  margin-top: 29px;\n  margin-bottom: 6px;\n}\n\n::slotted(ion-button) {\n  --padding-top: 0;\n  --padding-bottom: 0;\n  -webkit-margin-start: 3px;\n  margin-inline-start: 3px;\n  -webkit-margin-end: 3px;\n  margin-inline-end: 3px;\n  min-height: 1.4em;\n}\n\n:host(.list-header-lines-full) {\n  --border-width: 0 0 0.55px 0;\n}\n\n:host(.list-header-lines-inset) {\n  --inner-border-width: 0 0 0.55px 0;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the list header\n   * @prop --color: Color of the list header text\n   *\n   * @prop --border-color: Color of the list header border\n   * @prop --border-width: Width of the list header border\n   * @prop --border-style: Style of the list header border\n   *\n   * @prop --inner-border-width: Width of the inner list header border\n   */\n  --border-style: solid;\n  --border-width: 0;\n  --inner-border-width: 0;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  min-height: 40px;\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  color: var(--color);\n  overflow: hidden;\n}\n\n:host(.ion-color) {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n.list-header-inner {\n  display: flex;\n  position: relative;\n  flex: 1;\n  flex-direction: inherit;\n  align-items: inherit;\n  align-self: stretch;\n  min-height: inherit;\n  border-width: var(--inner-border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  overflow: inherit;\n  box-sizing: border-box;\n}\n\n::slotted(ion-label) {\n  flex: 1 1 auto;\n}\n\n:host(.list-header-lines-inset),\n:host(.list-header-lines-none) {\n  --border-width: 0;\n}\n\n:host(.list-header-lines-full),\n:host(.list-header-lines-none) {\n  --inner-border-width: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: transparent;\n  --color: var(--ion-text-color, #000);\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));\n  /* stylelint-disable */\n  padding-right: var(--ion-safe-area-right);\n  padding-left: calc(var(--ion-safe-area-left, 0px) + 16px);\n  /* stylelint-enable */\n  min-height: 45px;\n  font-size: 0.875rem;\n}\n:host-context([dir=rtl]) {\n  padding-right: calc(var(--ion-safe-area-right, 0px) + 16px);\n  padding-left: var(--ion-safe-area-left);\n}\n\n@supports selector(:dir(rtl)) {\n  :host(:dir(rtl)) {\n    padding-right: calc(var(--ion-safe-area-right, 0px) + 16px);\n    padding-left: var(--ion-safe-area-left);\n  }\n}\n\n:host(.list-header-lines-full) {\n  --border-width: 0 0 1px 0;\n}\n\n:host(.list-header-lines-inset) {\n  --inner-border-width: 0 0 1px 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class ListHeader {\n    constructor() {\n        this.color = undefined;\n        this.lines = undefined;\n    }\n    render() {\n        const { lines } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'e5fabb3ae91e6fe47c89273d1d2dba5902f77f94', class: createColorClasses(this.color, {\n                [mode]: true,\n                [`list-header-lines-${lines}`]: lines !== undefined,\n            }) }, h(\"div\", { key: 'a9cfdaa436267fbabb0d618c3932849c1b77fbd2', class: \"list-header-inner\" }, h(\"slot\", { key: '8ed806fd58f8f2265c5bf466886086e88ada93cc' }))));\n    }\n    static get is() { return \"ion-list-header\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"list-header.ios.scss\"],\n            \"md\": [\"list-header.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"list-header.ios.css\"],\n            \"md\": [\"list-header.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"lines\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'full' | 'inset' | 'none'\",\n                    \"resolved\": \"\\\"full\\\" | \\\"inset\\\" | \\\"none\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How the bottom border should be displayed on the list header.\"\n                },\n                \"attribute\": \"lines\",\n                \"reflect\": false\n            }\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the menu\n   *\n   * @prop --min-width: Minimum width of the menu\n   * @prop --width: Width of the menu\n   * @prop --max-width: Maximum width of the menu\n   *\n   * @prop --min-height: Minimum height of the menu\n   * @prop --height: Height of the menu\n   * @prop --max-height: Maximum height of the menu\n   */\n  --width: 304px;\n  --min-width: auto;\n  --max-width: auto;\n  --height: 100%;\n  --min-height: auto;\n  --max-height: auto;\n  --background: var(--ion-background-color, #fff);\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: none;\n  position: absolute;\n  contain: strict;\n}\n\n:host(.show-menu) {\n  display: block;\n}\n\n.menu-inner {\n  transform: translateX(-9999px);\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: space-between;\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  background: var(--background);\n  contain: strict;\n}\n\n:host(.menu-side-start) .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * LTR:\n    * The left side of the menu touches the screen edge. The safe area padding has\n    * already been set in the core styles, so there's no need to set it again.\n    * The right side of the menu is not touching the screen edge. Padding is not\n    * applied to the right side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-right: 0px;\n  top: 0;\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.menu-side-start) .menu-inner {\n    inset-inline-start: 0;\n    inset-inline-end: auto;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.menu-side-start) .menu-inner {\n    left: 0;\n    right: auto;\n  }\n  :host-context([dir=rtl]):host(.menu-side-start) .menu-inner, :host-context([dir=rtl]).menu-side-start .menu-inner {\n    left: unset;\n    right: unset;\n    left: auto;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.menu-side-start:dir(rtl)) .menu-inner {\n      left: unset;\n      right: unset;\n      left: auto;\n      right: 0;\n    }\n  }\n}\n:host-context([dir=rtl]):host(.menu-side-start) .menu-inner, :host-context([dir=rtl]).menu-side-start .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * RTL:\n    * The right side of the menu touches the screen edge.\n    * The right side needs to revert back to the default value that was set in the core styles, so we unset it here.\n    * This would keep the variable consistent with the core styles.\n    * Additionally, it would continue to allow users to override the variable if they choose to.\n    * The left side of the menu is not touching the screen edge. Padding is not\n    * applied to the left side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-right: unset;\n  --ion-safe-area-left: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.menu-side-start:dir(rtl)) .menu-inner {\n    /**\n      * Menu does not cover the whole screen so we need to set the safe area for the\n      * side that touches the screen edge only. Since safe area is not logical, it\n      * needs to be applied to the correct side depending on the language direction.\n      * Otherwise, the content will have less space on both sides.\n      *\n      * RTL:\n      * The right side of the menu touches the screen edge.\n      * The right side needs to revert back to the default value that was set in the core styles, so we unset it here.\n      * This would keep the variable consistent with the core styles.\n      * Additionally, it would continue to allow users to override the variable if they choose to.\n      * The left side of the menu is not touching the screen edge. Padding is not\n      * applied to the left side of the menu. A value of 0 is set.\n      */\n    --ion-safe-area-right: unset;\n    --ion-safe-area-left: 0px;\n  }\n}\n\n:host(.menu-side-end) .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * LTR:\n    * The right side of the menu touches the screen edge. The safe area padding has\n    * already been set in the core styles, so there's no need to set it again.\n    * The left side of the menu is not touching the screen edge. Padding is not\n    * applied to the left side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-left: 0px;\n  top: 0;\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.menu-side-end) .menu-inner {\n    inset-inline-start: auto;\n    inset-inline-end: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.menu-side-end) .menu-inner {\n    left: auto;\n    right: 0;\n  }\n  :host-context([dir=rtl]):host(.menu-side-end) .menu-inner, :host-context([dir=rtl]).menu-side-end .menu-inner {\n    left: unset;\n    right: unset;\n    left: 0;\n    right: auto;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.menu-side-end:dir(rtl)) .menu-inner {\n      left: unset;\n      right: unset;\n      left: 0;\n      right: auto;\n    }\n  }\n}\n:host-context([dir=rtl]):host(.menu-side-end) .menu-inner, :host-context([dir=rtl]).menu-side-end .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * RTL:\n    * The left side of the menu touches the screen edge.\n    * The left side needs to revert back to the default value that was set in the core styles, so we unset it here.\n    * This would keep the variable consistent with the core styles.\n    * Additionally, it would continue to allow users to override the variable if they choose to.\n    * The right side of the menu is not touching the screen edge. Padding is not\n    * applied to the right side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-left: unset;\n  --ion-safe-area-right: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.menu-side-end:dir(rtl)) .menu-inner {\n    /**\n      * Menu does not cover the whole screen so we need to set the safe area for the\n      * side that touches the screen edge only. Since safe area is not logical, it\n      * needs to be applied to the correct side depending on the language direction.\n      * Otherwise, the content will have less space on both sides.\n      *\n      * RTL:\n      * The left side of the menu touches the screen edge.\n      * The left side needs to revert back to the default value that was set in the core styles, so we unset it here.\n      * This would keep the variable consistent with the core styles.\n      * Additionally, it would continue to allow users to override the variable if they choose to.\n      * The right side of the menu is not touching the screen edge. Padding is not\n      * applied to the right side of the menu. A value of 0 is set.\n      */\n    --ion-safe-area-left: unset;\n    --ion-safe-area-right: 0px;\n  }\n}\n\nion-backdrop {\n  display: none;\n  opacity: 0.01;\n  z-index: -1;\n}\n\n@media (max-width: 340px) {\n  .menu-inner {\n    --width: 264px;\n  }\n}\n:host(.menu-type-reveal) {\n  z-index: 0;\n}\n\n:host(.menu-type-reveal.show-menu) .menu-inner {\n  transform: translate3d(0,  0,  0);\n}\n\n:host(.menu-type-overlay) {\n  z-index: 1000;\n}\n\n:host(.menu-type-overlay) .show-backdrop {\n  display: block;\n  cursor: pointer;\n}\n\n:host(.menu-pane-visible) {\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n}\n\n:host(.menu-pane-visible) .menu-inner {\n  left: 0;\n  right: 0;\n  width: auto;\n  transform: none;\n  box-shadow: none;\n}\n\n:host(.menu-pane-visible) ion-backdrop {\n  /* stylelint-disable-next-line declaration-no-important */\n  display: hidden !important;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.menu-type-push) {\n  z-index: 1000;\n}\n\n:host(.menu-type-push) .show-backdrop {\n  display: block;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the menu\n   *\n   * @prop --min-width: Minimum width of the menu\n   * @prop --width: Width of the menu\n   * @prop --max-width: Maximum width of the menu\n   *\n   * @prop --min-height: Minimum height of the menu\n   * @prop --height: Height of the menu\n   * @prop --max-height: Maximum height of the menu\n   */\n  --width: 304px;\n  --min-width: auto;\n  --max-width: auto;\n  --height: 100%;\n  --min-height: auto;\n  --max-height: auto;\n  --background: var(--ion-background-color, #fff);\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: none;\n  position: absolute;\n  contain: strict;\n}\n\n:host(.show-menu) {\n  display: block;\n}\n\n.menu-inner {\n  transform: translateX(-9999px);\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  justify-content: space-between;\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  background: var(--background);\n  contain: strict;\n}\n\n:host(.menu-side-start) .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * LTR:\n    * The left side of the menu touches the screen edge. The safe area padding has\n    * already been set in the core styles, so there's no need to set it again.\n    * The right side of the menu is not touching the screen edge. Padding is not\n    * applied to the right side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-right: 0px;\n  top: 0;\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.menu-side-start) .menu-inner {\n    inset-inline-start: 0;\n    inset-inline-end: auto;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.menu-side-start) .menu-inner {\n    left: 0;\n    right: auto;\n  }\n  :host-context([dir=rtl]):host(.menu-side-start) .menu-inner, :host-context([dir=rtl]).menu-side-start .menu-inner {\n    left: unset;\n    right: unset;\n    left: auto;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.menu-side-start:dir(rtl)) .menu-inner {\n      left: unset;\n      right: unset;\n      left: auto;\n      right: 0;\n    }\n  }\n}\n:host-context([dir=rtl]):host(.menu-side-start) .menu-inner, :host-context([dir=rtl]).menu-side-start .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * RTL:\n    * The right side of the menu touches the screen edge.\n    * The right side needs to revert back to the default value that was set in the core styles, so we unset it here.\n    * This would keep the variable consistent with the core styles.\n    * Additionally, it would continue to allow users to override the variable if they choose to.\n    * The left side of the menu is not touching the screen edge. Padding is not\n    * applied to the left side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-right: unset;\n  --ion-safe-area-left: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.menu-side-start:dir(rtl)) .menu-inner {\n    /**\n      * Menu does not cover the whole screen so we need to set the safe area for the\n      * side that touches the screen edge only. Since safe area is not logical, it\n      * needs to be applied to the correct side depending on the language direction.\n      * Otherwise, the content will have less space on both sides.\n      *\n      * RTL:\n      * The right side of the menu touches the screen edge.\n      * The right side needs to revert back to the default value that was set in the core styles, so we unset it here.\n      * This would keep the variable consistent with the core styles.\n      * Additionally, it would continue to allow users to override the variable if they choose to.\n      * The left side of the menu is not touching the screen edge. Padding is not\n      * applied to the left side of the menu. A value of 0 is set.\n      */\n    --ion-safe-area-right: unset;\n    --ion-safe-area-left: 0px;\n  }\n}\n\n:host(.menu-side-end) .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * LTR:\n    * The right side of the menu touches the screen edge. The safe area padding has\n    * already been set in the core styles, so there's no need to set it again.\n    * The left side of the menu is not touching the screen edge. Padding is not\n    * applied to the left side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-left: 0px;\n  top: 0;\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.menu-side-end) .menu-inner {\n    inset-inline-start: auto;\n    inset-inline-end: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.menu-side-end) .menu-inner {\n    left: auto;\n    right: 0;\n  }\n  :host-context([dir=rtl]):host(.menu-side-end) .menu-inner, :host-context([dir=rtl]).menu-side-end .menu-inner {\n    left: unset;\n    right: unset;\n    left: 0;\n    right: auto;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.menu-side-end:dir(rtl)) .menu-inner {\n      left: unset;\n      right: unset;\n      left: 0;\n      right: auto;\n    }\n  }\n}\n:host-context([dir=rtl]):host(.menu-side-end) .menu-inner, :host-context([dir=rtl]).menu-side-end .menu-inner {\n  /**\n    * Menu does not cover the whole screen so we need to set the safe area for the\n    * side that touches the screen edge only. Since safe area is not logical, it\n    * needs to be applied to the correct side depending on the language direction.\n    * Otherwise, the content will have less space on both sides.\n    *\n    * RTL:\n    * The left side of the menu touches the screen edge.\n    * The left side needs to revert back to the default value that was set in the core styles, so we unset it here.\n    * This would keep the variable consistent with the core styles.\n    * Additionally, it would continue to allow users to override the variable if they choose to.\n    * The right side of the menu is not touching the screen edge. Padding is not\n    * applied to the right side of the menu. A value of 0 is set.\n    */\n  --ion-safe-area-left: unset;\n  --ion-safe-area-right: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.menu-side-end:dir(rtl)) .menu-inner {\n    /**\n      * Menu does not cover the whole screen so we need to set the safe area for the\n      * side that touches the screen edge only. Since safe area is not logical, it\n      * needs to be applied to the correct side depending on the language direction.\n      * Otherwise, the content will have less space on both sides.\n      *\n      * RTL:\n      * The left side of the menu touches the screen edge.\n      * The left side needs to revert back to the default value that was set in the core styles, so we unset it here.\n      * This would keep the variable consistent with the core styles.\n      * Additionally, it would continue to allow users to override the variable if they choose to.\n      * The right side of the menu is not touching the screen edge. Padding is not\n      * applied to the right side of the menu. A value of 0 is set.\n      */\n    --ion-safe-area-left: unset;\n    --ion-safe-area-right: 0px;\n  }\n}\n\nion-backdrop {\n  display: none;\n  opacity: 0.01;\n  z-index: -1;\n}\n\n@media (max-width: 340px) {\n  .menu-inner {\n    --width: 264px;\n  }\n}\n:host(.menu-type-reveal) {\n  z-index: 0;\n}\n\n:host(.menu-type-reveal.show-menu) .menu-inner {\n  transform: translate3d(0,  0,  0);\n}\n\n:host(.menu-type-overlay) {\n  z-index: 1000;\n}\n\n:host(.menu-type-overlay) .show-backdrop {\n  display: block;\n  cursor: pointer;\n}\n\n:host(.menu-pane-visible) {\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n}\n\n:host(.menu-pane-visible) .menu-inner {\n  left: 0;\n  right: 0;\n  width: auto;\n  transform: none;\n  box-shadow: none;\n}\n\n:host(.menu-pane-visible) ion-backdrop {\n  /* stylelint-disable-next-line declaration-no-important */\n  display: hidden !important;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.menu-type-overlay) .menu-inner {\n  box-shadow: 4px 0px 16px rgba(0, 0, 0, 0.18);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h } from \"@stencil/core\";\nimport { getTimeGivenProgression } from \"../../utils/animation/cubic-bezier\";\nimport { GESTURE_CONTROLLER } from \"../../utils/gesture/index\";\nimport { shouldUseCloseWatcher } from \"../../utils/hardware-back-button\";\nimport { inheritAriaAttributes, assert, clamp, isEndSide as isEnd } from \"../../utils/helpers\";\nimport { menuController } from \"../../utils/menu-controller/index\";\nimport { getPresentedOverlay } from \"../../utils/overlays\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nconst iosEasing = 'cubic-bezier(0.32,0.72,0,1)';\nconst mdEasing = 'cubic-bezier(0.0,0.0,0.2,1)';\nconst iosEasingReverse = 'cubic-bezier(1, 0, 0.68, 0.28)';\nconst mdEasingReverse = 'cubic-bezier(0.4, 0, 0.6, 1)';\nconst focusableQueryString = '[tabindex]:not([tabindex^=\"-\"]), input:not([type=hidden]):not([tabindex^=\"-\"]), textarea:not([tabindex^=\"-\"]), button:not([tabindex^=\"-\"]), select:not([tabindex^=\"-\"]), .ion-focusable:not([tabindex^=\"-\"])';\n/**\n * @part container - The container for the menu content.\n * @part backdrop - The backdrop that appears over the main content when the menu is open.\n */\nexport class Menu {\n    constructor() {\n        this.lastOnEnd = 0;\n        this.blocker = GESTURE_CONTROLLER.createBlocker({ disableScroll: true });\n        this.didLoad = false;\n        /**\n         * Flag used to determine if an open/close\n         * operation was cancelled. For example, if\n         * an app calls \"menu.open\" then disables the menu\n         * part way through the animation, then this would\n         * be considered a cancelled operation.\n         */\n        this.operationCancelled = false;\n        this.isAnimating = false;\n        this._isOpen = false;\n        this.inheritedAttributes = {};\n        this.handleFocus = (ev) => {\n            /**\n             * Overlays have their own focus trapping listener\n             * so we do not want the two listeners to conflict\n             * with each other. If the top-most overlay that is\n             * open does not contain this ion-menu, then ion-menu's\n             * focus trapping should not run.\n             */\n            const lastOverlay = getPresentedOverlay(document);\n            if (lastOverlay && !lastOverlay.contains(this.el)) {\n                return;\n            }\n            this.trapKeyboardFocus(ev, document);\n        };\n        this.isPaneVisible = false;\n        this.isEndSide = false;\n        this.contentId = undefined;\n        this.menuId = undefined;\n        this.type = undefined;\n        this.disabled = false;\n        this.side = 'start';\n        this.swipeGesture = true;\n        this.maxEdgeStart = 50;\n    }\n    typeChanged(type, oldType) {\n        const contentEl = this.contentEl;\n        if (contentEl) {\n            if (oldType !== undefined) {\n                contentEl.classList.remove(`menu-content-${oldType}`);\n            }\n            contentEl.classList.add(`menu-content-${type}`);\n            contentEl.removeAttribute('style');\n        }\n        if (this.menuInnerEl) {\n            // Remove effects of previous animations\n            this.menuInnerEl.removeAttribute('style');\n        }\n        this.animation = undefined;\n    }\n    disabledChanged() {\n        this.updateState();\n        this.ionMenuChange.emit({\n            disabled: this.disabled,\n            open: this._isOpen,\n        });\n    }\n    sideChanged() {\n        this.isEndSide = isEnd(this.side);\n        /**\n         * Menu direction animation is calculated based on the document direction.\n         * If the document direction changes, we need to create a new animation.\n         */\n        this.animation = undefined;\n    }\n    swipeGestureChanged() {\n        this.updateState();\n    }\n    async connectedCallback() {\n        // TODO: connectedCallback is fired in CE build\n        // before WC is defined. This needs to be fixed in Stencil.\n        if (typeof customElements !== 'undefined' && customElements != null) {\n            await customElements.whenDefined('ion-menu');\n        }\n        if (this.type === undefined) {\n            this.type = config.get('menuType', 'overlay');\n        }\n        if (!Build.isBrowser) {\n            return;\n        }\n        const content = this.contentId !== undefined ? document.getElementById(this.contentId) : null;\n        if (content === null) {\n            console.error('Menu: must have a \"content\" element to listen for drag events on.');\n            return;\n        }\n        if (this.el.contains(content)) {\n            console.error(`Menu: \"contentId\" should refer to the main view's ion-content, not the ion-content inside of the ion-menu.`);\n        }\n        this.contentEl = content;\n        // add menu's content classes\n        content.classList.add('menu-content');\n        this.typeChanged(this.type, undefined);\n        this.sideChanged();\n        // register this menu with the app's menu controller\n        menuController._register(this);\n        this.menuChanged();\n        this.gesture = (await import('../../utils/gesture')).createGesture({\n            el: document,\n            gestureName: 'menu-swipe',\n            gesturePriority: 30,\n            threshold: 10,\n            blurOnStart: true,\n            canStart: (ev) => this.canStart(ev),\n            onWillStart: () => this.onWillStart(),\n            onStart: () => this.onStart(),\n            onMove: (ev) => this.onMove(ev),\n            onEnd: (ev) => this.onEnd(ev),\n        });\n        this.updateState();\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAriaAttributes(this.el);\n    }\n    async componentDidLoad() {\n        this.didLoad = true;\n        this.menuChanged();\n        this.updateState();\n    }\n    menuChanged() {\n        /**\n         * Inform dependent components such as ion-menu-button\n         * that the menu is ready. Note that we only want to do this\n         * once the menu has been rendered which is why we check for didLoad.\n         */\n        if (this.didLoad) {\n            this.ionMenuChange.emit({ disabled: this.disabled, open: this._isOpen });\n        }\n    }\n    async disconnectedCallback() {\n        /**\n         * The menu should be closed when it is\n         * unmounted from the DOM.\n         * This is an async call, so we need to wait for\n         * this to finish otherwise contentEl\n         * will not have MENU_CONTENT_OPEN removed.\n         */\n        await this.close(false);\n        this.blocker.destroy();\n        menuController._unregister(this);\n        if (this.animation) {\n            this.animation.destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        this.animation = undefined;\n        this.contentEl = undefined;\n    }\n    onSplitPaneChanged(ev) {\n        const { target } = ev;\n        const closestSplitPane = this.el.closest('ion-split-pane');\n        /**\n         * Menu listens on the body for \"ionSplitPaneVisible\".\n         * However, this means the callback will run any time\n         * a SplitPane changes visibility. As a result, we only want\n         * Menu's visibility state to update if its parent SplitPane\n         * changes visibility.\n         */\n        if (target !== closestSplitPane) {\n            return;\n        }\n        this.isPaneVisible = ev.detail.isPane(this.el);\n        this.updateState();\n    }\n    onBackdropClick(ev) {\n        // TODO(FW-2832): type (CustomEvent triggers errors which should be sorted)\n        if (this._isOpen && this.lastOnEnd < ev.timeStamp - 100) {\n            const shouldClose = ev.composedPath ? !ev.composedPath().includes(this.menuInnerEl) : false;\n            if (shouldClose) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.close();\n            }\n        }\n    }\n    onKeydown(ev) {\n        if (ev.key === 'Escape') {\n            this.close();\n        }\n    }\n    /**\n     * Returns `true` is the menu is open.\n     */\n    isOpen() {\n        return Promise.resolve(this._isOpen);\n    }\n    /**\n     * Returns `true` is the menu is active.\n     *\n     * A menu is active when it can be opened or closed, meaning it's enabled\n     * and it's not part of a `ion-split-pane`.\n     */\n    isActive() {\n        return Promise.resolve(this._isActive());\n    }\n    /**\n     * Opens the menu. If the menu is already open or it can't be opened,\n     * it returns `false`.\n     */\n    open(animated = true) {\n        return this.setOpen(true, animated);\n    }\n    /**\n     * Closes the menu. If the menu is already closed or it can't be closed,\n     * it returns `false`.\n     */\n    close(animated = true) {\n        return this.setOpen(false, animated);\n    }\n    /**\n     * Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.\n     * If the operation can't be completed successfully, it returns `false`.\n     */\n    toggle(animated = true) {\n        return this.setOpen(!this._isOpen, animated);\n    }\n    /**\n     * Opens or closes the button.\n     * If the operation can't be completed successfully, it returns `false`.\n     */\n    setOpen(shouldOpen, animated = true) {\n        return menuController._setOpen(this, shouldOpen, animated);\n    }\n    focusFirstDescendant() {\n        const { el } = this;\n        const firstInput = el.querySelector(focusableQueryString);\n        if (firstInput) {\n            firstInput.focus();\n        }\n        else {\n            el.focus();\n        }\n    }\n    focusLastDescendant() {\n        const { el } = this;\n        const inputs = Array.from(el.querySelectorAll(focusableQueryString));\n        const lastInput = inputs.length > 0 ? inputs[inputs.length - 1] : null;\n        if (lastInput) {\n            lastInput.focus();\n        }\n        else {\n            el.focus();\n        }\n    }\n    trapKeyboardFocus(ev, doc) {\n        const target = ev.target;\n        if (!target) {\n            return;\n        }\n        /**\n         * If the target is inside the menu contents, let the browser\n         * focus as normal and keep a log of the last focused element.\n         */\n        if (this.el.contains(target)) {\n            this.lastFocus = target;\n        }\n        else {\n            /**\n             * Otherwise, we are about to have focus go out of the menu.\n             * Wrap the focus to either the first or last element.\n             */\n            /**\n             * Once we call `focusFirstDescendant`, another focus event\n             * will fire, which will cause `lastFocus` to be updated\n             * before we can run the code after that. We cache the value\n             * here to avoid that.\n             */\n            this.focusFirstDescendant();\n            /**\n             * If the cached last focused element is the same as the now-\n             * active element, that means the user was on the first element\n             * already and pressed Shift + Tab, so we need to wrap to the\n             * last descendant.\n             */\n            if (this.lastFocus === doc.activeElement) {\n                this.focusLastDescendant();\n            }\n        }\n    }\n    async _setOpen(shouldOpen, animated = true) {\n        // If the menu is disabled or it is currently being animated, let's do nothing\n        if (!this._isActive() || this.isAnimating || shouldOpen === this._isOpen) {\n            return false;\n        }\n        this.beforeAnimation(shouldOpen);\n        await this.loadAnimation();\n        await this.startAnimation(shouldOpen, animated);\n        /**\n         * If the animation was cancelled then\n         * return false because the operation\n         * did not succeed.\n         */\n        if (this.operationCancelled) {\n            this.operationCancelled = false;\n            return false;\n        }\n        this.afterAnimation(shouldOpen);\n        return true;\n    }\n    async loadAnimation() {\n        // Menu swipe animation takes the menu's inner width as parameter,\n        // If `offsetWidth` changes, we need to create a new animation.\n        const width = this.menuInnerEl.offsetWidth;\n        /**\n         * Menu direction animation is calculated based on the document direction.\n         * If the document direction changes, we need to create a new animation.\n         */\n        const isEndSide = isEnd(this.side);\n        if (width === this.width && this.animation !== undefined && isEndSide === this.isEndSide) {\n            return;\n        }\n        this.width = width;\n        this.isEndSide = isEndSide;\n        // Destroy existing animation\n        if (this.animation) {\n            this.animation.destroy();\n            this.animation = undefined;\n        }\n        // Create new animation\n        const animation = (this.animation = await menuController._createAnimation(this.type, this));\n        if (!config.getBoolean('animated', true)) {\n            animation.duration(0);\n        }\n        animation.fill('both');\n    }\n    async startAnimation(shouldOpen, animated) {\n        const isReversed = !shouldOpen;\n        const mode = getIonMode(this);\n        const easing = mode === 'ios' ? iosEasing : mdEasing;\n        const easingReverse = mode === 'ios' ? iosEasingReverse : mdEasingReverse;\n        const ani = this.animation\n            .direction(isReversed ? 'reverse' : 'normal')\n            .easing(isReversed ? easingReverse : easing);\n        if (animated) {\n            await ani.play();\n        }\n        else {\n            ani.play({ sync: true });\n        }\n        /**\n         * We run this after the play invocation\n         * instead of using ani.onFinish so that\n         * multiple onFinish callbacks do not get\n         * run if an animation is played, stopped,\n         * and then played again.\n         */\n        if (ani.getDirection() === 'reverse') {\n            ani.direction('normal');\n        }\n    }\n    _isActive() {\n        return !this.disabled && !this.isPaneVisible;\n    }\n    canSwipe() {\n        return this.swipeGesture && !this.isAnimating && this._isActive();\n    }\n    canStart(detail) {\n        // Do not allow swipe gesture if a modal is open\n        const isModalPresented = !!document.querySelector('ion-modal.show-modal');\n        if (isModalPresented || !this.canSwipe()) {\n            return false;\n        }\n        if (this._isOpen) {\n            return true;\n        }\n        else if (menuController._getOpenSync()) {\n            return false;\n        }\n        return checkEdgeSide(window, detail.currentX, this.isEndSide, this.maxEdgeStart);\n    }\n    onWillStart() {\n        this.beforeAnimation(!this._isOpen);\n        return this.loadAnimation();\n    }\n    onStart() {\n        if (!this.isAnimating || !this.animation) {\n            assert(false, 'isAnimating has to be true');\n            return;\n        }\n        // the cloned animation should not use an easing curve during seek\n        this.animation.progressStart(true, this._isOpen ? 1 : 0);\n    }\n    onMove(detail) {\n        if (!this.isAnimating || !this.animation) {\n            assert(false, 'isAnimating has to be true');\n            return;\n        }\n        const delta = computeDelta(detail.deltaX, this._isOpen, this.isEndSide);\n        const stepValue = delta / this.width;\n        this.animation.progressStep(this._isOpen ? 1 - stepValue : stepValue);\n    }\n    onEnd(detail) {\n        if (!this.isAnimating || !this.animation) {\n            assert(false, 'isAnimating has to be true');\n            return;\n        }\n        const isOpen = this._isOpen;\n        const isEndSide = this.isEndSide;\n        const delta = computeDelta(detail.deltaX, isOpen, isEndSide);\n        const width = this.width;\n        const stepValue = delta / width;\n        const velocity = detail.velocityX;\n        const z = width / 2.0;\n        const shouldCompleteRight = velocity >= 0 && (velocity > 0.2 || detail.deltaX > z);\n        const shouldCompleteLeft = velocity <= 0 && (velocity < -0.2 || detail.deltaX < -z);\n        const shouldComplete = isOpen\n            ? isEndSide\n                ? shouldCompleteRight\n                : shouldCompleteLeft\n            : isEndSide\n                ? shouldCompleteLeft\n                : shouldCompleteRight;\n        let shouldOpen = !isOpen && shouldComplete;\n        if (isOpen && !shouldComplete) {\n            shouldOpen = true;\n        }\n        this.lastOnEnd = detail.currentTime;\n        // Account for rounding errors in JS\n        let newStepValue = shouldComplete ? 0.001 : -0.001;\n        /**\n         * stepValue can sometimes return a negative\n         * value, but you can't have a negative time value\n         * for the cubic bezier curve (at least with web animations)\n         */\n        const adjustedStepValue = stepValue < 0 ? 0.01 : stepValue;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n        newStepValue +=\n            getTimeGivenProgression([0, 0], [0.4, 0], [0.6, 1], [1, 1], clamp(0, adjustedStepValue, 0.9999))[0] || 0;\n        const playTo = this._isOpen ? !shouldComplete : shouldComplete;\n        this.animation\n            .easing('cubic-bezier(0.4, 0.0, 0.6, 1)')\n            .onFinish(() => this.afterAnimation(shouldOpen), { oneTimeCallback: true })\n            .progressEnd(playTo ? 1 : 0, this._isOpen ? 1 - newStepValue : newStepValue, 300);\n    }\n    beforeAnimation(shouldOpen) {\n        assert(!this.isAnimating, '_before() should not be called while animating');\n        // this places the menu into the correct location before it animates in\n        // this css class doesn't actually kick off any animations\n        this.el.classList.add(SHOW_MENU);\n        /**\n         * We add a tabindex here so that focus trapping\n         * still works even if the menu does not have\n         * any focusable elements slotted inside. The\n         * focus trapping utility will fallback to focusing\n         * the menu so focus does not leave when the menu\n         * is open.\n         */\n        this.el.setAttribute('tabindex', '0');\n        if (this.backdropEl) {\n            this.backdropEl.classList.add(SHOW_BACKDROP);\n        }\n        // add css class and hide content behind menu from screen readers\n        if (this.contentEl) {\n            this.contentEl.classList.add(MENU_CONTENT_OPEN);\n            /**\n             * When the menu is open and overlaying the main\n             * content, the main content should not be announced\n             * by the screenreader as the menu is the main\n             * focus. This is useful with screenreaders that have\n             * \"read from top\" gestures that read the entire\n             * page from top to bottom when activated.\n             * This should be done before the animation starts\n             * so that users cannot accidentally scroll\n             * the content while dragging a menu open.\n             */\n            this.contentEl.setAttribute('aria-hidden', 'true');\n        }\n        this.blocker.block();\n        this.isAnimating = true;\n        if (shouldOpen) {\n            this.ionWillOpen.emit();\n        }\n        else {\n            this.ionWillClose.emit();\n        }\n    }\n    afterAnimation(isOpen) {\n        var _a;\n        // keep opening/closing the menu disabled for a touch more yet\n        // only add listeners/css if it's enabled and isOpen\n        // and only remove listeners/css if it's not open\n        // emit opened/closed events\n        this._isOpen = isOpen;\n        this.isAnimating = false;\n        if (!this._isOpen) {\n            this.blocker.unblock();\n        }\n        if (isOpen) {\n            // emit open event\n            this.ionDidOpen.emit();\n            /**\n             * Move focus to the menu to prepare focus trapping, as long as\n             * it isn't already focused. Use the host element instead of the\n             * first descendant to avoid the scroll position jumping around.\n             */\n            const focusedMenu = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.closest('ion-menu');\n            if (focusedMenu !== this.el) {\n                this.el.focus();\n            }\n            // start focus trapping\n            document.addEventListener('focus', this.handleFocus, true);\n        }\n        else {\n            // remove css classes and unhide content from screen readers\n            this.el.classList.remove(SHOW_MENU);\n            /**\n             * Remove tabindex from the menu component\n             * so that is cannot be tabbed to.\n             */\n            this.el.removeAttribute('tabindex');\n            if (this.contentEl) {\n                this.contentEl.classList.remove(MENU_CONTENT_OPEN);\n                /**\n                 * Remove aria-hidden so screen readers\n                 * can announce the main content again\n                 * now that the menu is not the main focus.\n                 */\n                this.contentEl.removeAttribute('aria-hidden');\n            }\n            if (this.backdropEl) {\n                this.backdropEl.classList.remove(SHOW_BACKDROP);\n            }\n            if (this.animation) {\n                this.animation.stop();\n            }\n            // emit close event\n            this.ionDidClose.emit();\n            // undo focus trapping so multiple menus don't collide\n            document.removeEventListener('focus', this.handleFocus, true);\n        }\n    }\n    updateState() {\n        const isActive = this._isActive();\n        if (this.gesture) {\n            this.gesture.enable(isActive && this.swipeGesture);\n        }\n        /**\n         * If the menu is disabled but it is still open\n         * then we should close the menu immediately.\n         * Additionally, if the menu is in the process\n         * of animating {open, close} and the menu is disabled\n         * then it should still be closed immediately.\n         */\n        if (!isActive) {\n            /**\n             * It is possible to disable the menu while\n             * it is mid-animation. When this happens, we\n             * need to set the operationCancelled flag\n             * so that this._setOpen knows to return false\n             * and not run the \"afterAnimation\" callback.\n             */\n            if (this.isAnimating) {\n                this.operationCancelled = true;\n            }\n            /**\n             * If the menu is disabled then we should\n             * forcibly close the menu even if it is open.\n             */\n            this.afterAnimation(false);\n        }\n    }\n    render() {\n        const { type, disabled, isPaneVisible, inheritedAttributes, side } = this;\n        const mode = getIonMode(this);\n        /**\n         * If the Close Watcher is enabled then\n         * the ionBackButton listener in the menu controller\n         * will handle closing the menu when Escape is pressed.\n         */\n        return (h(Host, { key: '7443f67fbe5122052025bab862136044fc942401', onKeyDown: shouldUseCloseWatcher() ? null : this.onKeydown, role: \"navigation\", \"aria-label\": inheritedAttributes['aria-label'] || 'menu', class: {\n                [mode]: true,\n                [`menu-type-${type}`]: true,\n                'menu-enabled': !disabled,\n                [`menu-side-${side}`]: true,\n                'menu-pane-visible': isPaneVisible,\n            } }, h(\"div\", { key: '45c7d37ace20f663a4bea89cb38bbc798f88dfbd', class: \"menu-inner\", part: \"container\", ref: (el) => (this.menuInnerEl = el) }, h(\"slot\", { key: '975437a5d4029cc200b6dbc2d47a16b4318c00aa' })), h(\"ion-backdrop\", { key: 'acc8a1f5dc1b1e2a34757bf797e794017f545bdc', ref: (el) => (this.backdropEl = el), class: \"menu-backdrop\", tappable: false, stopPropagation: false, part: \"backdrop\" })));\n    }\n    static get is() { return \"ion-menu\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"menu.ios.scss\"],\n            \"md\": [\"menu.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"menu.ios.css\"],\n            \"md\": [\"menu.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"contentId\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `id` of the main content. When using\\na router this is typically `ion-router-outlet`.\\nWhen not using a router, this is typically\\nyour main view's `ion-content`. This is not the\\nid of the `ion-content` inside of your `ion-menu`.\"\n                },\n                \"attribute\": \"content-id\",\n                \"reflect\": true\n            },\n            \"menuId\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"An id for the menu.\"\n                },\n                \"attribute\": \"menu-id\",\n                \"reflect\": true\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The display type of the menu.\\nAvailable options: `\\\"overlay\\\"`, `\\\"reveal\\\"`, `\\\"push\\\"`.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the menu is disabled.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"side\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Side\",\n                    \"resolved\": \"\\\"end\\\" | \\\"start\\\"\",\n                    \"references\": {\n                        \"Side\": {\n                            \"location\": \"import\",\n                            \"path\": \"./menu-interface\",\n                            \"id\": \"src/components/menu/menu-interface.ts::Side\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Which side of the view the menu should be placed.\"\n                },\n                \"attribute\": \"side\",\n                \"reflect\": true,\n                \"defaultValue\": \"'start'\"\n            },\n            \"swipeGesture\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, swiping the menu is enabled.\"\n                },\n                \"attribute\": \"swipe-gesture\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"maxEdgeStart\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The edge threshold for dragging the menu open.\\nIf a drag/swipe happens over this value, the menu is not triggered.\"\n                },\n                \"attribute\": \"max-edge-start\",\n                \"reflect\": false,\n                \"defaultValue\": \"50\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"isPaneVisible\": {},\n            \"isEndSide\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionWillOpen\",\n                \"name\": \"ionWillOpen\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the menu is about to be opened.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionWillClose\",\n                \"name\": \"ionWillClose\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the menu is about to be closed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionDidOpen\",\n                \"name\": \"ionDidOpen\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the menu is open.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionDidClose\",\n                \"name\": \"ionDidClose\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the menu is closed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionMenuChange\",\n                \"name\": \"ionMenuChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the menu state is changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"MenuChangeEventDetail\",\n                    \"resolved\": \"MenuChangeEventDetail\",\n                    \"references\": {\n                        \"MenuChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./menu-interface\",\n                            \"id\": \"src/components/menu/menu-interface.ts::MenuChangeEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"isOpen\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<boolean>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns `true` is the menu is open.\",\n                    \"tags\": []\n                }\n            },\n            \"isActive\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<boolean>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns `true` is the menu is active.\\n\\nA menu is active when it can be opened or closed, meaning it's enabled\\nand it's not part of a `ion-split-pane`.\",\n                    \"tags\": []\n                }\n            },\n            \"open\": {\n                \"complexType\": {\n                    \"signature\": \"(animated?: boolean) => Promise<boolean>\",\n                    \"parameters\": [{\n                            \"name\": \"animated\",\n                            \"type\": \"boolean\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Opens the menu. If the menu is already open or it can't be opened,\\nit returns `false`.\",\n                    \"tags\": []\n                }\n            },\n            \"close\": {\n                \"complexType\": {\n                    \"signature\": \"(animated?: boolean) => Promise<boolean>\",\n                    \"parameters\": [{\n                            \"name\": \"animated\",\n                            \"type\": \"boolean\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Closes the menu. If the menu is already closed or it can't be closed,\\nit returns `false`.\",\n                    \"tags\": []\n                }\n            },\n            \"toggle\": {\n                \"complexType\": {\n                    \"signature\": \"(animated?: boolean) => Promise<boolean>\",\n                    \"parameters\": [{\n                            \"name\": \"animated\",\n                            \"type\": \"boolean\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.\\nIf the operation can't be completed successfully, it returns `false`.\",\n                    \"tags\": []\n                }\n            },\n            \"setOpen\": {\n                \"complexType\": {\n                    \"signature\": \"(shouldOpen: boolean, animated?: boolean) => Promise<boolean>\",\n                    \"parameters\": [{\n                            \"name\": \"shouldOpen\",\n                            \"type\": \"boolean\",\n                            \"docs\": \"\"\n                        }, {\n                            \"name\": \"animated\",\n                            \"type\": \"boolean\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Opens or closes the button.\\nIf the operation can't be completed successfully, it returns `false`.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"type\",\n                \"methodName\": \"typeChanged\"\n            }, {\n                \"propName\": \"disabled\",\n                \"methodName\": \"disabledChanged\"\n            }, {\n                \"propName\": \"side\",\n                \"methodName\": \"sideChanged\"\n            }, {\n                \"propName\": \"swipeGesture\",\n                \"methodName\": \"swipeGestureChanged\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"ionSplitPaneVisible\",\n                \"method\": \"onSplitPaneChanged\",\n                \"target\": \"body\",\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"click\",\n                \"method\": \"onBackdropClick\",\n                \"target\": undefined,\n                \"capture\": true,\n                \"passive\": false\n            }];\n    }\n}\nconst computeDelta = (deltaX, isOpen, isEndSide) => {\n    return Math.max(0, isOpen !== isEndSide ? -deltaX : deltaX);\n};\nconst checkEdgeSide = (win, posX, isEndSide, maxEdgeStart) => {\n    if (isEndSide) {\n        return posX >= win.innerWidth - maxEdgeStart;\n    }\n    else {\n        return posX <= maxEdgeStart;\n    }\n};\nconst SHOW_MENU = 'show-menu';\nconst SHOW_BACKDROP = 'show-backdrop';\nconst MENU_CONTENT_OPEN = 'menu-content-open';\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { menuController } from \"../../utils/menu-controller/index\";\n// Given a menu, return whether or not the menu toggle should be visible\nexport const updateVisibility = async (menu) => {\n    const menuEl = await menuController.get(menu);\n    return !!(menuEl && (await menuEl.isActive()));\n};\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --border-radius: Border radius of the menu button\n   *\n   * @prop --background: Background of the menu button\n   * @prop --background-hover: Background of the menu button on hover\n   * @prop --background-hover-opacity: Opacity of the background on hover\n   * @prop --background-focused: Background of the menu button when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the menu button background when focused with the tab key\n   *\n   * @prop --color: Color of the menu button\n   * @prop --color-hover: Color of the menu button on hover\n   * @prop --color-focused: Color of the menu button when focused with the tab key\n   *\n   * @prop --padding-top: Top padding of the button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n   * @prop --padding-bottom: Bottom padding of the button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n   */\n  --background: transparent;\n  --color-focused: currentColor;\n  --border-radius: initial;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  color: var(--color);\n  text-align: center;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  text-transform: none;\n  white-space: nowrap;\n  font-kerning: none;\n}\n\n.button-native {\n  border-radius: var(--border-radius);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n  border: 0;\n  outline: none;\n  background: var(--background);\n  line-height: 1;\n  cursor: pointer;\n  overflow: hidden;\n  user-select: none;\n  z-index: 0;\n  appearance: none;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n  z-index: 1;\n}\n\nion-icon {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  pointer-events: none;\n}\n\n:host(.menu-button-hidden) {\n  display: none;\n}\n\n:host(.menu-button-disabled) {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n:host(.ion-focused) .button-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity, 0);\n  }\n}\n:host(.ion-color) .button-native {\n  color: var(--ion-color-base);\n}\n\n:host(.in-toolbar:not(.in-toolbar-color)) {\n  color: var(--ion-toolbar-color, var(--color));\n}\n\n:host {\n  --background-focused: currentColor;\n  --background-focused-opacity: .1;\n  --border-radius: 4px;\n  --color: var(--ion-color-primary, #3880ff);\n  --padding-start: 5px;\n  --padding-end: 5px;\n  min-height: 32px;\n  font-size: clamp(31px, 1.9375rem, 38.13px);\n}\n\n:host(.ion-activated) {\n  opacity: 0.4;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) {\n    opacity: 0.6;\n  }\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --border-radius: Border radius of the menu button\n   *\n   * @prop --background: Background of the menu button\n   * @prop --background-hover: Background of the menu button on hover\n   * @prop --background-hover-opacity: Opacity of the background on hover\n   * @prop --background-focused: Background of the menu button when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the menu button background when focused with the tab key\n   *\n   * @prop --color: Color of the menu button\n   * @prop --color-hover: Color of the menu button on hover\n   * @prop --color-focused: Color of the menu button when focused with the tab key\n   *\n   * @prop --padding-top: Top padding of the button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n   * @prop --padding-bottom: Bottom padding of the button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n   */\n  --background: transparent;\n  --color-focused: currentColor;\n  --border-radius: initial;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  color: var(--color);\n  text-align: center;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  text-transform: none;\n  white-space: nowrap;\n  font-kerning: none;\n}\n\n.button-native {\n  border-radius: var(--border-radius);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n  border: 0;\n  outline: none;\n  background: var(--background);\n  line-height: 1;\n  cursor: pointer;\n  overflow: hidden;\n  user-select: none;\n  z-index: 0;\n  appearance: none;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n  z-index: 1;\n}\n\nion-icon {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  pointer-events: none;\n}\n\n:host(.menu-button-hidden) {\n  display: none;\n}\n\n:host(.menu-button-disabled) {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n:host(.ion-focused) .button-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n@media (any-hover: hover) {\n  :host(:hover) .button-native {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity, 0);\n  }\n}\n:host(.ion-color) .button-native {\n  color: var(--ion-color-base);\n}\n\n:host(.in-toolbar:not(.in-toolbar-color)) {\n  color: var(--ion-toolbar-color, var(--color));\n}\n\n:host {\n  --background-focused: currentColor;\n  --background-focused-opacity: .12;\n  --background-hover: currentColor;\n  --background-hover-opacity: .04;\n  --border-radius: 50%;\n  --color: initial;\n  --padding-start: 8px;\n  --padding-end: 8px;\n  width: 3rem;\n  height: 3rem;\n  font-size: 1.5rem;\n}\n\n:host(.ion-color.ion-focused)::after {\n  background: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(.ion-color:hover) .button-native::after {\n    background: var(--ion-color-base);\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { inheritAriaAttributes } from \"../../utils/helpers\";\nimport { menuController } from \"../../utils/menu-controller/index\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { menuOutline, menuSharp } from \"ionicons/icons\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { updateVisibility } from \"../menu-toggle/menu-toggle-util\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @part native - The native HTML button element that wraps all child elements.\n * @part icon - The menu button icon (uses ion-icon).\n */\nexport class MenuButton {\n    constructor() {\n        this.inheritedAttributes = {};\n        this.onClick = async () => {\n            return menuController.toggle(this.menu);\n        };\n        this.visible = false;\n        this.color = undefined;\n        this.disabled = false;\n        this.menu = undefined;\n        this.autoHide = true;\n        this.type = 'button';\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAriaAttributes(this.el);\n    }\n    componentDidLoad() {\n        this.visibilityChanged();\n    }\n    async visibilityChanged() {\n        this.visible = await updateVisibility(this.menu);\n    }\n    render() {\n        const { color, disabled, inheritedAttributes } = this;\n        const mode = getIonMode(this);\n        const menuIcon = config.get('menuIcon', mode === 'ios' ? menuOutline : menuSharp);\n        const hidden = this.autoHide && !this.visible;\n        const attrs = {\n            type: this.type,\n        };\n        const ariaLabel = inheritedAttributes['aria-label'] || 'menu';\n        return (h(Host, { key: '7a4543dfcbf559f0d3a473683f8e0bd1d4c3542a', onClick: this.onClick, \"aria-disabled\": disabled ? 'true' : null, \"aria-hidden\": hidden ? 'true' : null, class: createColorClasses(color, {\n                [mode]: true,\n                button: true, // ion-buttons target .button\n                'menu-button-hidden': hidden,\n                'menu-button-disabled': disabled,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n                'ion-activatable': true,\n                'ion-focusable': true,\n            }) }, h(\"button\", Object.assign({ key: '2b6944dc130fa765ac7559077254555583529ec3' }, attrs, { disabled: disabled, class: \"button-native\", part: \"native\", \"aria-label\": ariaLabel }), h(\"span\", { key: 'b4d1006bec8c9e761c64ae3e2fb64848dfc30307', class: \"button-inner\" }, h(\"slot\", { key: 'eaf1d57cd2e841c70095821576c52062dc76500b' }, h(\"ion-icon\", { key: '105ddb806aae2e6add6cb3989fd4a5cf5ee7d952', part: \"icon\", icon: menuIcon, mode: mode, lazy: false, \"aria-hidden\": \"true\" }))), mode === 'md' && h(\"ion-ripple-effect\", { key: '8a312aab747de2bdd6adee74fb0bfcbbde12c191', type: \"unbounded\" }))));\n    }\n    static get is() { return \"ion-menu-button\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"menu-button.ios.scss\"],\n            \"md\": [\"menu-button.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"menu-button.ios.css\"],\n            \"md\": [\"menu-button.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the menu button.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"menu\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Optional property that maps to a Menu's `menuId` prop. Can also be `start` or `end` for the menu side. This is used to find the correct menu to toggle\"\n                },\n                \"attribute\": \"menu\",\n                \"reflect\": false\n            },\n            \"autoHide\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Automatically hides the menu button when the corresponding menu is not active\"\n                },\n                \"attribute\": \"auto-hide\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'submit' | 'reset' | 'button'\",\n                    \"resolved\": \"\\\"button\\\" | \\\"reset\\\" | \\\"submit\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The type of the button.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'button'\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"visible\": {}\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get listeners() {\n        return [{\n                \"name\": \"ionMenuChange\",\n                \"method\": \"visibilityChanged\",\n                \"target\": \"body\",\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"ionSplitPaneVisible\",\n                \"method\": \"visibilityChanged\",\n                \"target\": \"body\",\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\n",":host(.menu-toggle-hidden) {\n  display: none;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { menuController } from \"../../utils/menu-controller/index\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { updateVisibility } from \"./menu-toggle-util\";\n/**\n * @slot - Content is placed inside the toggle to act as the click target.\n */\nexport class MenuToggle {\n    constructor() {\n        this.onClick = () => {\n            return menuController.toggle(this.menu);\n        };\n        this.visible = false;\n        this.menu = undefined;\n        this.autoHide = true;\n    }\n    connectedCallback() {\n        this.visibilityChanged();\n    }\n    async visibilityChanged() {\n        this.visible = await updateVisibility(this.menu);\n    }\n    render() {\n        const mode = getIonMode(this);\n        const hidden = this.autoHide && !this.visible;\n        return (h(Host, { key: '94a0815a634c6fb1991854bfbcf5b2b4b61d7710', onClick: this.onClick, \"aria-hidden\": hidden ? 'true' : null, class: {\n                [mode]: true,\n                'menu-toggle-hidden': hidden,\n            } }, h(\"slot\", { key: 'f3ac6d17d5421390ab05f3f31ad00ec4f2ca5c7c' })));\n    }\n    static get is() { return \"ion-menu-toggle\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"menu-toggle.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"menu-toggle.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"menu\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Optional property that maps to a Menu's `menuId` prop.\\nCan also be `start` or `end` for the menu side.\\nThis is used to find the correct menu to toggle.\\n\\nIf this property is not used, `ion-menu-toggle` will toggle the\\nfirst menu that is active.\"\n                },\n                \"attribute\": \"menu\",\n                \"reflect\": false\n            },\n            \"autoHide\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Automatically hides the content when the corresponding menu is not active.\\n\\nBy default, it's `true`. Change it to `false` in order to\\nkeep `ion-menu-toggle` always visible regardless the state of the menu.\"\n                },\n                \"attribute\": \"auto-hide\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"visible\": {}\n        };\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"ionMenuChange\",\n                \"method\": \"visibilityChanged\",\n                \"target\": \"body\",\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"ionSplitPaneVisible\",\n                \"method\": \"visibilityChanged\",\n                \"target\": \"body\",\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\n"],"mappings":"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","ignoreList":[]}