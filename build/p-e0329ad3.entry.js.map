{"version":3,"names":["splitPaneIosCss","splitPaneMdCss","SPLIT_PANE_MAIN","SPLIT_PANE_SIDE","QUERY","xs","sm","md","lg","xl","never","SplitPane","constructor","hostRef","this","visible","contentId","undefined","disabled","when","visibleChanged","detail","isPane","bind","ionSplitPaneVisible","emit","connectedCallback","customElements","whenDefined","styleChildren","updateState","disconnectedCallback","rmL","query","mediaQuery","length","callback","q","matches","mediaList","window","matchMedia","addListener","removeListener","element","parentElement","el","classList","contains","children","nu","childElementCount","foundMain","i","child","isMain","id","console","warn","setPaneClass","render","mode","getIonMode","h","Host","key","class","toAdd","toRemove","add","remove"],"sources":["node_modules/@ionic/core/dist/collection/components/split-pane/split-pane.ios.css?tag=ion-split-pane&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/split-pane/split-pane.md.css?tag=ion-split-pane&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/split-pane/split-pane.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --border: Border between panes\n   * @prop --side-min-width: Minimum width of the side pane. Does not apply when split pane is collapsed.\n   * @prop --side-max-width: Maximum width of the side pane. Does not apply when split pane is collapsed.\n   * @prop --side-width: Width of the side pane. Does not apply when split pane is collapsed.\n   */\n  --side-width: 100%;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  contain: strict;\n}\n\n/**\n * Do not pass CSS Variables down on larger\n * screens as we want them to affect the outer\n * `ion-menu` rather than the inner content\n */\n::slotted(ion-menu.menu-pane-visible) {\n  flex: 0 1 auto;\n  width: var(--side-width);\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side),\n:host(.split-pane-visible) ::slotted(.split-pane-main) {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: relative;\n  box-shadow: none;\n  z-index: 0;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-main) {\n  flex: 1;\n  /**\n   * Content can overflow outside of a router outlet\n   * or a nav container to allow for the translucent\n   * tab bar effect to work. However, this can cause\n   * iOS page transitions to flow outside of the container\n   * and overlap the menu on larger viewports. As a result,\n   * we disable the overflow when that is the case.\n   */\n  overflow: hidden;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side:not(ion-menu)),\n:host(.split-pane-visible) ::slotted(ion-menu.split-pane-side.menu-enabled) {\n  display: flex;\n  flex-shrink: 0;\n}\n\n::slotted(.split-pane-side:not(ion-menu)) {\n  display: none;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side) {\n  order: -1;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]) {\n  order: 1;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border: 0.55px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));\n  --side-min-width: 270px;\n  --side-max-width: 28%;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side) {\n  -webkit-border-start: 0;\n  border-inline-start: 0;\n  -webkit-border-end: var(--border);\n  border-inline-end: var(--border);\n  border-top: 0;\n  border-bottom: 0;\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]) {\n  -webkit-border-start: var(--border);\n  border-inline-start: var(--border);\n  -webkit-border-end: 0;\n  border-inline-end: 0;\n  border-top: 0;\n  border-bottom: 0;\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --border: Border between panes\n   * @prop --side-min-width: Minimum width of the side pane. Does not apply when split pane is collapsed.\n   * @prop --side-max-width: Maximum width of the side pane. Does not apply when split pane is collapsed.\n   * @prop --side-width: Width of the side pane. Does not apply when split pane is collapsed.\n   */\n  --side-width: 100%;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  contain: strict;\n}\n\n/**\n * Do not pass CSS Variables down on larger\n * screens as we want them to affect the outer\n * `ion-menu` rather than the inner content\n */\n::slotted(ion-menu.menu-pane-visible) {\n  flex: 0 1 auto;\n  width: var(--side-width);\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side),\n:host(.split-pane-visible) ::slotted(.split-pane-main) {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: relative;\n  box-shadow: none;\n  z-index: 0;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-main) {\n  flex: 1;\n  /**\n   * Content can overflow outside of a router outlet\n   * or a nav container to allow for the translucent\n   * tab bar effect to work. However, this can cause\n   * iOS page transitions to flow outside of the container\n   * and overlap the menu on larger viewports. As a result,\n   * we disable the overflow when that is the case.\n   */\n  overflow: hidden;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side:not(ion-menu)),\n:host(.split-pane-visible) ::slotted(ion-menu.split-pane-side.menu-enabled) {\n  display: flex;\n  flex-shrink: 0;\n}\n\n::slotted(.split-pane-side:not(ion-menu)) {\n  display: none;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side) {\n  order: -1;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]) {\n  order: 1;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border: 1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));\n  --side-min-width: 270px;\n  --side-max-width: 28%;\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side) {\n  -webkit-border-start: 0;\n  border-inline-start: 0;\n  -webkit-border-end: var(--border);\n  border-inline-end: var(--border);\n  border-top: 0;\n  border-bottom: 0;\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}\n\n:host(.split-pane-visible) ::slotted(.split-pane-side[side=end]) {\n  -webkit-border-start: var(--border);\n  border-inline-start: var(--border);\n  -webkit-border-end: 0;\n  border-inline-end: 0;\n  border-top: 0;\n  border-bottom: 0;\n  min-width: var(--side-min-width);\n  max-width: var(--side-max-width);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h } from \"@stencil/core\";\nimport { getIonMode } from \"../../global/ionic-global\";\n// TODO(FW-2832): types\nconst SPLIT_PANE_MAIN = 'split-pane-main';\nconst SPLIT_PANE_SIDE = 'split-pane-side';\nconst QUERY = {\n    xs: '(min-width: 0px)',\n    sm: '(min-width: 576px)',\n    md: '(min-width: 768px)',\n    lg: '(min-width: 992px)',\n    xl: '(min-width: 1200px)',\n    never: '',\n};\nexport class SplitPane {\n    constructor() {\n        this.visible = false;\n        this.contentId = undefined;\n        this.disabled = false;\n        this.when = QUERY['lg'];\n    }\n    visibleChanged(visible) {\n        const detail = { visible, isPane: this.isPane.bind(this) };\n        this.ionSplitPaneVisible.emit(detail);\n    }\n    async connectedCallback() {\n        // TODO: connectedCallback is fired in CE build\n        // before WC is defined. This needs to be fixed in Stencil.\n        if (typeof customElements !== 'undefined' && customElements != null) {\n            await customElements.whenDefined('ion-split-pane');\n        }\n        this.styleChildren();\n        this.updateState();\n    }\n    disconnectedCallback() {\n        if (this.rmL) {\n            this.rmL();\n            this.rmL = undefined;\n        }\n    }\n    updateState() {\n        if (!Build.isBrowser) {\n            return;\n        }\n        if (this.rmL) {\n            this.rmL();\n            this.rmL = undefined;\n        }\n        // Check if the split-pane is disabled\n        if (this.disabled) {\n            this.visible = false;\n            return;\n        }\n        // When query is a boolean\n        const query = this.when;\n        if (typeof query === 'boolean') {\n            this.visible = query;\n            return;\n        }\n        // When query is a string, let's find first if it is a shortcut\n        const mediaQuery = QUERY[query] || query;\n        // Media query is empty or null, we hide it\n        if (mediaQuery.length === 0) {\n            this.visible = false;\n            return;\n        }\n        // Listen on media query\n        const callback = (q) => {\n            this.visible = q.matches;\n        };\n        const mediaList = window.matchMedia(mediaQuery);\n        // TODO FW-5869\n        mediaList.addListener(callback);\n        this.rmL = () => mediaList.removeListener(callback);\n        this.visible = mediaList.matches;\n    }\n    isPane(element) {\n        if (!this.visible) {\n            return false;\n        }\n        return element.parentElement === this.el && element.classList.contains(SPLIT_PANE_SIDE);\n    }\n    styleChildren() {\n        if (!Build.isBrowser) {\n            return;\n        }\n        const contentId = this.contentId;\n        const children = this.el.children;\n        const nu = this.el.childElementCount;\n        let foundMain = false;\n        for (let i = 0; i < nu; i++) {\n            const child = children[i];\n            const isMain = contentId !== undefined && child.id === contentId;\n            if (isMain) {\n                if (foundMain) {\n                    console.warn('split pane cannot have more than one main node');\n                    return;\n                }\n                foundMain = true;\n            }\n            setPaneClass(child, isMain);\n        }\n        if (!foundMain) {\n            console.warn('split pane does not have a specified main node');\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '57ee198506248916e74d8d082ad547a471e6cc73', class: {\n                [mode]: true,\n                // Used internally for styling\n                [`split-pane-${mode}`]: true,\n                'split-pane-visible': this.visible,\n            } }, h(\"slot\", { key: '2cd89fa50cfe8a7a6bdda981bb89d5a24a8eec88' })));\n    }\n    static get is() { return \"ion-split-pane\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"split-pane.ios.scss\"],\n            \"md\": [\"split-pane.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"split-pane.ios.css\"],\n            \"md\": [\"split-pane.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"contentId\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `id` of the main content. When using\\na router this is typically `ion-router-outlet`.\\nWhen not using a router, this is typically\\nyour main view's `ion-content`. This is not the\\nid of the `ion-content` inside of your `ion-menu`.\"\n                },\n                \"attribute\": \"content-id\",\n                \"reflect\": true\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the split pane will be hidden.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"when\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | boolean\",\n                    \"resolved\": \"boolean | string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When the split-pane should be shown.\\nCan be a CSS media query expression, or a shortcut expression.\\nCan also be a boolean expression.\"\n                },\n                \"attribute\": \"when\",\n                \"reflect\": false,\n                \"defaultValue\": \"QUERY['lg']\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"visible\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionSplitPaneVisible\",\n                \"name\": \"ionSplitPaneVisible\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Expression to be called when the split-pane visibility has changed\"\n                },\n                \"complexType\": {\n                    \"original\": \"{ visible: boolean }\",\n                    \"resolved\": \"{ visible: boolean; }\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"visible\",\n                \"methodName\": \"visibleChanged\"\n            }, {\n                \"propName\": \"disabled\",\n                \"methodName\": \"updateState\"\n            }, {\n                \"propName\": \"when\",\n                \"methodName\": \"updateState\"\n            }];\n    }\n}\nconst setPaneClass = (el, isMain) => {\n    let toAdd;\n    let toRemove;\n    if (isMain) {\n        toAdd = SPLIT_PANE_MAIN;\n        toRemove = SPLIT_PANE_SIDE;\n    }\n    else {\n        toAdd = SPLIT_PANE_SIDE;\n        toRemove = SPLIT_PANE_MAIN;\n    }\n    const classList = el.classList;\n    classList.add(toAdd);\n    classList.remove(toRemove);\n};\n"],"mappings":"oGAAA,MAAMA,EAAkB,yjDCAxB,MAAMC,EAAiB,kkDCMvB,MAAMC,EAAkB,kBACxB,MAAMC,EAAkB,kBACxB,MAAMC,EAAQ,CACVC,GAAI,mBACJC,GAAI,qBACJC,GAAI,qBACJC,GAAI,qBACJC,GAAI,sBACJC,MAAO,I,MAEEC,EAAS,MAClB,WAAAC,CAAAC,G,mEACIC,KAAKC,QAAU,MACfD,KAAKE,UAAYC,UACjBH,KAAKI,SAAW,MAChBJ,KAAKK,KAAOf,EAAM,KACrB,CACD,cAAAgB,CAAeL,GACX,MAAMM,EAAS,CAAEN,UAASO,OAAQR,KAAKQ,OAAOC,KAAKT,OACnDA,KAAKU,oBAAoBC,KAAKJ,E,CAElC,uBAAMK,GAGF,UAAWC,iBAAmB,aAAeA,gBAAkB,KAAM,OAC3DA,eAAeC,YAAY,iB,CAErCd,KAAKe,gBACLf,KAAKgB,a,CAET,oBAAAC,GACI,GAAIjB,KAAKkB,IAAK,CACVlB,KAAKkB,MACLlB,KAAKkB,IAAMf,S,EAGnB,WAAAa,GAII,GAAIhB,KAAKkB,IAAK,CACVlB,KAAKkB,MACLlB,KAAKkB,IAAMf,S,CAGf,GAAIH,KAAKI,SAAU,CACfJ,KAAKC,QAAU,MACf,M,CAGJ,MAAMkB,EAAQnB,KAAKK,KACnB,UAAWc,IAAU,UAAW,CAC5BnB,KAAKC,QAAUkB,EACf,M,CAGJ,MAAMC,EAAa9B,EAAM6B,IAAUA,EAEnC,GAAIC,EAAWC,SAAW,EAAG,CACzBrB,KAAKC,QAAU,MACf,M,CAGJ,MAAMqB,EAAYC,IACdvB,KAAKC,QAAUsB,EAAEC,OAAO,EAE5B,MAAMC,EAAYC,OAAOC,WAAWP,GAEpCK,EAAUG,YAAYN,GACtBtB,KAAKkB,IAAM,IAAMO,EAAUI,eAAeP,GAC1CtB,KAAKC,QAAUwB,EAAUD,O,CAE7B,MAAAhB,CAAOsB,GACH,IAAK9B,KAAKC,QAAS,CACf,OAAO,K,CAEX,OAAO6B,EAAQC,gBAAkB/B,KAAKgC,IAAMF,EAAQG,UAAUC,SAAS7C,E,CAE3E,aAAA0B,GAII,MAAMb,EAAYF,KAAKE,UACvB,MAAMiC,EAAWnC,KAAKgC,GAAGG,SACzB,MAAMC,EAAKpC,KAAKgC,GAAGK,kBACnB,IAAIC,EAAY,MAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAIG,IAAK,CACzB,MAAMC,EAAQL,EAASI,GACvB,MAAME,EAASvC,IAAcC,WAAaqC,EAAME,KAAOxC,EACvD,GAAIuC,EAAQ,CACR,GAAIH,EAAW,CACXK,QAAQC,KAAK,kDACb,M,CAEJN,EAAY,I,CAEhBO,EAAaL,EAAOC,E,CAExB,IAAKH,EAAW,CACZK,QAAQC,KAAK,iD,EAGrB,MAAAE,GACI,MAAMC,EAAOC,EAAWhD,MACxB,OAAQiD,EAAEC,EAAM,CAAEC,IAAK,2CAA4CC,MAAO,CAClEL,CAACA,GAAO,KAER,CAAC,cAAcA,KAAS,KACxB,qBAAsB/C,KAAKC,UAC1BgD,EAAE,OAAQ,CAAEE,IAAK,6C,kIA8GlC,MAAMN,EAAe,CAACb,EAAIS,KACtB,IAAIY,EACJ,IAAIC,EACJ,GAAIb,EAAQ,CACRY,EAAQjE,EACRkE,EAAWjE,C,KAEV,CACDgE,EAAQhE,EACRiE,EAAWlE,C,CAEf,MAAM6C,EAAYD,EAAGC,UACrBA,EAAUsB,IAAIF,GACdpB,EAAUuB,OAAOF,EAAS,E","ignoreList":[]}