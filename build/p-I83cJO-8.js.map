{"version":3,"file":"p-I83cJO-8.js","sources":["node_modules/@ionic/core/dist/collection/utils/slot-mutation-controller.js","node_modules/@ionic/core/dist/collection/components/input/input.utils.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { win } from \"./browser/index\";\nimport { raf } from \"./helpers\";\n/**\n * Used to update a scoped component that uses emulated slots. This fires when\n * content is passed into the slot or when the content inside of a slot changes.\n * This is not needed for components using native slots in the Shadow DOM.\n * @internal\n * @param el The host element to observe\n * @param slotName mutationCallback will fire when nodes on these slot(s) change\n * @param mutationCallback The callback to fire whenever the slotted content changes\n */\nexport const createSlotMutationController = (el, slotName, mutationCallback) => {\n    let hostMutationObserver;\n    let slottedContentMutationObserver;\n    if (win !== undefined && 'MutationObserver' in win) {\n        const slots = Array.isArray(slotName) ? slotName : [slotName];\n        hostMutationObserver = new MutationObserver((entries) => {\n            for (const entry of entries) {\n                for (const node of entry.addedNodes) {\n                    /**\n                     * Check to see if the added node\n                     *  is our slotted content.\n                     */\n                    if (node.nodeType === Node.ELEMENT_NODE && slots.includes(node.slot)) {\n                        /**\n                         * If so, we want to watch the slotted\n                         * content itself for changes. This lets us\n                         * detect when content inside of the slot changes.\n                         */\n                        mutationCallback();\n                        /**\n                         * Adding the listener in an raf\n                         * waits until Stencil moves the slotted element\n                         * into the correct place in the event that\n                         * slotted content is being added.\n                         */\n                        raf(() => watchForSlotChange(node));\n                        return;\n                    }\n                }\n            }\n        });\n        hostMutationObserver.observe(el, {\n            childList: true,\n        });\n    }\n    /**\n     * Listen for changes inside of the slotted content.\n     * We can listen for subtree changes here to be\n     * informed of text within the slotted content\n     * changing. Doing this on the host is possible\n     * but it is much more expensive to do because\n     * it also listens for changes to the internals\n     * of the component.\n     */\n    const watchForSlotChange = (slottedEl) => {\n        var _a;\n        if (slottedContentMutationObserver) {\n            slottedContentMutationObserver.disconnect();\n            slottedContentMutationObserver = undefined;\n        }\n        slottedContentMutationObserver = new MutationObserver((entries) => {\n            mutationCallback();\n            for (const entry of entries) {\n                for (const node of entry.removedNodes) {\n                    /**\n                     * If the element was removed then we\n                     * need to destroy the MutationObserver\n                     * so the element can be garbage collected.\n                     */\n                    if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n                        destroySlottedContentObserver();\n                    }\n                }\n            }\n        });\n        /**\n         * Listen for changes inside of the element\n         * as well as anything deep in the tree.\n         * We listen on the parentElement so that we can\n         * detect when slotted element itself is removed.\n         */\n        slottedContentMutationObserver.observe((_a = slottedEl.parentElement) !== null && _a !== void 0 ? _a : slottedEl, { subtree: true, childList: true });\n    };\n    const destroy = () => {\n        if (hostMutationObserver) {\n            hostMutationObserver.disconnect();\n            hostMutationObserver = undefined;\n        }\n        destroySlottedContentObserver();\n    };\n    const destroySlottedContentObserver = () => {\n        if (slottedContentMutationObserver) {\n            slottedContentMutationObserver.disconnect();\n            slottedContentMutationObserver = undefined;\n        }\n    };\n    return {\n        destroy,\n    };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { printIonError } from \"../../utils/logging/index\";\nexport const getCounterText = (value, maxLength, counterFormatter) => {\n    const valueLength = value == null ? 0 : value.toString().length;\n    const defaultCounterText = defaultCounterFormatter(valueLength, maxLength);\n    /**\n     * If developers did not pass a custom formatter,\n     * use the default one.\n     */\n    if (counterFormatter === undefined) {\n        return defaultCounterText;\n    }\n    /**\n     * Otherwise, try to use the custom formatter\n     * and fallback to the default formatter if\n     * there was an error.\n     */\n    try {\n        return counterFormatter(valueLength, maxLength);\n    }\n    catch (e) {\n        printIonError('Exception in provided `counterFormatter`.', e);\n        return defaultCounterText;\n    }\n};\nconst defaultCounterFormatter = (length, maxlength) => {\n    return `${length} / ${maxlength}`;\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1]}