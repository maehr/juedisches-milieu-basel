{"version":3,"names":["accordionIosCss","accordionMdCss","Accordion","constructor","hostRef","this","updateListener","updateState","setItemDefaults","ionItem","getSlottedHeaderIonItem","button","detail","lines","undefined","headerEl","slot","querySelector","assignedElements","find","el","tagName","setAria","expanded","root","getElementRoot","setAttribute","slotToggleIcon","toggleIconSlot","toggleIcon","existingToggleIcon","iconEl","document","createElement","lazy","classList","add","icon","appendChild","expandAccordion","initialUpdate","contentEl","contentElWrapper","state","currentRaf","cancelAnimationFrame","shouldAnimate","raf","async","contentHeight","offsetHeight","waitForTransition","transitionEndAsync","style","setProperty","removeProperty","collapseAccordion","window","prefersReducedMotion","matchMedia","matches","animated","config","get","accordionGroupEl","accordionGroup","accordionValue","value","shouldExpand","Array","isArray","includes","isNext","isPrevious","nextAccordion","getNextSibling","nextAccordionValue","previousAccordion","getPreviousSibling","previousAccordionValue","nextSibling","nextElementSibling","previousSibling","previousElementSibling","accordionIds","disabled","readonly","chevronDown","valueChanged","connectedCallback","_a","closest","addEventListener","disconnectedCallback","removeEventListener","componentDidLoad","toggleExpanded","expand","requestAccordionToggle","render","mode","getIonMode","headerPart","contentPart","h","Host","key","class","onClick","id","part","ref","name","role","delegatesFocus"],"sources":["node_modules/@ionic/core/dist/collection/components/accordion/accordion.ios.css?tag=ion-accordion&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/accordion/accordion.md.css?tag=ion-accordion&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/accordion/accordion.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: block;\n  position: relative;\n  width: 100%;\n  background-color: var(--ion-background-color, #ffffff);\n  overflow: hidden;\n  /**\n   * This is required to force WebKit\n   * to create a new stacking context\n   * otherwise the border radius is\n   * temporarily lost when hovering over\n   * the ion-item or expanding/collapsing\n   * the accordion.\n   */\n  z-index: 0;\n}\n\n:host(.accordion-expanding) ::slotted(ion-item[slot=header]),\n:host(.accordion-expanded) ::slotted(ion-item[slot=header]) {\n  --border-width: 0px;\n}\n\n:host(.accordion-animated) {\n  transition: all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);\n}\n\n:host(.accordion-animated) #content {\n  transition: max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);\n}\n\n#content {\n  overflow: hidden;\n  will-change: max-height;\n}\n\n:host(.accordion-collapsing) #content {\n  /* stylelint-disable-next-line declaration-no-important */\n  max-height: 0 !important;\n}\n\n:host(.accordion-collapsed) #content {\n  display: none;\n}\n\n:host(.accordion-expanding) #content {\n  max-height: 0;\n}\n\n/**\n * Prevent margins of content-wrapper\n * from collapsing, breaking the animation.\n */\n:host(.accordion-expanding) #content-wrapper {\n  overflow: auto;\n}\n\n:host(.accordion-disabled) #header,\n:host(.accordion-readonly) #header,\n:host(.accordion-disabled) #content,\n:host(.accordion-readonly) #content {\n  pointer-events: none;\n}\n\n/**\n * We do not set the opacity on the\n * host otherwise you would see the\n * box-shadow behind it.\n */\n:host(.accordion-disabled) #header,\n:host(.accordion-disabled) #content {\n  opacity: 0.4;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  :host,\n  #content {\n    /* stylelint-disable declaration-no-important */\n    transition: none !important;\n  }\n}\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.accordion-next) ::slotted(ion-item[slot=header]) {\n  --border-width: 0.55px 0px 0.55px 0px;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: block;\n  position: relative;\n  width: 100%;\n  background-color: var(--ion-background-color, #ffffff);\n  overflow: hidden;\n  /**\n   * This is required to force WebKit\n   * to create a new stacking context\n   * otherwise the border radius is\n   * temporarily lost when hovering over\n   * the ion-item or expanding/collapsing\n   * the accordion.\n   */\n  z-index: 0;\n}\n\n:host(.accordion-expanding) ::slotted(ion-item[slot=header]),\n:host(.accordion-expanded) ::slotted(ion-item[slot=header]) {\n  --border-width: 0px;\n}\n\n:host(.accordion-animated) {\n  transition: all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);\n}\n\n:host(.accordion-animated) #content {\n  transition: max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);\n}\n\n#content {\n  overflow: hidden;\n  will-change: max-height;\n}\n\n:host(.accordion-collapsing) #content {\n  /* stylelint-disable-next-line declaration-no-important */\n  max-height: 0 !important;\n}\n\n:host(.accordion-collapsed) #content {\n  display: none;\n}\n\n:host(.accordion-expanding) #content {\n  max-height: 0;\n}\n\n/**\n * Prevent margins of content-wrapper\n * from collapsing, breaking the animation.\n */\n:host(.accordion-expanding) #content-wrapper {\n  overflow: auto;\n}\n\n:host(.accordion-disabled) #header,\n:host(.accordion-readonly) #header,\n:host(.accordion-disabled) #content,\n:host(.accordion-readonly) #content {\n  pointer-events: none;\n}\n\n/**\n * We do not set the opacity on the\n * host otherwise you would see the\n * box-shadow behind it.\n */\n:host(.accordion-disabled) #header,\n:host(.accordion-disabled) #content {\n  opacity: 0.4;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  :host,\n  #content {\n    /* stylelint-disable declaration-no-important */\n    transition: none !important;\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { addEventListener, getElementRoot, raf, removeEventListener, transitionEndAsync } from \"../../utils/helpers\";\nimport { chevronDown } from \"ionicons/icons\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot header - Content is placed at the top and is used to\n * expand or collapse the accordion item.\n * @slot content - Content is placed below the header and is\n * shown or hidden based on expanded state.\n *\n * @part header - The wrapper element for the header slot.\n * @part content - The wrapper element for the content slot.\n * @part expanded - The expanded element. Can be used in combination\n * with the `header` and `content` parts (i.e. `::part(header expanded)`).\n */\nexport class Accordion {\n    constructor() {\n        this.updateListener = () => this.updateState(false);\n        this.setItemDefaults = () => {\n            const ionItem = this.getSlottedHeaderIonItem();\n            if (!ionItem) {\n                return;\n            }\n            /**\n             * For a11y purposes, we make\n             * the ion-item a button so users\n             * can tab to it and use keyboard\n             * navigation to get around.\n             */\n            ionItem.button = true;\n            ionItem.detail = false;\n            /**\n             * By default, the lines in an\n             * item should be full here, but\n             * only do that if a user has\n             * not explicitly overridden them\n             */\n            if (ionItem.lines === undefined) {\n                ionItem.lines = 'full';\n            }\n        };\n        this.getSlottedHeaderIonItem = () => {\n            const { headerEl } = this;\n            if (!headerEl) {\n                return;\n            }\n            /**\n             * Get the first ion-item\n             * slotted in the header slot\n             */\n            const slot = headerEl.querySelector('slot');\n            if (!slot) {\n                return;\n            }\n            // This is not defined in unit tests\n            if (slot.assignedElements === undefined)\n                return;\n            return slot.assignedElements().find((el) => el.tagName === 'ION-ITEM');\n        };\n        this.setAria = (expanded = false) => {\n            const ionItem = this.getSlottedHeaderIonItem();\n            if (!ionItem) {\n                return;\n            }\n            /**\n             * Get the native <button> element inside of\n             * ion-item because that is what will be focused\n             */\n            const root = getElementRoot(ionItem);\n            const button = root.querySelector('button');\n            if (!button) {\n                return;\n            }\n            button.setAttribute('aria-expanded', `${expanded}`);\n        };\n        this.slotToggleIcon = () => {\n            const ionItem = this.getSlottedHeaderIonItem();\n            if (!ionItem) {\n                return;\n            }\n            const { toggleIconSlot, toggleIcon } = this;\n            /**\n             * Check if there already is a toggle icon.\n             * If so, do not add another one.\n             */\n            const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n            if (existingToggleIcon) {\n                return;\n            }\n            const iconEl = document.createElement('ion-icon');\n            iconEl.slot = toggleIconSlot;\n            iconEl.lazy = false;\n            iconEl.classList.add('ion-accordion-toggle-icon');\n            iconEl.icon = toggleIcon;\n            iconEl.setAttribute('aria-hidden', 'true');\n            ionItem.appendChild(iconEl);\n        };\n        this.expandAccordion = (initialUpdate = false) => {\n            const { contentEl, contentElWrapper } = this;\n            if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n                this.state = 4 /* AccordionState.Expanded */;\n                return;\n            }\n            if (this.state === 4 /* AccordionState.Expanded */) {\n                return;\n            }\n            if (this.currentRaf !== undefined) {\n                cancelAnimationFrame(this.currentRaf);\n            }\n            if (this.shouldAnimate()) {\n                raf(() => {\n                    this.state = 8 /* AccordionState.Expanding */;\n                    this.currentRaf = raf(async () => {\n                        const contentHeight = contentElWrapper.offsetHeight;\n                        const waitForTransition = transitionEndAsync(contentEl, 2000);\n                        contentEl.style.setProperty('max-height', `${contentHeight}px`);\n                        await waitForTransition;\n                        this.state = 4 /* AccordionState.Expanded */;\n                        contentEl.style.removeProperty('max-height');\n                    });\n                });\n            }\n            else {\n                this.state = 4 /* AccordionState.Expanded */;\n            }\n        };\n        this.collapseAccordion = (initialUpdate = false) => {\n            const { contentEl } = this;\n            if (initialUpdate || contentEl === undefined) {\n                this.state = 1 /* AccordionState.Collapsed */;\n                return;\n            }\n            if (this.state === 1 /* AccordionState.Collapsed */) {\n                return;\n            }\n            if (this.currentRaf !== undefined) {\n                cancelAnimationFrame(this.currentRaf);\n            }\n            if (this.shouldAnimate()) {\n                this.currentRaf = raf(async () => {\n                    const contentHeight = contentEl.offsetHeight;\n                    contentEl.style.setProperty('max-height', `${contentHeight}px`);\n                    raf(async () => {\n                        const waitForTransition = transitionEndAsync(contentEl, 2000);\n                        this.state = 2 /* AccordionState.Collapsing */;\n                        await waitForTransition;\n                        this.state = 1 /* AccordionState.Collapsed */;\n                        contentEl.style.removeProperty('max-height');\n                    });\n                });\n            }\n            else {\n                this.state = 1 /* AccordionState.Collapsed */;\n            }\n        };\n        /**\n         * Helper function to determine if\n         * something should animate.\n         * If prefers-reduced-motion is set\n         * then we should not animate, regardless\n         * of what is set in the config.\n         */\n        this.shouldAnimate = () => {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n            const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n            if (prefersReducedMotion) {\n                return false;\n            }\n            const animated = config.get('animated', true);\n            if (!animated) {\n                return false;\n            }\n            if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n                return false;\n            }\n            return true;\n        };\n        this.updateState = async (initialUpdate = false) => {\n            const accordionGroup = this.accordionGroupEl;\n            const accordionValue = this.value;\n            if (!accordionGroup) {\n                return;\n            }\n            const value = accordionGroup.value;\n            const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n            if (shouldExpand) {\n                this.expandAccordion(initialUpdate);\n                this.isNext = this.isPrevious = false;\n            }\n            else {\n                this.collapseAccordion(initialUpdate);\n                /**\n                 * When using popout or inset,\n                 * the collapsed accordion items\n                 * may need additional border radius\n                 * applied. Check to see if the\n                 * next or previous accordion is selected.\n                 */\n                const nextAccordion = this.getNextSibling();\n                const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n                if (nextAccordionValue !== undefined) {\n                    this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n                }\n                const previousAccordion = this.getPreviousSibling();\n                const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n                if (previousAccordionValue !== undefined) {\n                    this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n                }\n            }\n        };\n        this.getNextSibling = () => {\n            if (!this.el) {\n                return;\n            }\n            const nextSibling = this.el.nextElementSibling;\n            if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n                return;\n            }\n            return nextSibling;\n        };\n        this.getPreviousSibling = () => {\n            if (!this.el) {\n                return;\n            }\n            const previousSibling = this.el.previousElementSibling;\n            if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n                return;\n            }\n            return previousSibling;\n        };\n        this.state = 1 /* AccordionState.Collapsed */;\n        this.isNext = false;\n        this.isPrevious = false;\n        this.value = `ion-accordion-${accordionIds++}`;\n        this.disabled = false;\n        this.readonly = false;\n        this.toggleIcon = chevronDown;\n        this.toggleIconSlot = 'end';\n    }\n    valueChanged() {\n        this.updateState();\n    }\n    connectedCallback() {\n        var _a;\n        const accordionGroupEl = (this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group'));\n        if (accordionGroupEl) {\n            this.updateState(true);\n            addEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n        }\n    }\n    disconnectedCallback() {\n        const accordionGroupEl = this.accordionGroupEl;\n        if (accordionGroupEl) {\n            removeEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n        }\n    }\n    componentDidLoad() {\n        this.setItemDefaults();\n        this.slotToggleIcon();\n        /**\n         * We need to wait a tick because we\n         * just set ionItem.button = true and\n         * the button has not have been rendered yet.\n         */\n        raf(() => {\n            /**\n             * Set aria label on button inside of ion-item\n             * once the inner content has been rendered.\n             */\n            const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n            this.setAria(expanded);\n        });\n    }\n    toggleExpanded() {\n        const { accordionGroupEl, disabled, readonly, value, state } = this;\n        if (disabled || readonly)\n            return;\n        if (accordionGroupEl) {\n            /**\n             * Because the accordion group may or may\n             * not allow multiple accordions open, we\n             * need to request the toggling of this\n             * accordion and the accordion group will\n             * make the decision on whether or not\n             * to allow it.\n             */\n            const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;\n            accordionGroupEl.requestAccordionToggle(value, expand);\n        }\n    }\n    render() {\n        const { disabled, readonly } = this;\n        const mode = getIonMode(this);\n        const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n        const headerPart = expanded ? 'header expanded' : 'header';\n        const contentPart = expanded ? 'content expanded' : 'content';\n        this.setAria(expanded);\n        return (h(Host, { key: '073e1d02c18dcbc20c68648426e87c14750c031d', class: {\n                [mode]: true,\n                'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,\n                'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,\n                'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,\n                'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,\n                'accordion-next': this.isNext,\n                'accordion-previous': this.isPrevious,\n                'accordion-disabled': disabled,\n                'accordion-readonly': readonly,\n                'accordion-animated': this.shouldAnimate(),\n            } }, h(\"div\", { key: '9b4cf326de8bb6b4033992903c0c1bfd7eea9bcc', onClick: () => this.toggleExpanded(), id: \"header\", part: headerPart, \"aria-controls\": \"content\", ref: (headerEl) => (this.headerEl = headerEl) }, h(\"slot\", { key: '464c32a37f64655eacf4218284214f5f30b14a1e', name: \"header\" })), h(\"div\", { key: '8bb52e6a62d7de0106b253201a89a32e79d9a594', id: \"content\", part: contentPart, role: \"region\", \"aria-labelledby\": \"header\", ref: (contentEl) => (this.contentEl = contentEl) }, h(\"div\", { key: '1d9dfd952ad493754aaeea7a8f625b33c2dd90a0', id: \"content-wrapper\", ref: (contentElWrapper) => (this.contentElWrapper = contentElWrapper) }, h(\"slot\", { key: '970dfbc55a612d739d0ca3b7b1a08e5c96d0c479', name: \"content\" })))));\n    }\n    static get is() { return \"ion-accordion\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get delegatesFocus() { return true; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"accordion.ios.scss\"],\n            \"md\": [\"accordion.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"accordion.ios.css\"],\n            \"md\": [\"accordion.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"value\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The value of the accordion. Defaults to an autogenerated\\nvalue.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"`ion-accordion-${accordionIds++}`\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the accordion cannot be interacted with.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"readonly\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the accordion cannot be interacted with,\\nbut does not alter the opacity.\"\n                },\n                \"attribute\": \"readonly\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"toggleIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The toggle icon to use. This icon will be\\nrotated when the accordion is expanded\\nor collapsed.\"\n                },\n                \"attribute\": \"toggle-icon\",\n                \"reflect\": false,\n                \"defaultValue\": \"chevronDown\"\n            },\n            \"toggleIconSlot\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The slot inside of `ion-item` to\\nplace the toggle icon. Defaults to `\\\"end\\\"`.\"\n                },\n                \"attribute\": \"toggle-icon-slot\",\n                \"reflect\": false,\n                \"defaultValue\": \"'end'\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"state\": {},\n            \"isNext\": {},\n            \"isPrevious\": {}\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }];\n    }\n}\nlet accordionIds = 0;\n"],"mappings":"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","ignoreList":[]}