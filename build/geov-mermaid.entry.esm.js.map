{"version":3,"file":"geov-mermaid.entry.esm.js","sources":["node_modules/@geovistory/design-system-web/dist/collection/lib/importMermaid.js","node_modules/@geovistory/design-system-web/dist/collection/components/geov-mermaid/geov-mermaid.css?tag=geov-mermaid&encapsulation=shadow","node_modules/@geovistory/design-system-web/dist/collection/components/geov-mermaid/geov-mermaid.js"],"sourcesContent":["import { isNode } from \"./isNode\";\n/**\n * Load and return mermaid library from CDN in browsers.\n * In node server environment returns null.\n * @returns Mermaid (in browser) or null (in server)\n */\nexport const importMermaid = async () => new Promise((resolve, reject) => {\n  // if we are on a node server resolve with null\n  if (isNode())\n    return resolve(null);\n  // if mermaid is already defined resolve it\n  if ('mermaid' in window) {\n    return resolve(window['mermaid']);\n  }\n  // create new script element\n  const script = document.createElement(`script`);\n  // set type\n  script.type = 'module';\n  // create event names\n  const loadedChannel = 'mermaid-loaded';\n  const errorChannel = 'mermaid-loading-error';\n  script.innerHTML = `\n      try {\n        // load mermaid\n        var mermaid = await import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs');\n\n        // add to window\n        window.mermaid = mermaid.default;\n\n        // dispatch loaded event\n        window.dispatchEvent(new Event(\"${loadedChannel}\"));\n\n      } catch (error) {\n        // dispatch error event\n        window.dispatchEvent(new CustomEvent(\"${errorChannel}\", {detail: error}));\n      }\n    `;\n  // callback on mermaid loaded\n  const onLoaded = () => {\n    // unregister the event listener\n    window.removeEventListener(loadedChannel, onLoaded);\n    // resolve\n    resolve(window['mermaid']);\n  };\n  // register on load callback and resolve Plotly\n  window.addEventListener(loadedChannel, onLoaded);\n  // callback on mermaid loading error\n  const onError = error => {\n    // unregister the event listener\n    window.removeEventListener(errorChannel, onError);\n    // resolve\n    reject(error.detail);\n  };\n  // register on load callback and resolve Plotly\n  window.addEventListener(errorChannel, onError);\n  // append script to load Plotly from CDN to document\n  document.body.appendChild(script);\n});\n//# sourceMappingURL=importMermaid.js.map\n",":host {\n  display: block;\n}\n","import { h, Host } from \"@stencil/core\";\nimport { importMermaid } from \"../../lib/importMermaid\";\n/**\n * This is a simple wrapper around [mermaid.js](https://mermaid.js.org).\n *\n * Develop your chart in the [mermaid live editor](https://mermaid.live/) and wrap it with this component.\n */\nexport class GeovMermaid {\n  constructor() {\n    this.value = '';\n    this.svg = undefined;\n    this.error = undefined;\n  }\n  async componentWillLoad() {\n    this.mermaid = await importMermaid();\n  }\n  async componentDidLoad() {\n    this.createSVG;\n  }\n  extractChartString() {\n    var _a, _b;\n    const firstChild = (_b = (_a = this.slotElement) === null || _a === void 0 ? void 0 : _a.assignedNodes()) === null || _b === void 0 ? void 0 : _b[0];\n    if ((firstChild === null || firstChild === void 0 ? void 0 : firstChild.nodeType) !== 3) {\n      return (this.error = 'Please place (only) the mermaid chart string in the geov-mermaid element');\n    }\n    return firstChild.data;\n  }\n  async createSVG() {\n    if (!this.mermaid)\n      return;\n    const chart = this.extractChartString();\n    try {\n      const { svg } = await this.mermaid.render('graphDiv', chart);\n      this.svg = svg;\n    }\n    catch (error) {\n      this.error = error.toString();\n    }\n  }\n  render() {\n    return (h(Host, null, h(\"span\", { style: { display: 'none' } }, h(\"slot\", { onSlotchange: () => this.createSVG(), ref: (el) => (this.slotElement = el) })), h(\"div\", { innerHTML: this.svg }), this.error && h(\"pre\", { style: { color: 'red' } }, this.error)));\n  }\n  static get is() { return \"geov-mermaid\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-mermaid.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-mermaid.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"value\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false,\n        \"defaultValue\": \"''\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"svg\": {},\n      \"error\": {}\n    };\n  }\n}\n//# sourceMappingURL=geov-mermaid.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1,2]}