{"version":3,"file":"p-DKg_dYcq.js","sources":["node_modules/@ionic/core/dist/collection/utils/keyboard/keyboard-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { doc, win } from \"../browser/index\";\nimport { Keyboard, KeyboardResize } from \"../native/keyboard\";\n/**\n * The element that resizes when the keyboard opens\n * is going to depend on the resize mode\n * which is why we check that here.\n */\nconst getResizeContainer = (resizeMode) => {\n    /**\n     * If doc is undefined then we are\n     * in an SSR environment, so the keyboard\n     * adjustment does not apply.\n     * If the webview does not resize then there\n     * is no container to resize.\n     */\n    if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n        return null;\n    }\n    /**\n     * The three remaining resize modes: Native, Ionic, and Body\n     * all cause `ion-app` to resize, so we can listen for changes\n     * on that. In the event `ion-app` is not available then\n     * we can fall back to `body`.\n     */\n    const ionApp = doc.querySelector('ion-app');\n    return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\n * Get the height of ion-app or body.\n * This is used for determining if the webview\n * has resized before the keyboard closed.\n * */\nconst getResizeContainerHeight = (resizeMode) => {\n    const containerElement = getResizeContainer(resizeMode);\n    return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nexport const createKeyboardController = async (keyboardChangeCallback) => {\n    let keyboardWillShowHandler;\n    let keyboardWillHideHandler;\n    let keyboardVisible;\n    /**\n     * This lets us determine if the webview content\n     * has resized as a result of the keyboard.\n     */\n    let initialResizeContainerHeight;\n    const init = async () => {\n        const resizeOptions = await Keyboard.getResizeMode();\n        const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n        keyboardWillShowHandler = () => {\n            /**\n             * We need to compute initialResizeContainerHeight right before\n             * the keyboard opens to guarantee the resize container is visible.\n             * The resize container may not be visible if we compute this\n             * as soon as the keyboard controller is created.\n             * We should only need to do this once to avoid additional clientHeight\n             * computations.\n             */\n            if (initialResizeContainerHeight === undefined) {\n                initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n            }\n            keyboardVisible = true;\n            fireChangeCallback(keyboardVisible, resizeMode);\n        };\n        keyboardWillHideHandler = () => {\n            keyboardVisible = false;\n            fireChangeCallback(keyboardVisible, resizeMode);\n        };\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n    };\n    const fireChangeCallback = (state, resizeMode) => {\n        if (keyboardChangeCallback) {\n            keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n        }\n    };\n    /**\n     * Code responding to keyboard lifecycles may need\n     * to show/hide content once the webview has\n     * resized as a result of the keyboard showing/hiding.\n     * createResizePromiseIfNeeded provides a way for code to wait for the\n     * resize event that was triggered as a result of the keyboard.\n     */\n    const createResizePromiseIfNeeded = (resizeMode) => {\n        if (\n        /**\n         * If we are in an SSR environment then there is\n         * no window to resize. Additionally, if there\n         * is no resize mode or the resize mode is \"None\"\n         * then initialResizeContainerHeight will be 0\n         */\n        initialResizeContainerHeight === 0 ||\n            /**\n             * If the keyboard is closed before the webview resizes initially\n             * then the webview will never resize.\n             */\n            initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n            return;\n        }\n        /**\n         * Get the resize container so we can\n         * attach the ResizeObserver below to\n         * the correct element.\n         */\n        const containerElement = getResizeContainer(resizeMode);\n        if (containerElement === null) {\n            return;\n        }\n        /**\n         * Some part of the web content should resize,\n         * and we need to listen for a resize.\n         */\n        return new Promise((resolve) => {\n            const callback = () => {\n                /**\n                 * As per the spec, the ResizeObserver\n                 * will fire when observation starts if\n                 * the observed element is rendered and does not\n                 * have a size of 0 x 0. However, the watched element\n                 * may or may not have resized by the time this first\n                 * callback is fired. As a result, we need to check\n                 * the dimensions of the element.\n                 *\n                 * https://www.w3.org/TR/resize-observer/#intro\n                 */\n                if (containerElement.clientHeight === initialResizeContainerHeight) {\n                    /**\n                     * The resize happened, so stop listening\n                     * for resize on this element.\n                     */\n                    ro.disconnect();\n                    resolve();\n                }\n            };\n            /**\n             * In Capacitor there can be delay between when the window\n             * resizes and when the container element resizes, so we cannot\n             * rely on a 'resize' event listener on the window.\n             * Instead, we need to determine when the container\n             * element resizes using a ResizeObserver.\n             */\n            const ro = new ResizeObserver(callback);\n            ro.observe(containerElement);\n        });\n    };\n    const destroy = () => {\n        win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n        win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n        keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n    };\n    const isKeyboardVisible = () => keyboardVisible;\n    await init();\n    return { init, destroy, isKeyboardVisible };\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA,MAAM,kBAAkB,GAAG,CAAC,UAAU,KAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,UAAU,KAAK,cAAc,CAAC,IAAI,IAAI,UAAU,KAAK,SAAS,EAAE;AAC7F,QAAQ,OAAO,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC;AAC/C,IAAI,OAAO,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC,IAAI;AACnE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAM,wBAAwB,GAAG,CAAC,UAAU,KAAK;AACjD,IAAI,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,UAAU,CAAC;AAC3D,IAAI,OAAO,gBAAgB,KAAK,IAAI,GAAG,CAAC,GAAG,gBAAgB,CAAC,YAAY;AACxE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,wBAAwB,GAAG,OAAO,sBAAsB,KAAK;AAC1E,IAAI,IAAI,uBAAuB;AAC/B,IAAI,IAAI,uBAAuB;AAC/B,IAAI,IAAI,eAAe;AACvB;AACA;AACA;AACA;AACA,IAAI,IAAI,4BAA4B;AACpC,IAAI,MAAM,IAAI,GAAG,YAAY;AAC7B,QAAQ,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,aAAa,EAAE;AAC5D,QAAQ,MAAM,UAAU,GAAG,aAAa,KAAK,SAAS,GAAG,SAAS,GAAG,aAAa,CAAC,IAAI;AACvF,QAAQ,uBAAuB,GAAG,MAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,IAAI,4BAA4B,KAAK,SAAS,EAAE;AAC5D,gBAAgB,4BAA4B,GAAG,wBAAwB,CAAC,UAAU,CAAC;AACnF;AACA,YAAY,eAAe,GAAG,IAAI;AAClC,YAAY,kBAAkB,CAAC,eAAe,EAAE,UAAU,CAAC;AAC3D,SAAS;AACT,QAAQ,uBAAuB,GAAG,MAAM;AACxC,YAAY,eAAe,GAAG,KAAK;AACnC,YAAY,kBAAkB,CAAC,eAAe,EAAE,UAAU,CAAC;AAC3D,SAAS;AACT,QAAQ,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;AACnH,QAAQ,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;AACnH,KAAK;AACL,IAAI,MAAM,kBAAkB,GAAG,CAAC,KAAK,EAAE,UAAU,KAAK;AACtD,QAAQ,IAAI,sBAAsB,EAAE;AACpC,YAAY,sBAAsB,CAAC,KAAK,EAAE,2BAA2B,CAAC,UAAU,CAAC,CAAC;AAClF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,2BAA2B,GAAG,CAAC,UAAU,KAAK;AACxD,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4BAA4B,KAAK,CAAC;AAC1C;AACA;AACA;AACA;AACA,YAAY,4BAA4B,KAAK,wBAAwB,CAAC,UAAU,CAAC,EAAE;AACnF,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,UAAU,CAAC;AAC/D,QAAQ,IAAI,gBAAgB,KAAK,IAAI,EAAE;AACvC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;AACxC,YAAY,MAAM,QAAQ,GAAG,MAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,IAAI,gBAAgB,CAAC,YAAY,KAAK,4BAA4B,EAAE;AACpF;AACA;AACA;AACA;AACA,oBAAoB,EAAE,CAAC,UAAU,EAAE;AACnC,oBAAoB,OAAO,EAAE;AAC7B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM,EAAE,GAAG,IAAI,cAAc,CAAC,QAAQ,CAAC;AACnD,YAAY,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC;AACxC,SAAS,CAAC;AACV,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,MAAM;AAC1B,QAAQ,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;AACtH,QAAQ,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;AACtH,QAAQ,uBAAuB,GAAG,uBAAuB,GAAG,SAAS;AACrE,KAAK;AACL,IAAI,MAAM,iBAAiB,GAAG,MAAM,eAAe;AACnD,IAAI,MAAM,IAAI,EAAE;AAChB,IAAI,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,iBAAiB,EAAE;AAC/C;;;;","x_google_ignoreList":[0]}