{"version":3,"file":"ion-datetime-button.entry.esm.js","sources":["node_modules/@ionic/core/dist/collection/components/datetime-button/datetime-button.css?tag=ion-datetime-button&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/datetime-button/datetime-button.css?tag=ion-datetime-button&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/datetime-button/datetime-button.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n\n:host button {\n  border-radius: 8px;\n  -webkit-padding-start: 12px;\n  padding-inline-start: 12px;\n  -webkit-padding-end: 12px;\n  padding-inline-end: 12px;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  -webkit-margin-start: 2px;\n  margin-inline-start: 2px;\n  -webkit-margin-end: 2px;\n  margin-inline-end: 2px;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  position: relative;\n  transition: 150ms color ease-in-out;\n  border: none;\n  background: var(--ion-color-step-300, #edeef0);\n  color: var(--ion-text-color, #000);\n  font-family: inherit;\n  font-size: 1rem;\n  cursor: pointer;\n  overflow: hidden;\n  appearance: none;\n}\n\n:host(.time-active) #time-button,\n:host(.date-active) #date-button {\n  color: var(--ion-color-base);\n}\n\n:host(.datetime-button-disabled) {\n  pointer-events: none;\n}\n\n:host(.datetime-button-disabled) button {\n  opacity: 0.4;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n\n:host button {\n  border-radius: 8px;\n  -webkit-padding-start: 12px;\n  padding-inline-start: 12px;\n  -webkit-padding-end: 12px;\n  padding-inline-end: 12px;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  -webkit-margin-start: 2px;\n  margin-inline-start: 2px;\n  -webkit-margin-end: 2px;\n  margin-inline-end: 2px;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  position: relative;\n  transition: 150ms color ease-in-out;\n  border: none;\n  background: var(--ion-color-step-300, #edeef0);\n  color: var(--ion-text-color, #000);\n  font-family: inherit;\n  font-size: 1rem;\n  cursor: pointer;\n  overflow: hidden;\n  appearance: none;\n}\n\n:host(.time-active) #time-button,\n:host(.date-active) #date-button {\n  color: var(--ion-color-base);\n}\n\n:host(.datetime-button-disabled) {\n  pointer-events: none;\n}\n\n:host(.datetime-button-disabled) button {\n  opacity: 0.4;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { componentOnReady, addEventListener } from \"../../utils/helpers\";\nimport { printIonError } from \"../../utils/logging/index\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { getToday } from \"../datetime/utils/data\";\nimport { getLocalizedDateTime, getLocalizedTime } from \"../datetime/utils/format\";\nimport { getHourCycle } from \"../datetime/utils/helpers\";\nimport { parseDate } from \"../datetime/utils/parse\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot date-target - Content displayed inside of the date button.\n * @slot time-target - Content displayed inside of the time button.\n *\n * @part native - The native HTML button that wraps the slotted text.\n */\nexport class DatetimeButton {\n    constructor() {\n        this.datetimeEl = null;\n        this.overlayEl = null;\n        /**\n         * Accepts one or more string values and converts\n         * them to DatetimeParts. This is done so datetime-button\n         * can work with an array internally and not need\n         * to keep checking if the datetime value is `string` or `string[]`.\n         */\n        this.getParsedDateValues = (value) => {\n            if (value === undefined || value === null) {\n                return [];\n            }\n            if (Array.isArray(value)) {\n                return value;\n            }\n            return [value];\n        };\n        /**\n         * Check the value property on the linked\n         * ion-datetime and then format it according\n         * to the locale specified on ion-datetime.\n         */\n        this.setDateTimeText = () => {\n            var _a, _b, _c, _d, _e;\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            const { value, locale, formatOptions, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n            const parsedValues = this.getParsedDateValues(value);\n            /**\n             * Both ion-datetime and ion-datetime-button default\n             * to today's date and time if no value is set.\n             */\n            const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n            if (!parsedDatetimes) {\n                return;\n            }\n            /**\n             * If developers incorrectly use multiple=\"true\"\n             * with non \"date\" datetimes, then just select\n             * the first value so the interface does\n             * not appear broken. Datetime will provide a\n             * warning in the console.\n             */\n            const firstParsedDatetime = parsedDatetimes[0];\n            const computedHourCycle = getHourCycle(locale, hourCycle);\n            this.dateText = this.timeText = undefined;\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : { month: 'short', day: 'numeric', year: 'numeric' });\n                    const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    if (preferWheel) {\n                        this.dateText = `${dateText} ${timeText}`;\n                    }\n                    else {\n                        this.dateText = dateText;\n                        this.timeText = timeText;\n                    }\n                    break;\n                case 'date':\n                    if (multiple && parsedValues.length !== 1) {\n                        let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n                        if (titleSelectedDatesFormatter !== undefined) {\n                            try {\n                                headerText = titleSelectedDatesFormatter(parsedValues);\n                            }\n                            catch (e) {\n                                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n                            }\n                        }\n                        this.dateText = headerText;\n                    }\n                    else {\n                        this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _b !== void 0 ? _b : { month: 'short', day: 'numeric', year: 'numeric' });\n                    }\n                    break;\n                case 'time':\n                    this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    break;\n                case 'month-year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _c !== void 0 ? _c : { month: 'long', year: 'numeric' });\n                    break;\n                case 'month':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _d !== void 0 ? _d : { month: 'long' });\n                    break;\n                case 'year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_e = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _e !== void 0 ? _e : { year: 'numeric' });\n                    break;\n            }\n        };\n        /**\n         * Waits for the ion-datetime to re-render.\n         * This is needed in order to correctly position\n         * a popover relative to the trigger element.\n         */\n        this.waitForDatetimeChanges = async () => {\n            const { datetimeEl } = this;\n            if (!datetimeEl) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n            });\n        };\n        this.handleDateClick = async (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the date button,\n             * we need to make sure that only a date\n             * picker is displayed. For presentation styles\n             * that display content other than a date picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'date';\n                    /**\n                     * The date+time wheel picker\n                     * shows date and time together,\n                     * so do not adjust the presentation\n                     * in that case.\n                     */\n                    if (!datetimeEl.preferWheel && needsChange) {\n                        datetimeEl.presentation = 'date';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'date';\n            this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n        };\n        this.handleTimeClick = (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the time button,\n             * we need to make sure that only a time\n             * picker is displayed. For presentation styles\n             * that display content other than a time picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'time';\n                    if (needsChange) {\n                        datetimeEl.presentation = 'time';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'time';\n            this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n        };\n        /**\n         * If the datetime is presented in an\n         * overlay, the datetime and overlay\n         * should be appropriately sized.\n         * These classes provide default sizing values\n         * that developers can customize.\n         * The goal is to provide an overlay that is\n         * reasonably sized with a datetime that\n         * fills the entire container.\n         */\n        this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n            const { overlayEl } = this;\n            if (!overlayEl) {\n                return;\n            }\n            if (overlayEl.tagName === 'ION-POPOVER') {\n                /**\n                 * When the presentation on datetime changes,\n                 * we need to wait for the component to re-render\n                 * otherwise the computed width/height of the\n                 * popover content will be wrong, causing\n                 * the popover to not align with the trigger element.\n                 */\n                if (needsPresentationChange) {\n                    await this.waitForDatetimeChanges();\n                }\n                /**\n                 * We pass the trigger button element\n                 * so that the popover aligns with the individual\n                 * button that was clicked, not the component container.\n                 */\n                overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n                        ionShadowTarget: triggerEl,\n                    } }));\n            }\n            else {\n                overlayEl.present();\n            }\n        };\n        this.datetimePresentation = 'date-time';\n        this.dateText = undefined;\n        this.timeText = undefined;\n        this.datetimeActive = false;\n        this.selectedButton = undefined;\n        this.color = 'primary';\n        this.disabled = false;\n        this.datetime = undefined;\n    }\n    async componentWillLoad() {\n        const { datetime } = this;\n        if (!datetime) {\n            printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n            return;\n        }\n        const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n        if (!datetimeEl) {\n            printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n            return;\n        }\n        /**\n         * The element reference must be an ion-datetime. Print an error\n         * if a non-datetime element was provided.\n         */\n        if (datetimeEl.tagName !== 'ION-DATETIME') {\n            printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n            return;\n        }\n        /**\n         * Since the datetime can be used in any context (overlays, accordion, etc)\n         * we track when it is visible to determine when it is active.\n         * This informs which button is highlighted as well as the\n         * aria-expanded state.\n         */\n        const io = new IntersectionObserver((entries) => {\n            const ev = entries[0];\n            this.datetimeActive = ev.isIntersecting;\n        }, {\n            threshold: 0.01,\n        });\n        io.observe(datetimeEl);\n        /**\n         * Get a reference to any modal/popover\n         * the datetime is being used in so we can\n         * correctly size it when it is presented.\n         */\n        const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n        /**\n         * The .ion-datetime-button-overlay class contains\n         * styles that allow any modal/popover to be\n         * sized according to the dimensions of the datetime.\n         * If developers want a smaller/larger overlay all they need\n         * to do is change the width/height of the datetime.\n         * Additionally, this lets us avoid having to set\n         * explicit widths on each variant of datetime.\n         */\n        if (overlayEl) {\n            overlayEl.classList.add('ion-datetime-button-overlay');\n        }\n        componentOnReady(datetimeEl, () => {\n            const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n            /**\n             * Set the initial display\n             * in the rendered buttons.\n             *\n             * From there, we need to listen\n             * for ionChange to be emitted\n             * from datetime so we know when\n             * to re-render the displayed\n             * text in the buttons.\n             */\n            this.setDateTimeText();\n            addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n            /**\n             * Configure the initial selected button\n             * in the event that the datetime is displayed\n             * without clicking one of the datetime buttons.\n             * For example, a datetime could be expanded\n             * in an accordion. In this case users only\n             * need to click the accordion header to show\n             * the datetime.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'date':\n                case 'month-year':\n                case 'month':\n                case 'year':\n                    this.selectedButton = 'date';\n                    break;\n                case 'time-date':\n                case 'time':\n                    this.selectedButton = 'time';\n                    break;\n            }\n        });\n    }\n    render() {\n        const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'ab6c21a4c185dee71c8f14cafad82e38831c68d0', class: createColorClasses(color, {\n                [mode]: true,\n                [`${selectedButton}-active`]: datetimeActive,\n                ['datetime-button-disabled']: disabled,\n            }) }, dateText && (h(\"button\", { key: 'cbda6f3386c3714567a04b5a97a96c71d59822c8', class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { key: 'a00ff431512827bfef8c02982ef37099b2f21508', name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", { key: '67935989628a2ed0492edb813fb0475bfd88abe7' }))), timeText && (h(\"button\", { key: '4207c94de5bece91b8388332e0192d1756403e62', class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { key: '9ffa7ef4417571933bd1757950ec805c49704759', name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", { key: 'fbcad00cf828c9719074d1d06f4e13246b28903e' })))));\n    }\n    static get is() { return \"ion-datetime-button\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"datetime-button.scss\"],\n            \"md\": [\"datetime-button.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"datetime-button.css\"],\n            \"md\": [\"datetime-button.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true,\n                \"defaultValue\": \"'primary'\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the button.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"datetime\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The ID of the `ion-datetime` instance\\nassociated with the datetime button.\"\n                },\n                \"attribute\": \"datetime\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"datetimePresentation\": {},\n            \"dateText\": {},\n            \"timeText\": {},\n            \"datetimeActive\": {},\n            \"selectedButton\": {}\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1,2]}