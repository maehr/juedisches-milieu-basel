{"version":3,"names":["radioIosCss","radioMdCss","Radio","constructor","hostRef","this","inputId","radioButtonIds","radioGroup","hasLoggedDeprecationWarning","updateState","compareWith","value","radioGroupValue","checked","isOptionSelected","onClick","disabled","legacyFormController","hasLegacyControl","nativeInput","allowEmptySelection","onFocus","ionFocus","emit","onBlur","ionBlur","buttonTabindex","color","undefined","name","labelPlacement","legacy","justify","alignment","valueChanged","setFocus","ev","stopPropagation","preventDefault","el","focus","setButtonTabindex","connectedCallback","createLegacyFormController","closest","addEventListener","disconnectedCallback","removeEventListener","componentWillLoad","emitStyle","styleChanged","style","ionStyle","hasLabel","textContent","renderRadioControl","h","class","part","render","renderLegacyRadio","renderRadio","mode","getIonMode","inItem","hostContext","Host","createColorClasses","role","tabindex","printIonWarning","label","labelId","labelText","getAriaLabel","interactive","htmlFor","type","id","ref","nativeEl","RadioGroup","radioGroupIds","setRadioTabindex","radios","getRadios","first","find","radio","focusable","selectedRadio","target","currentValue","newValue","emitValueChange","ionValueChange","componentDidLoad","header","querySelector","Array","from","querySelectorAll","event","ionChange","onKeydown","inSelectPopover","contains","filter","includes","index","findIndex","current","next","key","length","previousValue","renderHiddenInput"],"sources":["node_modules/@ionic/core/dist/collection/components/radio/radio.ios.css?tag=ion-radio&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/radio/radio.md.css?tag=ion-radio&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/radio/radio.js","node_modules/@ionic/core/dist/collection/components/radio-group/radio-group.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Color of the radio\n   * @prop --color-checked: Color of the checked radio\n   * @prop --border-radius: Border radius of the radio\n   * @prop --inner-border-radius: Border radius of the inner checked radio\n   */\n  --inner-border-radius: 50%;\n  display: inline-block;\n  position: relative;\n  box-sizing: border-box;\n  max-width: 100%;\n  min-height: inherit;\n  user-select: none;\n  z-index: 2;\n}\n\n:host(:not(.legacy-radio)) {\n  cursor: pointer;\n}\n\n:host(.radio-disabled) {\n  pointer-events: none;\n}\n\n.radio-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  contain: layout size style;\n}\n\n.radio-icon,\n.radio-inner {\n  box-sizing: border-box;\n}\n\n:host(.legacy-radio) label {\n  top: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  background: transparent;\n  cursor: pointer;\n  appearance: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  opacity: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.legacy-radio) label {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.legacy-radio) label {\n    left: 0;\n  }\n  :host-context([dir=rtl]):host(.legacy-radio) label, :host-context([dir=rtl]).legacy-radio label {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.legacy-radio:dir(rtl)) label {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n:host(.legacy-radio) label::-moz-focus-inner {\n  border: 0;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n:host(:focus) {\n  outline: none;\n}\n\n:host(.in-item:not(.legacy-radio)) {\n  width: 100%;\n  height: 100%;\n}\n\n/**\n * Radio can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]:not(.legacy-radio)),\n:host([slot=end]:not(.legacy-radio)) {\n  width: auto;\n}\n\n.radio-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  min-height: inherit;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n:host(.in-item:not(.legacy-radio)) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.in-item.radio-label-placement-stacked) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 16px;\n}\n\n:host(.in-item.radio-label-placement-stacked) .native-wrapper {\n  margin-bottom: 10px;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n:host(.radio-justify-space-between) .radio-wrapper {\n  justify-content: space-between;\n}\n\n:host(.radio-justify-start) .radio-wrapper {\n  justify-content: start;\n}\n\n:host(.radio-justify-end) .radio-wrapper {\n  justify-content: end;\n}\n\n:host(.radio-alignment-start) .radio-wrapper {\n  align-items: start;\n}\n\n:host(.radio-alignment-center) .radio-wrapper {\n  align-items: center;\n}\n\n/**\n * Label is on the left of the radio in LTR and\n * on the right in RTL.\n */\n:host(.radio-label-placement-start) .radio-wrapper {\n  flex-direction: row;\n}\n\n:host(.radio-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the radio should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the right of the radio in LTR and\n * on the left in RTL.\n */\n:host(.radio-label-placement-end) .radio-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the radio should be on the start\n * when the label sits at the end.\n */\n:host(.radio-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.radio-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the radio should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the left of the radio in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.radio-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n}\n\n/**\n * Label is on top of the radio.\n */\n:host(.radio-label-placement-stacked) .radio-wrapper {\n  flex-direction: column;\n}\n\n:host(.radio-label-placement-stacked) .label-text-wrapper {\n  transform: scale(0.75);\n  /**\n   * The margin between the label and\n   * the radio should be on the bottom\n   * when the label sits on top.\n   */\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 16px;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the radio.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper {\n  transform-origin: left top;\n}\n:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper, :host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-start .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.radio-label-placement-stacked.radio-alignment-start:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n:host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper {\n  transform-origin: center top;\n}\n:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper, :host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-center .label-text-wrapper {\n  transform-origin: calc(100% - center) top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.radio-label-placement-stacked.radio-alignment-center:dir(rtl)) .label-text-wrapper {\n    transform-origin: calc(100% - center) top;\n  }\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --color-checked: var(--ion-color-primary, #3880ff);\n}\n\n:host(.legacy-radio) {\n  width: 0.9375rem;\n  height: 1.5rem;\n}\n\n:host(.ion-color.radio-checked) .radio-inner {\n  border-color: var(--ion-color-base);\n}\n\n.item-radio.item-ios ion-label {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n}\n\n.radio-inner {\n  width: 33%;\n  height: 50%;\n}\n\n:host(.radio-checked) .radio-inner {\n  transform: rotate(45deg);\n  border-width: 0.125rem;\n  border-top-width: 0;\n  border-left-width: 0;\n  border-style: solid;\n  border-color: var(--color-checked);\n}\n\n:host(.radio-disabled) {\n  opacity: 0.3;\n}\n\n:host(.ion-focused) .radio-icon::after {\n  border-radius: var(--inner-border-radius);\n  top: -8px;\n  display: block;\n  position: absolute;\n  width: 36px;\n  height: 36px;\n  background: var(--ion-color-primary-tint, #4c8dff);\n  content: \"\";\n  opacity: 0.2;\n}\n@supports (inset-inline-start: 0) {\n  :host(.ion-focused) .radio-icon::after {\n    inset-inline-start: -9px;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.ion-focused) .radio-icon::after {\n    left: -9px;\n  }\n  :host-context([dir=rtl]):host(.ion-focused) .radio-icon::after, :host-context([dir=rtl]).ion-focused .radio-icon::after {\n    left: unset;\n    right: unset;\n    right: -9px;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.ion-focused:dir(rtl)) .radio-icon::after {\n      left: unset;\n      right: unset;\n      right: -9px;\n    }\n  }\n}\n\n:host(.in-item.legacy-radio) {\n  -webkit-margin-start: 8px;\n  margin-inline-start: 8px;\n  -webkit-margin-end: 11px;\n  margin-inline-end: 11px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  display: block;\n  position: static;\n}\n\n:host(.in-item.legacy-radio[slot=start]) {\n  -webkit-margin-start: 3px;\n  margin-inline-start: 3px;\n  -webkit-margin-end: 21px;\n  margin-inline-end: 21px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.native-wrapper .radio-icon {\n  width: 0.9375rem;\n  height: 1.5rem;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Color of the radio\n   * @prop --color-checked: Color of the checked radio\n   * @prop --border-radius: Border radius of the radio\n   * @prop --inner-border-radius: Border radius of the inner checked radio\n   */\n  --inner-border-radius: 50%;\n  display: inline-block;\n  position: relative;\n  box-sizing: border-box;\n  max-width: 100%;\n  min-height: inherit;\n  user-select: none;\n  z-index: 2;\n}\n\n:host(:not(.legacy-radio)) {\n  cursor: pointer;\n}\n\n:host(.radio-disabled) {\n  pointer-events: none;\n}\n\n.radio-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  contain: layout size style;\n}\n\n.radio-icon,\n.radio-inner {\n  box-sizing: border-box;\n}\n\n:host(.legacy-radio) label {\n  top: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  background: transparent;\n  cursor: pointer;\n  appearance: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  opacity: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.legacy-radio) label {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.legacy-radio) label {\n    left: 0;\n  }\n  :host-context([dir=rtl]):host(.legacy-radio) label, :host-context([dir=rtl]).legacy-radio label {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.legacy-radio:dir(rtl)) label {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n:host(.legacy-radio) label::-moz-focus-inner {\n  border: 0;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n:host(:focus) {\n  outline: none;\n}\n\n:host(.in-item:not(.legacy-radio)) {\n  width: 100%;\n  height: 100%;\n}\n\n/**\n * Radio can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]:not(.legacy-radio)),\n:host([slot=end]:not(.legacy-radio)) {\n  width: auto;\n}\n\n.radio-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  min-height: inherit;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n:host(.in-item:not(.legacy-radio)) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.in-item.radio-label-placement-stacked) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 16px;\n}\n\n:host(.in-item.radio-label-placement-stacked) .native-wrapper {\n  margin-bottom: 10px;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n:host(.radio-justify-space-between) .radio-wrapper {\n  justify-content: space-between;\n}\n\n:host(.radio-justify-start) .radio-wrapper {\n  justify-content: start;\n}\n\n:host(.radio-justify-end) .radio-wrapper {\n  justify-content: end;\n}\n\n:host(.radio-alignment-start) .radio-wrapper {\n  align-items: start;\n}\n\n:host(.radio-alignment-center) .radio-wrapper {\n  align-items: center;\n}\n\n/**\n * Label is on the left of the radio in LTR and\n * on the right in RTL.\n */\n:host(.radio-label-placement-start) .radio-wrapper {\n  flex-direction: row;\n}\n\n:host(.radio-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the radio should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the right of the radio in LTR and\n * on the left in RTL.\n */\n:host(.radio-label-placement-end) .radio-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the radio should be on the start\n * when the label sits at the end.\n */\n:host(.radio-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.radio-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the radio should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the left of the radio in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.radio-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n}\n\n/**\n * Label is on top of the radio.\n */\n:host(.radio-label-placement-stacked) .radio-wrapper {\n  flex-direction: column;\n}\n\n:host(.radio-label-placement-stacked) .label-text-wrapper {\n  transform: scale(0.75);\n  /**\n   * The margin between the label and\n   * the radio should be on the bottom\n   * when the label sits on top.\n   */\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 16px;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the radio.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper {\n  transform-origin: left top;\n}\n:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper, :host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-start .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.radio-label-placement-stacked.radio-alignment-start:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n:host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper {\n  transform-origin: center top;\n}\n:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper, :host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-center .label-text-wrapper {\n  transform-origin: calc(100% - center) top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.radio-label-placement-stacked.radio-alignment-center:dir(rtl)) .label-text-wrapper {\n    transform-origin: calc(100% - center) top;\n  }\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --color: rgb(var(--ion-text-color-rgb, 0, 0, 0), 0.6);\n  --color-checked: var(--ion-color-primary, #3880ff);\n  --border-width: 0.125rem;\n  --border-style: solid;\n  --border-radius: 50%;\n}\n\n:host(.legacy-radio) {\n  width: 1.25rem;\n  height: 1.25rem;\n}\n\n:host(.ion-color) .radio-inner {\n  background: var(--ion-color-base);\n}\n\n:host(.ion-color.radio-checked) .radio-icon {\n  border-color: var(--ion-color-base);\n}\n\n.radio-icon {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: var(--border-radius);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--color);\n}\n\n.radio-inner {\n  border-radius: var(--inner-border-radius);\n  width: calc(50% + var(--border-width));\n  height: calc(50% + var(--border-width));\n  transform: scale3d(0, 0, 0);\n  transition: transform 280ms cubic-bezier(0.4, 0, 0.2, 1);\n  background: var(--color-checked);\n}\n\n:host(.radio-checked) .radio-icon {\n  border-color: var(--color-checked);\n}\n\n:host(.radio-checked) .radio-inner {\n  transform: scale3d(1, 1, 1);\n}\n\n:host(.legacy-radio.radio-disabled),\n:host(.radio-disabled) .label-text-wrapper {\n  opacity: 0.38;\n}\n\n:host(.radio-disabled) .native-wrapper {\n  opacity: 0.63;\n}\n\n:host(.ion-focused.legacy-radio) .radio-icon::after {\n  top: -12px;\n}\n@supports (inset-inline-start: 0) {\n  :host(.ion-focused.legacy-radio) .radio-icon::after {\n    inset-inline-start: -12px;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.ion-focused.legacy-radio) .radio-icon::after {\n    left: -12px;\n  }\n  :host-context([dir=rtl]):host(.ion-focused.legacy-radio) .radio-icon::after, :host-context([dir=rtl]).ion-focused.legacy-radio .radio-icon::after {\n    left: unset;\n    right: unset;\n    right: -12px;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.ion-focused.legacy-radio:dir(rtl)) .radio-icon::after {\n      left: unset;\n      right: unset;\n      right: -12px;\n    }\n  }\n}\n\n:host(.ion-focused) .radio-icon::after {\n  border-radius: var(--inner-border-radius);\n  display: block;\n  position: absolute;\n  width: 36px;\n  height: 36px;\n  background: var(--ion-color-primary-tint, #4c8dff);\n  content: \"\";\n  opacity: 0.2;\n}\n\n:host(.in-item.legacy-radio) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 9px;\n  margin-bottom: 9px;\n  display: block;\n  position: static;\n}\n\n:host(.in-item.legacy-radio[slot=start]) {\n  -webkit-margin-start: 4px;\n  margin-inline-start: 4px;\n  -webkit-margin-end: 36px;\n  margin-inline-end: 36px;\n  margin-top: 11px;\n  margin-bottom: 10px;\n}\n\n.native-wrapper .radio-icon {\n  width: 1.25rem;\n  height: 1.25rem;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createLegacyFormController, isOptionSelected } from \"../../utils/forms/index\";\nimport { addEventListener, getAriaLabel, removeEventListener } from \"../../utils/helpers\";\nimport { printIonWarning } from \"../../utils/logging/index\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - The label text to associate with the radio. Use the \"labelPlacement\" property to control where the label is placed relative to the radio.\n *\n * @part container - The container for the radio mark.\n * @part label - The label text describing the radio.\n * @part mark - The checkmark or dot used to indicate the checked state.\n */\nexport class Radio {\n    constructor() {\n        this.inputId = `ion-rb-${radioButtonIds++}`;\n        this.radioGroup = null;\n        // This flag ensures we log the deprecation warning at most once.\n        this.hasLoggedDeprecationWarning = false;\n        this.updateState = () => {\n            if (this.radioGroup) {\n                const { compareWith, value: radioGroupValue } = this.radioGroup;\n                this.checked = isOptionSelected(radioGroupValue, this.value, compareWith);\n            }\n        };\n        this.onClick = () => {\n            const { radioGroup, checked, disabled } = this;\n            if (disabled) {\n                return;\n            }\n            /**\n             * The legacy control uses a native input inside\n             * of the radio host, so we can set this.checked\n             * to the state of the nativeInput. RadioGroup\n             * will prevent the native input from checking if\n             * allowEmptySelection=\"false\" by calling ev.preventDefault().\n             */\n            if (this.legacyFormController.hasLegacyControl()) {\n                this.checked = this.nativeInput.checked;\n                return;\n            }\n            /**\n             * The modern control does not use a native input\n             * inside of the radio host, so we cannot rely on the\n             * ev.preventDefault() behavior above. If the radio\n             * is checked and the parent radio group allows for empty\n             * selection, then we can set the checked state to false.\n             * Otherwise, the checked state should always be set\n             * to true because the checked state cannot be toggled.\n             */\n            if (checked && (radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.allowEmptySelection)) {\n                this.checked = false;\n            }\n            else {\n                this.checked = true;\n            }\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.checked = false;\n        this.buttonTabindex = -1;\n        this.color = undefined;\n        this.name = this.inputId;\n        this.disabled = false;\n        this.value = undefined;\n        this.labelPlacement = 'start';\n        this.legacy = undefined;\n        this.justify = 'space-between';\n        this.alignment = 'center';\n    }\n    valueChanged() {\n        /**\n         * The new value of the radio may\n         * match the radio group's value,\n         * so we see if it should be checked.\n         */\n        this.updateState();\n    }\n    /** @internal */\n    async setFocus(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n        this.el.focus();\n    }\n    /** @internal */\n    async setButtonTabindex(value) {\n        this.buttonTabindex = value;\n    }\n    connectedCallback() {\n        this.legacyFormController = createLegacyFormController(this.el);\n        if (this.value === undefined) {\n            this.value = this.inputId;\n        }\n        const radioGroup = (this.radioGroup = this.el.closest('ion-radio-group'));\n        if (radioGroup) {\n            this.updateState();\n            addEventListener(radioGroup, 'ionValueChange', this.updateState);\n        }\n    }\n    disconnectedCallback() {\n        const radioGroup = this.radioGroup;\n        if (radioGroup) {\n            removeEventListener(radioGroup, 'ionValueChange', this.updateState);\n            this.radioGroup = null;\n        }\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    styleChanged() {\n        this.emitStyle();\n    }\n    emitStyle() {\n        const style = {\n            'interactive-disabled': this.disabled,\n            // TODO(FW-3125): remove this\n            legacy: !!this.legacy,\n        };\n        if (this.legacyFormController.hasLegacyControl()) {\n            style['radio-checked'] = this.checked;\n        }\n        this.ionStyle.emit(style);\n    }\n    get hasLabel() {\n        return this.el.textContent !== '';\n    }\n    renderRadioControl() {\n        return (h(\"div\", { class: \"radio-icon\", part: \"container\" }, h(\"div\", { class: \"radio-inner\", part: \"mark\" }), h(\"div\", { class: \"radio-ripple\" })));\n    }\n    render() {\n        const { legacyFormController } = this;\n        return legacyFormController.hasLegacyControl() ? this.renderLegacyRadio() : this.renderRadio();\n    }\n    renderRadio() {\n        const { checked, disabled, color, el, justify, labelPlacement, hasLabel, buttonTabindex, alignment } = this;\n        const mode = getIonMode(this);\n        const inItem = hostContext('ion-item', el);\n        return (h(Host, { onFocus: this.onFocus, onBlur: this.onBlur, onClick: this.onClick, class: createColorClasses(color, {\n                [mode]: true,\n                'in-item': inItem,\n                'radio-checked': checked,\n                'radio-disabled': disabled,\n                [`radio-justify-${justify}`]: true,\n                [`radio-alignment-${alignment}`]: true,\n                [`radio-label-placement-${labelPlacement}`]: true,\n                // Focus and active styling should not apply when the radio is in an item\n                'ion-activatable': !inItem,\n                'ion-focusable': !inItem,\n            }), role: \"radio\", \"aria-checked\": checked ? 'true' : 'false', \"aria-disabled\": disabled ? 'true' : null, tabindex: buttonTabindex }, h(\"label\", { class: \"radio-wrapper\" }, h(\"div\", { class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': !hasLabel,\n            }, part: \"label\" }, h(\"slot\", null)), h(\"div\", { class: \"native-wrapper\" }, this.renderRadioControl()))));\n    }\n    renderLegacyRadio() {\n        if (!this.hasLoggedDeprecationWarning) {\n            printIonWarning(`ion-radio now requires providing a label with either the default slot or the \"aria-label\" attribute. To migrate, remove any usage of \"ion-label\" and pass the label text to either the component or the \"aria-label\" attribute.\n\nExample: <ion-radio>Option Label</ion-radio>\nExample with aria-label: <ion-radio aria-label=\"Option Label\"></ion-radio>\n\nDevelopers can use the \"legacy\" property to continue using the legacy form markup. This property will be removed in an upcoming major release of Ionic where this form control will use the modern form markup.`, this.el);\n            if (this.legacy) {\n                printIonWarning(`ion-radio is being used with the \"legacy\" property enabled which will forcibly enable the legacy form markup. This property will be removed in an upcoming major release of Ionic where this form control will use the modern form markup.\n\nDevelopers can dismiss this warning by removing their usage of the \"legacy\" property and using the new radio syntax.`, this.el);\n            }\n            this.hasLoggedDeprecationWarning = true;\n        }\n        const { inputId, disabled, checked, color, el, buttonTabindex } = this;\n        const mode = getIonMode(this);\n        const { label, labelId, labelText } = getAriaLabel(el, inputId);\n        return (h(Host, { \"aria-checked\": `${checked}`, \"aria-hidden\": disabled ? 'true' : null, \"aria-labelledby\": label ? labelId : null, role: \"radio\", tabindex: buttonTabindex, onFocus: this.onFocus, onBlur: this.onBlur, onClick: this.onClick, class: createColorClasses(color, {\n                [mode]: true,\n                'in-item': hostContext('ion-item', el),\n                interactive: true,\n                'radio-checked': checked,\n                'radio-disabled': disabled,\n                'legacy-radio': true,\n            }) }, this.renderRadioControl(), h(\"label\", { htmlFor: inputId }, labelText), h(\"input\", { type: \"radio\", checked: checked, disabled: disabled, tabindex: \"-1\", id: inputId, ref: (nativeEl) => (this.nativeInput = nativeEl) })));\n    }\n    static get is() { return \"ion-radio\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"radio.ios.scss\"],\n            \"md\": [\"radio.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"radio.ios.css\"],\n            \"md\": [\"radio.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the radio.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"any | null\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"the value of the radio.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'fixed' | 'stacked'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the radio.\\n`\\\"start\\\"`: The label will appear to the left of the radio in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the radio in LTR and to the left in RTL.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\\n`\\\"stacked\\\"`: The label will appear above the radio regardless of the direction. The alignment of the label can be controlled with the `alignment` property.\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"legacy\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the `legacy` property to `true` to forcibly use the legacy form control markup.\\nIonic will only opt components in to the modern form markup when they are\\nusing either the `aria-label` attribute or the default slot that contains\\nthe label text. As a result, the `legacy` property should only be used as\\nan escape hatch when you want to avoid this automatic opt-in behavior.\\nNote that this property will be removed in an upcoming major release\\nof Ionic, and all form components will be opted-in to using the modern form markup.\"\n                },\n                \"attribute\": \"legacy\",\n                \"reflect\": false\n            },\n            \"justify\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'space-between'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"space-between\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to pack the label and radio within a line.\\n`\\\"start\\\"`: The label and radio will appear on the left in LTR and\\non the right in RTL.\\n`\\\"end\\\"`: The label and radio will appear on the right in LTR and\\non the left in RTL.\\n`\\\"space-between\\\"`: The label and radio will appear on opposite\\nends of the line with space between the two elements.\"\n                },\n                \"attribute\": \"justify\",\n                \"reflect\": false,\n                \"defaultValue\": \"'space-between'\"\n            },\n            \"alignment\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'center'\",\n                    \"resolved\": \"\\\"center\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to control the alignment of the radio and label on the cross axis.\\n`\\\"start\\\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.\\n`\\\"center\\\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.\"\n                },\n                \"attribute\": \"alignment\",\n                \"reflect\": false,\n                \"defaultValue\": \"'center'\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"checked\": {},\n            \"buttonTabindex\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionStyle\",\n                \"name\": \"ionStyle\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the styles change.\"\n                },\n                \"complexType\": {\n                    \"original\": \"StyleEventDetail\",\n                    \"resolved\": \"StyleEventDetail\",\n                    \"references\": {\n                        \"StyleEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::StyleEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the radio button has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the radio button loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"(ev: globalThis.Event) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"ev\",\n                            \"type\": \"Event\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"globalThis\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::globalThis\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            },\n            \"setButtonTabindex\": {\n                \"complexType\": {\n                    \"signature\": \"(value: number) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"value\",\n                            \"type\": \"number\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }, {\n                \"propName\": \"checked\",\n                \"methodName\": \"styleChanged\"\n            }, {\n                \"propName\": \"color\",\n                \"methodName\": \"styleChanged\"\n            }, {\n                \"propName\": \"disabled\",\n                \"methodName\": \"styleChanged\"\n            }];\n    }\n}\nlet radioButtonIds = 0;\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { renderHiddenInput } from \"../../utils/helpers\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class RadioGroup {\n    constructor() {\n        this.inputId = `ion-rg-${radioGroupIds++}`;\n        this.labelId = `${this.inputId}-lbl`;\n        this.setRadioTabindex = (value) => {\n            const radios = this.getRadios();\n            // Get the first radio that is not disabled and the checked one\n            const first = radios.find((radio) => !radio.disabled);\n            const checked = radios.find((radio) => radio.value === value && !radio.disabled);\n            if (!first && !checked) {\n                return;\n            }\n            // If an enabled checked radio exists, set it to be the focusable radio\n            // otherwise we default to focus the first radio\n            const focusable = checked || first;\n            for (const radio of radios) {\n                const tabindex = radio === focusable ? 0 : -1;\n                radio.setButtonTabindex(tabindex);\n            }\n        };\n        this.onClick = (ev) => {\n            ev.preventDefault();\n            /**\n             * The Radio Group component mandates that only one radio button\n             * within the group can be selected at any given time. Since `ion-radio`\n             * is a shadow DOM component, it cannot natively perform this behavior\n             * using the `name` attribute.\n             */\n            const selectedRadio = ev.target && ev.target.closest('ion-radio');\n            /**\n             * Our current disabled prop definition causes Stencil to mark it\n             * as optional. While this is not desired, fixing this behavior\n             * in Stencil is a significant breaking change, so this effort is\n             * being de-risked in STENCIL-917. Until then, we compromise\n             * here by checking for falsy `disabled` values instead of strictly\n             * checking `disabled === false`.\n             */\n            if (selectedRadio && !selectedRadio.disabled) {\n                const currentValue = this.value;\n                const newValue = selectedRadio.value;\n                if (newValue !== currentValue) {\n                    this.value = newValue;\n                    this.emitValueChange(ev);\n                }\n                else if (this.allowEmptySelection) {\n                    this.value = undefined;\n                    this.emitValueChange(ev);\n                }\n            }\n        };\n        this.allowEmptySelection = false;\n        this.compareWith = undefined;\n        this.name = this.inputId;\n        this.value = undefined;\n    }\n    valueChanged(value) {\n        this.setRadioTabindex(value);\n        this.ionValueChange.emit({ value });\n    }\n    componentDidLoad() {\n        /**\n         * There's an issue when assigning a value to the radio group\n         * within the Angular primary content (rendering within the\n         * app component template). When the template is isolated to a route,\n         * the value is assigned correctly.\n         * To address this issue, we need to ensure that the watcher is\n         * called after the component has finished loading,\n         * allowing the emit to be dispatched correctly.\n         */\n        this.valueChanged(this.value);\n    }\n    async connectedCallback() {\n        // Get the list header if it exists and set the id\n        // this is used to set aria-labelledby\n        const header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\n        if (header) {\n            const label = (this.label = header.querySelector('ion-label'));\n            if (label) {\n                this.labelId = label.id = this.name + '-lbl';\n            }\n        }\n    }\n    getRadios() {\n        return Array.from(this.el.querySelectorAll('ion-radio'));\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange(event) {\n        const { value } = this;\n        this.ionChange.emit({ value, event });\n    }\n    onKeydown(ev) {\n        const inSelectPopover = !!this.el.closest('ion-select-popover');\n        if (ev.target && !this.el.contains(ev.target)) {\n            return;\n        }\n        // Get all radios inside of the radio group and then\n        // filter out disabled radios since we need to skip those\n        const radios = this.getRadios().filter((radio) => !radio.disabled);\n        // Only move the radio if the current focus is in the radio group\n        if (ev.target && radios.includes(ev.target)) {\n            const index = radios.findIndex((radio) => radio === ev.target);\n            const current = radios[index];\n            let next;\n            // If hitting arrow down or arrow right, move to the next radio\n            // If we're on the last radio, move to the first radio\n            if (['ArrowDown', 'ArrowRight'].includes(ev.key)) {\n                next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n            }\n            // If hitting arrow up or arrow left, move to the previous radio\n            // If we're on the first radio, move to the last radio\n            if (['ArrowUp', 'ArrowLeft'].includes(ev.key)) {\n                next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n            }\n            if (next && radios.includes(next)) {\n                next.setFocus(ev);\n                if (!inSelectPopover) {\n                    this.value = next.value;\n                    this.emitValueChange(ev);\n                }\n            }\n            // Update the radio group value when a user presses the\n            // space bar on top of a selected radio\n            if ([' '].includes(ev.key)) {\n                const previousValue = this.value;\n                this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value;\n                if (previousValue !== this.value || this.allowEmptySelection) {\n                    /**\n                     * Value change should only be emitted if the value is different,\n                     * such as selecting a new radio with the space bar or if\n                     * the radio group allows for empty selection and the user\n                     * is deselecting a checked radio.\n                     */\n                    this.emitValueChange(ev);\n                }\n                // Prevent browsers from jumping\n                // to the bottom of the screen\n                ev.preventDefault();\n            }\n        }\n    }\n    render() {\n        const { label, labelId, el, name, value } = this;\n        const mode = getIonMode(this);\n        renderHiddenInput(true, el, name, value, false);\n        return h(Host, { key: '6065674a08ac2ead25e87219b5628879a759b75a', role: \"radiogroup\", \"aria-labelledby\": label ? labelId : null, onClick: this.onClick, class: mode });\n    }\n    static get is() { return \"ion-radio-group\"; }\n    static get properties() {\n        return {\n            \"allowEmptySelection\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the radios can be deselected.\"\n                },\n                \"attribute\": \"allow-empty-selection\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"compareWith\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | RadioGroupCompareFn | null\",\n                    \"resolved\": \"((currentValue: any, compareValue: any) => boolean) | null | string | undefined\",\n                    \"references\": {\n                        \"RadioGroupCompareFn\": {\n                            \"location\": \"import\",\n                            \"path\": \"./radio-group-interface\",\n                            \"id\": \"src/components/radio-group/radio-group-interface.ts::RadioGroupCompareFn\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This property allows developers to specify a custom function or property\\nname for comparing objects when determining the selected option in the\\nion-radio-group. When not specified, the default behavior will use strict\\nequality (===) for comparison.\"\n                },\n                \"attribute\": \"compare-with\",\n                \"reflect\": false\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"any | null\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"the value of the radio group.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the value has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"RadioGroupChangeEventDetail\",\n                    \"resolved\": \"RadioGroupChangeEventDetail<any>\",\n                    \"references\": {\n                        \"RadioGroupChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./radio-group-interface\",\n                            \"id\": \"src/components/radio-group/radio-group-interface.ts::RadioGroupChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionValueChange\",\n                \"name\": \"ionValueChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the `value` property has changed.\\nThis is used to ensure that `ion-radio` can respond\\nto any value property changes from the group.\"\n                },\n                \"complexType\": {\n                    \"original\": \"RadioGroupChangeEventDetail\",\n                    \"resolved\": \"RadioGroupChangeEventDetail<any>\",\n                    \"references\": {\n                        \"RadioGroupChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./radio-group-interface\",\n                            \"id\": \"src/components/radio-group/radio-group-interface.ts::RadioGroupChangeEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"keydown\",\n                \"method\": \"onKeydown\",\n                \"target\": \"document\",\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\nlet radioGroupIds = 0;\n"],"mappings":"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","ignoreList":[]}