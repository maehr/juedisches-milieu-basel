{"version":3,"names":["itemOptionsIosCss","itemOptionsMdCss","ItemOptions","constructor","hostRef","this","side","fireSwipeEvent","ionSwipe","emit","render","mode","getIonMode","isEnd","isEndSide","h","Host","key","class"],"sources":["node_modules/@ionic/core/dist/collection/components/item-options/item-options.ios.css?tag=ion-item-options&mode=ios","node_modules/@ionic/core/dist/collection/components/item-options/item-options.md.css?tag=ion-item-options&mode=md","node_modules/@ionic/core/dist/collection/components/item-options/item-options.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-item-options {\n  /* stylelint-disable property-disallowed-list */\n  top: 0;\n  right: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n  display: none;\n  position: absolute;\n  height: 100%;\n  user-select: none;\n  z-index: 1;\n}\n:host-context([dir=rtl]) ion-item-options {\n  justify-content: flex-start;\n}\n:host-context([dir=rtl]) ion-item-options:not(.item-options-end) {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n}\n\n[dir=rtl] ion-item-options {\n  justify-content: flex-start;\n}\n[dir=rtl] ion-item-options:not(.item-options-end) {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n}\n\n@supports selector(:dir(rtl)) {\n  ion-item-options:dir(rtl) {\n    justify-content: flex-start;\n  }\n  ion-item-options:dir(rtl):not(.item-options-end) {\n    /* stylelint-disable property-disallowed-list */\n    right: auto;\n    left: 0;\n    /* stylelint-enable property-disallowed-list */\n    justify-content: flex-end;\n  }\n}\n\n.item-options-start {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-start;\n}\n:host-context([dir=rtl]) .item-options-start {\n  justify-content: flex-end;\n}\n\n[dir=rtl] .item-options-start {\n  justify-content: flex-end;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-options-start:dir(rtl) {\n    justify-content: flex-end;\n  }\n}\n\n/* stylelint-disable property-disallowed-list */\n[dir=ltr] .item-options-start ion-item-option:first-child,\n[dir=rtl] .item-options-start ion-item-option:last-child {\n  padding-left: var(--ion-safe-area-left);\n}\n\n[dir=ltr] .item-options-end ion-item-option:last-child,\n[dir=rtl] .item-options-end ion-item-option:first-child {\n  padding-right: var(--ion-safe-area-right);\n}\n\n/* stylelint-enable property-disallowed-list */\n:host-context([dir=rtl]) .item-sliding-active-slide.item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n  width: 100%;\n  visibility: visible;\n}\n\n[dir=rtl] .item-sliding-active-slide.item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n  width: 100%;\n  visibility: visible;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-sliding-active-slide:dir(rtl).item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n    width: 100%;\n    visibility: visible;\n  }\n}\n.item-sliding-active-slide ion-item-options {\n  display: flex;\n  visibility: hidden;\n}\n.item-sliding-active-slide.item-sliding-active-options-start .item-options-start, .item-sliding-active-slide.item-sliding-active-options-end ion-item-options:not(.item-options-start) {\n  width: 100%;\n  visibility: visible;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.item-options-ios {\n  border-bottom-width: 0;\n  border-bottom-style: solid;\n  border-bottom-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));\n}\n.item-options-ios.item-options-end {\n  border-bottom-width: 0.55px;\n}\n\n.list-ios-lines-none .item-options-ios {\n  border-bottom-width: 0;\n}\n\n.list-ios-lines-full .item-options-ios,\n.list-ios-lines-inset .item-options-ios.item-options-end {\n  border-bottom-width: 0.55px;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-item-options {\n  /* stylelint-disable property-disallowed-list */\n  top: 0;\n  right: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n  display: none;\n  position: absolute;\n  height: 100%;\n  user-select: none;\n  z-index: 1;\n}\n:host-context([dir=rtl]) ion-item-options {\n  justify-content: flex-start;\n}\n:host-context([dir=rtl]) ion-item-options:not(.item-options-end) {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n}\n\n[dir=rtl] ion-item-options {\n  justify-content: flex-start;\n}\n[dir=rtl] ion-item-options:not(.item-options-end) {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n}\n\n@supports selector(:dir(rtl)) {\n  ion-item-options:dir(rtl) {\n    justify-content: flex-start;\n  }\n  ion-item-options:dir(rtl):not(.item-options-end) {\n    /* stylelint-disable property-disallowed-list */\n    right: auto;\n    left: 0;\n    /* stylelint-enable property-disallowed-list */\n    justify-content: flex-end;\n  }\n}\n\n.item-options-start {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-start;\n}\n:host-context([dir=rtl]) .item-options-start {\n  justify-content: flex-end;\n}\n\n[dir=rtl] .item-options-start {\n  justify-content: flex-end;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-options-start:dir(rtl) {\n    justify-content: flex-end;\n  }\n}\n\n/* stylelint-disable property-disallowed-list */\n[dir=ltr] .item-options-start ion-item-option:first-child,\n[dir=rtl] .item-options-start ion-item-option:last-child {\n  padding-left: var(--ion-safe-area-left);\n}\n\n[dir=ltr] .item-options-end ion-item-option:last-child,\n[dir=rtl] .item-options-end ion-item-option:first-child {\n  padding-right: var(--ion-safe-area-right);\n}\n\n/* stylelint-enable property-disallowed-list */\n:host-context([dir=rtl]) .item-sliding-active-slide.item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n  width: 100%;\n  visibility: visible;\n}\n\n[dir=rtl] .item-sliding-active-slide.item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n  width: 100%;\n  visibility: visible;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-sliding-active-slide:dir(rtl).item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n    width: 100%;\n    visibility: visible;\n  }\n}\n.item-sliding-active-slide ion-item-options {\n  display: flex;\n  visibility: hidden;\n}\n.item-sliding-active-slide.item-sliding-active-options-start .item-options-start, .item-sliding-active-slide.item-sliding-active-options-end ion-item-options:not(.item-options-start) {\n  width: 100%;\n  visibility: visible;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.item-options-md {\n  border-bottom-width: 0;\n  border-bottom-style: solid;\n  border-bottom-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));\n}\n\n.list-md-lines-none .item-options-md {\n  border-bottom-width: 0;\n}\n\n.list-md-lines-full .item-options-md,\n.list-md-lines-inset .item-options-md.item-options-end {\n  border-bottom-width: 1px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { isEndSide } from \"../../utils/helpers\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class ItemOptions {\n    constructor() {\n        this.side = 'end';\n    }\n    /** @internal */\n    async fireSwipeEvent() {\n        this.ionSwipe.emit({\n            side: this.side,\n        });\n    }\n    render() {\n        const mode = getIonMode(this);\n        const isEnd = isEndSide(this.side);\n        return (h(Host, { key: '3dca0415ec2942ac8e87a057e26bcb290a892f65', class: {\n                [mode]: true,\n                // Used internally for styling\n                [`item-options-${mode}`]: true,\n                /**\n                 * Note: The \"start\" and \"end\" terms refer to the\n                 * direction ion-item-option instances within ion-item-options flow.\n                 * They do not refer to how ion-item-options flows within ion-item-sliding.\n                 * As a result, \"item-options-start\" means the ion-item-options container\n                 * always appears on the left, and \"item-options-end\" means the ion-item-options\n                 * container always appears on the right.\n                 */\n                'item-options-start': !isEnd,\n                'item-options-end': isEnd,\n            } }));\n    }\n    static get is() { return \"ion-item-options\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"item-options.ios.scss\"],\n            \"md\": [\"item-options.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"item-options.ios.css\"],\n            \"md\": [\"item-options.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"side\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Side\",\n                    \"resolved\": \"\\\"end\\\" | \\\"start\\\"\",\n                    \"references\": {\n                        \"Side\": {\n                            \"location\": \"import\",\n                            \"path\": \"../menu/menu-interface\",\n                            \"id\": \"src/components/menu/menu-interface.ts::Side\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The side the option button should be on. Possible values: `\\\"start\\\"` and `\\\"end\\\"`. If you have multiple `ion-item-options`, a side must be provided for each.\"\n                },\n                \"attribute\": \"side\",\n                \"reflect\": false,\n                \"defaultValue\": \"'end'\"\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionSwipe\",\n                \"name\": \"ionSwipe\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the item has been fully swiped.\"\n                },\n                \"complexType\": {\n                    \"original\": \"any\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"fireSwipeEvent\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n"],"mappings":"wIAAA,MAAMA,EAAoB,m1ECA1B,MAAMC,EAAmB,uxE,MCMZC,EAAW,MACpB,WAAAC,CAAAC,G,6CACIC,KAAKC,KAAO,KACf,CAED,oBAAMC,GACFF,KAAKG,SAASC,KAAK,CACfH,KAAMD,KAAKC,M,CAGnB,MAAAI,GACI,MAAMC,EAAOC,EAAWP,MACxB,MAAMQ,EAAQC,EAAUT,KAAKC,MAC7B,OAAQS,EAAEC,EAAM,CAAEC,IAAK,2CAA4CC,MAAO,CAClEP,CAACA,GAAO,KAER,CAAC,gBAAgBA,KAAS,KAS1B,sBAAuBE,EACvB,mBAAoBA,I","ignoreList":[]}