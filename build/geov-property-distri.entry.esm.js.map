{"version":3,"file":"geov-property-distri.entry.esm.js","sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-property-distri/geov-property-distri.css?tag=geov-property-distri","node_modules/@geovistory/design-system-web/dist/collection/components/geov-property-distri/geov-property-distri.js"],"sourcesContent":[":host {\n  display: block;\n}\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--ion-color-light-tint, #fafafa);\n}\n","import { h, Host } from \"@stencil/core\";\nimport { isNode } from \"../../lib/isNode\";\nimport { importPlotlyBasic } from \"../../lib/importPlotlyBasic\";\nimport { sparqlJson } from \"../../lib/sparqlJson\";\nconst chartColors = [\n  '#322659',\n  '#44337A',\n  '#553C9A',\n  '#6B46C1',\n  '#805AD5',\n  '#9F7AEA',\n  '#B794F4',\n  '#D6BCFA',\n  '#E9D8FD',\n  '#FAF5FF',\n  '#E9D8FD',\n  '#D6BCFA',\n  '#B794F4',\n  '#9F7AEA',\n  '#805AD5',\n  '#6B46C1',\n  '#553C9A',\n  '#44337A',\n];\nconst qrPropertyCount = () => `\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n    SELECT (group_concat(?propertyname;separator=\", \") as ?propertynames) (Max(?propertycount) as ?propertycounts)\n    WHERE {\n    {\n        SELECT  ?property (count(?entityUri) as ?propertycount)\n        WHERE {\n            ?entityUri ?property ?object .\n            ?property1 <http://www.w3.org/2002/07/owl#inverseOf> ?property .\n        }\n        GROUP BY ?property\n    }\n    ?property rdfs:label ?propertyname\n    FILTER (lang(?propertyname) = 'en')\n    }\n    GROUP BY ?property\n    ORDER by DESC(?propertycounts)\n`;\n/**\n * This component fetches the frequency of each predicate\n * exsisting on the given sparql endpoint.\n *\n * The result is displayed as a pie-chart.\n */\nexport class GeovPropertyDistri {\n  constructor() {\n    this.sparqlEndpoint = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.loading = undefined;\n  }\n  async componentWillLoad() {\n    // If we are in a browser\n    if (!isNode()) {\n      this.loading = true;\n      // Load plotly script\n      const Plotly = await importPlotlyBasic();\n      // Send the request to the provided sparql endpoint\n      sparqlJson(this.sparqlEndpoint, qrPropertyCount()).then(res => {\n        var _a;\n        // Parse the response\n        const response = (_a = res === null || res === void 0 ? void 0 : res.results) === null || _a === void 0 ? void 0 : _a.bindings;\n        const labels = response.map(elt => elt.propertynames.value);\n        const values = response.map(elt => parseInt(elt.propertycounts.value));\n        // Prepare colors\n        const colors = [];\n        for (let i = 0; i < values.length; i++) {\n          colors.push(chartColors[i % chartColors.length]);\n        }\n        // Chart data, shape, and parameters\n        const plotlyData = [\n          {\n            labels: labels,\n            values: values,\n            type: 'pie',\n            textinfo: 'label+percent',\n            textposition: 'inside',\n            marker: { colors: colors },\n          },\n        ];\n        // Chart Layout\n        const propNb = values.length;\n        const stmtNb_x1000 = Math.round(values.reduce((a, b) => a + b, 0) / 1000);\n        const layout = {\n          width: this.width,\n          height: this.height,\n          title: `Distribution of ${propNb} properties (${stmtNb_x1000}k statements)`,\n          showlegend: false,\n        };\n        // Draw the chart\n        Plotly.newPlot(this.el, plotlyData, layout);\n        this.loading = false;\n      });\n    }\n  }\n  render() {\n    return (h(Host, null, this.loading && (h(\"div\", { style: { width: this.width + 'px', height: this.height + 'px' }, class: \"loading\" }, h(\"ion-spinner\", { name: \"dots\" })))));\n  }\n  static get is() { return \"geov-property-distri\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-property-distri.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-property-distri.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"sparqlEndpoint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"sparqlEndpoint\\nURL of the sparql endpoint\"\n        },\n        \"attribute\": \"sparql-endpoint\",\n        \"reflect\": false\n      },\n      \"width\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Size in pixel\\nof the final chart\"\n        },\n        \"attribute\": \"width\",\n        \"reflect\": false\n      },\n      \"height\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Size in pixel\\nof the final chart\"\n        },\n        \"attribute\": \"height\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"loading\": {}\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\n//# sourceMappingURL=geov-property-distri.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1]}