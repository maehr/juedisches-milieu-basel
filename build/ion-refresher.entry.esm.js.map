{"version":3,"file":"ion-refresher.entry.esm.js","sources":["node_modules/@ionic/core/dist/collection/components/refresher/refresher.ios.css?tag=ion-refresher&mode=ios","node_modules/@ionic/core/dist/collection/components/refresher/refresher.md.css?tag=ion-refresher&mode=md","node_modules/@ionic/core/dist/collection/components/refresher/refresher.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-refresher {\n  top: 0;\n  display: none;\n  position: absolute;\n  width: 100%;\n  height: 60px;\n  pointer-events: none;\n  z-index: -1;\n}\n@supports (inset-inline-start: 0) {\n  ion-refresher {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  ion-refresher {\n    left: 0;\n  }\n  :host-context([dir=rtl]) ion-refresher {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  [dir=rtl] ion-refresher {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    ion-refresher:dir(rtl) {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\nion-refresher.refresher-active {\n  display: block;\n}\n\nion-refresher-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n}\n\n.refresher-pulling,\n.refresher-refreshing {\n  display: none;\n  width: 100%;\n}\n\n.refresher-pulling-icon,\n.refresher-refreshing-icon {\n  transform-origin: center;\n  transition: 200ms;\n  font-size: 30px;\n  text-align: center;\n}\n:host-context([dir=rtl]) .refresher-pulling-icon, :host-context([dir=rtl]) .refresher-refreshing-icon {\n  transform-origin: calc(100% - center);\n}\n\n[dir=rtl] .refresher-pulling-icon, [dir=rtl] .refresher-refreshing-icon {\n  transform-origin: calc(100% - center);\n}\n\n@supports selector(:dir(rtl)) {\n  .refresher-pulling-icon:dir(rtl), .refresher-refreshing-icon:dir(rtl) {\n    transform-origin: calc(100% - center);\n  }\n}\n\n.refresher-pulling-text,\n.refresher-refreshing-text {\n  font-size: 16px;\n  text-align: center;\n}\n\nion-refresher-content .arrow-container {\n  display: none;\n}\n\n.refresher-pulling ion-refresher-content .refresher-pulling {\n  display: block;\n}\n\n.refresher-ready ion-refresher-content .refresher-pulling {\n  display: block;\n}\n.refresher-ready ion-refresher-content .refresher-pulling-icon {\n  transform: rotate(180deg);\n}\n\n.refresher-refreshing ion-refresher-content .refresher-refreshing {\n  display: block;\n}\n\n.refresher-cancelling ion-refresher-content .refresher-pulling {\n  display: block;\n}\n.refresher-cancelling ion-refresher-content .refresher-pulling-icon {\n  transform: scale(0);\n}\n\n.refresher-completing ion-refresher-content .refresher-refreshing {\n  display: block;\n}\n.refresher-completing ion-refresher-content .refresher-refreshing-icon {\n  transform: scale(0);\n}\n\n.refresher-native .refresher-pulling-text, .refresher-native .refresher-refreshing-text {\n  display: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.refresher-ios .refresher-pulling-icon,\n.refresher-ios .refresher-refreshing-icon {\n  color: var(--ion-text-color, #000);\n}\n\n.refresher-ios .refresher-pulling-text,\n.refresher-ios .refresher-refreshing-text {\n  color: var(--ion-text-color, #000);\n}\n\n.refresher-ios .refresher-refreshing .spinner-lines-ios line,\n.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,\n.refresher-ios .refresher-refreshing .spinner-crescent circle {\n  stroke: var(--ion-text-color, #000);\n}\n\n.refresher-ios .refresher-refreshing .spinner-bubbles circle,\n.refresher-ios .refresher-refreshing .spinner-circles circle,\n.refresher-ios .refresher-refreshing .spinner-dots circle {\n  fill: var(--ion-text-color, #000);\n}\n\nion-refresher.refresher-native {\n  display: block;\n  z-index: 1;\n}\nion-refresher.refresher-native ion-spinner {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.refresher-native .refresher-refreshing ion-spinner {\n  --refreshing-rotation-duration: 2s;\n  display: none;\n  animation: var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;\n}\n\n.refresher-native .refresher-refreshing {\n  display: none;\n  animation: 250ms linear refresher-pop forwards;\n}\n\n.refresher-native ion-spinner {\n  width: 32px;\n  height: 32px;\n  color: var(--ion-color-step-450, #747577);\n}\n\n.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,\n.refresher-native.refresher-completing .refresher-pulling ion-spinner {\n  display: none;\n}\n.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,\n.refresher-native.refresher-completing .refresher-refreshing ion-spinner {\n  display: block;\n}\n\n.refresher-native.refresher-pulling .refresher-pulling ion-spinner {\n  display: block;\n}\n.refresher-native.refresher-pulling .refresher-refreshing ion-spinner {\n  display: none;\n}\n\n.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon {\n  transform: scale(0) rotate(180deg);\n  transition: 300ms;\n}\n\n@keyframes refresher-pop {\n  0% {\n    transform: scale(1);\n    animation-timing-function: ease-in;\n  }\n  50% {\n    transform: scale(1.2);\n    animation-timing-function: ease-out;\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n@keyframes refresher-rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(180deg);\n  }\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-refresher {\n  top: 0;\n  display: none;\n  position: absolute;\n  width: 100%;\n  height: 60px;\n  pointer-events: none;\n  z-index: -1;\n}\n@supports (inset-inline-start: 0) {\n  ion-refresher {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  ion-refresher {\n    left: 0;\n  }\n  :host-context([dir=rtl]) ion-refresher {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  [dir=rtl] ion-refresher {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    ion-refresher:dir(rtl) {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\nion-refresher.refresher-active {\n  display: block;\n}\n\nion-refresher-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n}\n\n.refresher-pulling,\n.refresher-refreshing {\n  display: none;\n  width: 100%;\n}\n\n.refresher-pulling-icon,\n.refresher-refreshing-icon {\n  transform-origin: center;\n  transition: 200ms;\n  font-size: 30px;\n  text-align: center;\n}\n:host-context([dir=rtl]) .refresher-pulling-icon, :host-context([dir=rtl]) .refresher-refreshing-icon {\n  transform-origin: calc(100% - center);\n}\n\n[dir=rtl] .refresher-pulling-icon, [dir=rtl] .refresher-refreshing-icon {\n  transform-origin: calc(100% - center);\n}\n\n@supports selector(:dir(rtl)) {\n  .refresher-pulling-icon:dir(rtl), .refresher-refreshing-icon:dir(rtl) {\n    transform-origin: calc(100% - center);\n  }\n}\n\n.refresher-pulling-text,\n.refresher-refreshing-text {\n  font-size: 16px;\n  text-align: center;\n}\n\nion-refresher-content .arrow-container {\n  display: none;\n}\n\n.refresher-pulling ion-refresher-content .refresher-pulling {\n  display: block;\n}\n\n.refresher-ready ion-refresher-content .refresher-pulling {\n  display: block;\n}\n.refresher-ready ion-refresher-content .refresher-pulling-icon {\n  transform: rotate(180deg);\n}\n\n.refresher-refreshing ion-refresher-content .refresher-refreshing {\n  display: block;\n}\n\n.refresher-cancelling ion-refresher-content .refresher-pulling {\n  display: block;\n}\n.refresher-cancelling ion-refresher-content .refresher-pulling-icon {\n  transform: scale(0);\n}\n\n.refresher-completing ion-refresher-content .refresher-refreshing {\n  display: block;\n}\n.refresher-completing ion-refresher-content .refresher-refreshing-icon {\n  transform: scale(0);\n}\n\n.refresher-native .refresher-pulling-text, .refresher-native .refresher-refreshing-text {\n  display: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.refresher-md .refresher-pulling-icon,\n.refresher-md .refresher-refreshing-icon {\n  color: var(--ion-text-color, #000);\n}\n\n.refresher-md .refresher-pulling-text,\n.refresher-md .refresher-refreshing-text {\n  color: var(--ion-text-color, #000);\n}\n\n.refresher-md .refresher-refreshing .spinner-lines-md line,\n.refresher-md .refresher-refreshing .spinner-lines-small-md line,\n.refresher-md .refresher-refreshing .spinner-crescent circle {\n  stroke: var(--ion-text-color, #000);\n}\n\n.refresher-md .refresher-refreshing .spinner-bubbles circle,\n.refresher-md .refresher-refreshing .spinner-circles circle,\n.refresher-md .refresher-refreshing .spinner-dots circle {\n  fill: var(--ion-text-color, #000);\n}\n\nion-refresher.refresher-native {\n  display: block;\n  z-index: 1;\n}\nion-refresher.refresher-native ion-spinner {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: 0;\n  margin-bottom: 0;\n  width: 24px;\n  height: 24px;\n  color: var(--ion-color-primary, #3880ff);\n}\nion-refresher.refresher-native .spinner-arrow-container {\n  display: inherit;\n}\nion-refresher.refresher-native .arrow-container {\n  display: block;\n  position: absolute;\n  width: 24px;\n  height: 24px;\n}\nion-refresher.refresher-native .arrow-container ion-icon {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: 0;\n  margin-bottom: 0;\n  left: 0;\n  right: 0;\n  bottom: -4px;\n  position: absolute;\n  color: var(--ion-color-primary, #3880ff);\n  font-size: 12px;\n}\nion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling, ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling {\n  display: flex;\n}\nion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing, ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing, ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing {\n  display: flex;\n}\nion-refresher.refresher-native .refresher-pulling-icon {\n  transform: translateY(calc(-100% - 10px));\n}\nion-refresher.refresher-native .refresher-pulling-icon,\nion-refresher.refresher-native .refresher-refreshing-icon {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: 100%;\n  -webkit-padding-start: 8px;\n  padding-inline-start: 8px;\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  display: flex;\n  border: 1px solid var(--ion-color-step-200, #ececec);\n  background: var(--ion-color-step-250, #ffffff);\n  box-shadow: 0px 1px 6px rgba(0, 0, 0, 0.1);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h, readTask, writeTask } from \"@stencil/core\";\nimport { getTimeGivenProgression } from \"../../utils/animation/cubic-bezier\";\nimport { getScrollElement, ION_CONTENT_CLASS_SELECTOR, ION_CONTENT_ELEMENT_SELECTOR, printIonContentErrorMsg, } from \"../../utils/content/index\";\nimport { clamp, componentOnReady, getElementRoot, raf, transitionEndAsync } from \"../../utils/helpers\";\nimport { ImpactStyle, hapticImpact } from \"../../utils/native/haptic\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { createPullingAnimation, createSnapBackAnimation, getRefresherAnimationType, handleScrollWhilePulling, handleScrollWhileRefreshing, setSpinnerOpacity, shouldUseNativeRefresher, translateElement, } from \"./refresher.utils\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Refresher {\n    constructor() {\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        this.pointerDown = false;\n        this.needsCompletion = false;\n        this.didRefresh = false;\n        this.lastVelocityY = 0;\n        this.animations = [];\n        this.nativeRefresher = false;\n        this.state = 1 /* RefresherState.Inactive */;\n        this.pullMin = 60;\n        this.pullMax = this.pullMin + 60;\n        this.closeDuration = '280ms';\n        this.snapbackDuration = '280ms';\n        this.pullFactor = 1;\n        this.disabled = false;\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.disabled);\n        }\n    }\n    async checkNativeRefresher() {\n        const useNativeRefresher = await shouldUseNativeRefresher(this.el, getIonMode(this));\n        if (useNativeRefresher && !this.nativeRefresher) {\n            const contentEl = this.el.closest('ion-content');\n            this.setupNativeRefresher(contentEl);\n        }\n        else if (!useNativeRefresher) {\n            this.destroyNativeRefresher();\n        }\n    }\n    destroyNativeRefresher() {\n        if (this.scrollEl && this.scrollListenerCallback) {\n            this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\n            this.scrollListenerCallback = undefined;\n        }\n        this.nativeRefresher = false;\n    }\n    async resetNativeRefresher(el, state) {\n        this.state = state;\n        if (getIonMode(this) === 'ios') {\n            await translateElement(el, undefined, 300);\n        }\n        else {\n            await transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\n        }\n        this.didRefresh = false;\n        this.needsCompletion = false;\n        this.pointerDown = false;\n        this.animations.forEach((ani) => ani.destroy());\n        this.animations = [];\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n    }\n    async setupiOSNativeRefresher(pullingSpinner, refreshingSpinner) {\n        this.elementToTransform = this.scrollEl;\n        const ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\n        let MAX_PULL = this.scrollEl.clientHeight * 0.16;\n        const NUM_TICKS = ticks.length;\n        writeTask(() => ticks.forEach((el) => el.style.setProperty('animation', 'none')));\n        this.scrollListenerCallback = () => {\n            // If pointer is not on screen or refresher is not active, ignore scroll\n            if (!this.pointerDown && this.state === 1 /* RefresherState.Inactive */) {\n                return;\n            }\n            readTask(() => {\n                // PTR should only be active when overflow scrolling at the top\n                const scrollTop = this.scrollEl.scrollTop;\n                const refresherHeight = this.el.clientHeight;\n                if (scrollTop > 0) {\n                    /**\n                     * If refresher is refreshing and user tries to scroll\n                     * progressively fade refresher out/in\n                     */\n                    if (this.state === 8 /* RefresherState.Refreshing */) {\n                        const ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\n                        writeTask(() => setSpinnerOpacity(refreshingSpinner, 1 - ratio));\n                        return;\n                    }\n                    return;\n                }\n                if (this.pointerDown) {\n                    if (!this.didStart) {\n                        this.didStart = true;\n                        this.ionStart.emit();\n                    }\n                    // emit \"pulling\" on every move\n                    if (this.pointerDown) {\n                        this.ionPull.emit();\n                    }\n                }\n                /**\n                 * We want to delay the start of this gesture by ~30px\n                 * when initially pulling down so the refresher does not\n                 * overlap with the content. But when letting go of the\n                 * gesture before the refresher completes, we want the\n                 * refresher tick marks to quickly fade out.\n                 */\n                const offset = this.didStart ? 30 : 0;\n                const pullAmount = (this.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1));\n                const shouldShowRefreshingSpinner = this.state === 8 /* RefresherState.Refreshing */ || pullAmount === 1;\n                if (shouldShowRefreshingSpinner) {\n                    if (this.pointerDown) {\n                        handleScrollWhileRefreshing(refreshingSpinner, this.lastVelocityY);\n                    }\n                    if (!this.didRefresh) {\n                        this.beginRefresh();\n                        this.didRefresh = true;\n                        hapticImpact({ style: ImpactStyle.Light });\n                        /**\n                         * Translate the content element otherwise when pointer is removed\n                         * from screen the scroll content will bounce back over the refresher\n                         */\n                        if (!this.pointerDown) {\n                            translateElement(this.elementToTransform, `${refresherHeight}px`);\n                        }\n                    }\n                }\n                else {\n                    this.state = 2 /* RefresherState.Pulling */;\n                    handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\n                }\n            });\n        };\n        this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\n        this.gesture = (await import('../../utils/gesture')).createGesture({\n            el: this.scrollEl,\n            gestureName: 'refresher',\n            gesturePriority: 31,\n            direction: 'y',\n            threshold: 5,\n            onStart: () => {\n                this.pointerDown = true;\n                if (!this.didRefresh) {\n                    translateElement(this.elementToTransform, '0px');\n                }\n                /**\n                 * If the content had `display: none` when\n                 * the refresher was initialized, its clientHeight\n                 * will be 0. When the gesture starts, the content\n                 * will be visible, so try to get the correct\n                 * client height again. This is most common when\n                 * using the refresher in an ion-menu.\n                 */\n                if (MAX_PULL === 0) {\n                    MAX_PULL = this.scrollEl.clientHeight * 0.16;\n                }\n            },\n            onMove: (ev) => {\n                this.lastVelocityY = ev.velocityY;\n            },\n            onEnd: () => {\n                this.pointerDown = false;\n                this.didStart = false;\n                if (this.needsCompletion) {\n                    this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */);\n                    this.needsCompletion = false;\n                }\n                else if (this.didRefresh) {\n                    readTask(() => translateElement(this.elementToTransform, `${this.el.clientHeight}px`));\n                }\n            },\n        });\n        this.disabledChanged();\n    }\n    async setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner) {\n        const circle = getElementRoot(pullingSpinner).querySelector('circle');\n        const pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\n        const refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\n        if (circle !== null && refreshingCircle !== null) {\n            writeTask(() => {\n                circle.style.setProperty('animation', 'none');\n                // This lines up the animation on the refreshing spinner with the pulling spinner\n                refreshingSpinner.style.setProperty('animation-delay', '-655ms');\n                refreshingCircle.style.setProperty('animation-delay', '-655ms');\n            });\n        }\n        this.gesture = (await import('../../utils/gesture')).createGesture({\n            el: this.scrollEl,\n            gestureName: 'refresher',\n            gesturePriority: 31,\n            direction: 'y',\n            threshold: 5,\n            canStart: () => this.state !== 8 /* RefresherState.Refreshing */ &&\n                this.state !== 32 /* RefresherState.Completing */ &&\n                this.scrollEl.scrollTop === 0,\n            onStart: (ev) => {\n                this.progress = 0;\n                ev.data = { animation: undefined, didStart: false, cancelled: false };\n            },\n            onMove: (ev) => {\n                if ((ev.velocityY < 0 && this.progress === 0 && !ev.data.didStart) || ev.data.cancelled) {\n                    ev.data.cancelled = true;\n                    return;\n                }\n                if (!ev.data.didStart) {\n                    ev.data.didStart = true;\n                    this.state = 2 /* RefresherState.Pulling */;\n                    // When ion-refresher is being used with a custom scroll target, the overflow styles need to be applied directly instead of via a css variable\n                    const { scrollEl } = this;\n                    const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                    writeTask(() => scrollEl.style.setProperty(overflowProperty, 'hidden'));\n                    const animationType = getRefresherAnimationType(contentEl);\n                    const animation = createPullingAnimation(animationType, pullingRefresherIcon, this.el);\n                    ev.data.animation = animation;\n                    animation.progressStart(false, 0);\n                    this.ionStart.emit();\n                    this.animations.push(animation);\n                    return;\n                }\n                // Since we are using an easing curve, slow the gesture tracking down a bit\n                this.progress = clamp(0, (ev.deltaY / 180) * 0.5, 1);\n                ev.data.animation.progressStep(this.progress);\n                this.ionPull.emit();\n            },\n            onEnd: (ev) => {\n                if (!ev.data.didStart) {\n                    return;\n                }\n                this.gesture.enable(false);\n                const { scrollEl } = this;\n                const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                writeTask(() => scrollEl.style.removeProperty(overflowProperty));\n                if (this.progress <= 0.4) {\n                    ev.data.animation.progressEnd(0, this.progress, 500).onFinish(() => {\n                        this.animations.forEach((ani) => ani.destroy());\n                        this.animations = [];\n                        this.gesture.enable(true);\n                        this.state = 1 /* RefresherState.Inactive */;\n                    });\n                    return;\n                }\n                const progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], this.progress)[0];\n                const snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\n                this.animations.push(snapBackAnimation);\n                writeTask(async () => {\n                    pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', `${progress * 100}px`);\n                    ev.data.animation.progressEnd();\n                    await snapBackAnimation.play();\n                    this.beginRefresh();\n                    ev.data.animation.destroy();\n                    this.gesture.enable(true);\n                });\n            },\n        });\n        this.disabledChanged();\n    }\n    async setupNativeRefresher(contentEl) {\n        if (this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl) {\n            return;\n        }\n        /**\n         * If using non-native refresher before make sure\n         * we clean up any old CSS. This can happen when\n         * a user manually calls the refresh method in a\n         * component create callback before the native\n         * refresher is setup.\n         */\n        this.setCss(0, '', false, '');\n        this.nativeRefresher = true;\n        const pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n        const refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n        if (getIonMode(this) === 'ios') {\n            this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\n        }\n        else {\n            this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\n        }\n    }\n    componentDidUpdate() {\n        this.checkNativeRefresher();\n    }\n    async connectedCallback() {\n        if (this.el.getAttribute('slot') !== 'fixed') {\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n            return;\n        }\n        const contentEl = this.el.closest(ION_CONTENT_ELEMENT_SELECTOR);\n        if (!contentEl) {\n            printIonContentErrorMsg(this.el);\n            return;\n        }\n        /**\n         * Waits for the content to be ready before querying the scroll\n         * or the background content element.\n         */\n        componentOnReady(contentEl, async () => {\n            const customScrollTarget = contentEl.querySelector(ION_CONTENT_CLASS_SELECTOR);\n            /**\n             * Query the custom scroll target (if available), first. In refresher implementations,\n             * the ion-refresher element will always be a direct child of ion-content (slot=\"fixed\"). By\n             * querying the custom scroll target first and falling back to the ion-content element,\n             * the correct scroll element will be returned by the implementation.\n             */\n            this.scrollEl = await getScrollElement(customScrollTarget !== null && customScrollTarget !== void 0 ? customScrollTarget : contentEl);\n            /**\n             * Query the background content element from the host ion-content element directly.\n             */\n            this.backgroundContentEl = await contentEl.getBackgroundElement();\n            if (await shouldUseNativeRefresher(this.el, getIonMode(this))) {\n                this.setupNativeRefresher(contentEl);\n            }\n            else {\n                this.gesture = (await import('../../utils/gesture')).createGesture({\n                    el: contentEl,\n                    gestureName: 'refresher',\n                    gesturePriority: 31,\n                    direction: 'y',\n                    threshold: 20,\n                    passive: false,\n                    canStart: () => this.canStart(),\n                    onStart: () => this.onStart(),\n                    onMove: (ev) => this.onMove(ev),\n                    onEnd: () => this.onEnd(),\n                });\n                this.disabledChanged();\n            }\n        });\n    }\n    disconnectedCallback() {\n        this.destroyNativeRefresher();\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    async complete() {\n        if (this.nativeRefresher) {\n            this.needsCompletion = true;\n            // Do not reset scroll el until user removes pointer from screen\n            if (!this.pointerDown) {\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */)));\n            }\n        }\n        else {\n            this.close(32 /* RefresherState.Completing */, '120ms');\n        }\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    async cancel() {\n        if (this.nativeRefresher) {\n            // Do not reset scroll el until user removes pointer from screen\n            if (!this.pointerDown) {\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 16 /* RefresherState.Cancelling */)));\n            }\n        }\n        else {\n            this.close(16 /* RefresherState.Cancelling */, '');\n        }\n    }\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    getProgress() {\n        return Promise.resolve(this.progress);\n    }\n    canStart() {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* RefresherState.Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    }\n    onStart() {\n        this.progress = 0;\n        this.state = 1 /* RefresherState.Inactive */;\n        this.memoizeOverflowStyle();\n    }\n    onMove(detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        const ev = detail.event;\n        if (ev.touches !== undefined && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* RefresherState._BUSY_ */) !== 0) {\n            return;\n        }\n        const pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n        const deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* RefresherState.Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* RefresherState.Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* RefresherState.Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        const pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* RefresherState.Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* RefresherState.Ready */;\n        return;\n    }\n    onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* RefresherState.Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* RefresherState.Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n        else if (this.state === 1 /* RefresherState.Inactive */) {\n            /**\n             * The pull to refresh gesture was aborted\n             * so we should immediately restore any overflow styles\n             * that have been modified. Do not call this.cancel\n             * because the styles will only be reset after a timeout.\n             * If the gesture is aborted then scrolling should be\n             * available right away.\n             */\n            this.restoreOverflowStyle();\n        }\n    }\n    beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* RefresherState.Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this),\n        });\n    }\n    close(state, delay) {\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(() => {\n            this.state = 1 /* RefresherState.Inactive */;\n            this.progress = 0;\n            this.didStart = false;\n            /**\n             * Reset any overflow styles so the\n             * user can scroll again.\n             */\n            this.setCss(0, '0ms', false, '', true);\n        }, 600);\n        // reset the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n    }\n    setCss(y, duration, overflowVisible, delay, shouldRestoreOverflowStyle = false) {\n        if (this.nativeRefresher) {\n            return;\n        }\n        this.appliedStyles = y > 0;\n        writeTask(() => {\n            if (this.scrollEl && this.backgroundContentEl) {\n                const scrollStyle = this.scrollEl.style;\n                const backgroundStyle = this.backgroundContentEl.style;\n                scrollStyle.transform = backgroundStyle.transform = y > 0 ? `translateY(${y}px) translateZ(0px)` : '';\n                scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\n                scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\n                scrollStyle.overflow = overflowVisible ? 'hidden' : '';\n            }\n            /**\n             * Reset the overflow styles only once\n             * the pull to refresh effect has been closed.\n             * This ensures that the gesture is done\n             * and the refresh operation has either\n             * been aborted or has completed.\n             */\n            if (shouldRestoreOverflowStyle) {\n                this.restoreOverflowStyle();\n            }\n        });\n    }\n    memoizeOverflowStyle() {\n        if (this.scrollEl) {\n            const { overflow, overflowX, overflowY } = this.scrollEl.style;\n            this.overflowStyles = {\n                overflow: overflow !== null && overflow !== void 0 ? overflow : '',\n                overflowX: overflowX !== null && overflowX !== void 0 ? overflowX : '',\n                overflowY: overflowY !== null && overflowY !== void 0 ? overflowY : '',\n            };\n        }\n    }\n    restoreOverflowStyle() {\n        if (this.overflowStyles !== undefined && this.scrollEl !== undefined) {\n            const { overflow, overflowX, overflowY } = this.overflowStyles;\n            this.scrollEl.style.overflow = overflow;\n            this.scrollEl.style.overflowX = overflowX;\n            this.scrollEl.style.overflowY = overflowY;\n            this.overflowStyles = undefined;\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '96f4f595ebdb92a12755b642398691bcaab9f7c1', slot: \"fixed\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`refresher-${mode}`]: true,\n                'refresher-native': this.nativeRefresher,\n                'refresher-active': this.state !== 1 /* RefresherState.Inactive */,\n                'refresher-pulling': this.state === 2 /* RefresherState.Pulling */,\n                'refresher-ready': this.state === 4 /* RefresherState.Ready */,\n                'refresher-refreshing': this.state === 8 /* RefresherState.Refreshing */,\n                'refresher-cancelling': this.state === 16 /* RefresherState.Cancelling */,\n                'refresher-completing': this.state === 32 /* RefresherState.Completing */,\n            } }));\n    }\n    static get is() { return \"ion-refresher\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"refresher.ios.scss\"],\n            \"md\": [\"refresher.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"refresher.ios.css\"],\n            \"md\": [\"refresher.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"pullMin\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The minimum distance the user must pull down until the\\nrefresher will go into the `refreshing` state.\\nDoes not apply when the refresher content uses a spinner,\\nenabling the native refresher.\"\n                },\n                \"attribute\": \"pull-min\",\n                \"reflect\": false,\n                \"defaultValue\": \"60\"\n            },\n            \"pullMax\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The maximum distance of the pull until the refresher\\nwill automatically go into the `refreshing` state.\\nDefaults to the result of `pullMin + 60`.\\nDoes not apply when  the refresher content uses a spinner,\\nenabling the native refresher.\"\n                },\n                \"attribute\": \"pull-max\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.pullMin + 60\"\n            },\n            \"closeDuration\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Time it takes to close the refresher.\\nDoes not apply when the refresher content uses a spinner,\\nenabling the native refresher.\"\n                },\n                \"attribute\": \"close-duration\",\n                \"reflect\": false,\n                \"defaultValue\": \"'280ms'\"\n            },\n            \"snapbackDuration\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Time it takes the refresher to snap back to the `refreshing` state.\\nDoes not apply when the refresher content uses a spinner,\\nenabling the native refresher.\"\n                },\n                \"attribute\": \"snapback-duration\",\n                \"reflect\": false,\n                \"defaultValue\": \"'280ms'\"\n            },\n            \"pullFactor\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How much to multiply the pull speed by. To slow the pull animation down,\\npass a number less than `1`. To speed up the pull, pass a number greater\\nthan `1`. The default value is `1` which is equal to the speed of the cursor.\\nIf a negative value is passed in, the factor will be `1` instead.\\n\\nFor example: If the value passed is `1.2` and the content is dragged by\\n`10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\\n(an increase of 20 percent). If the value passed is `0.8`, the dragged amount\\nwill be `8` pixels, less than the amount the cursor has moved.\\n\\nDoes not apply when the refresher content uses a spinner,\\nenabling the native refresher.\"\n                },\n                \"attribute\": \"pull-factor\",\n                \"reflect\": false,\n                \"defaultValue\": \"1\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the refresher will be hidden.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"nativeRefresher\": {},\n            \"state\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionRefresh\",\n                \"name\": \"ionRefresh\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the user lets go of the content and has pulled down\\nfurther than the `pullMin` or pulls the content down and exceeds the pullMax.\\nUpdates the refresher state to `refreshing`. The `complete()` method should be\\ncalled when the async operation has completed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"RefresherEventDetail\",\n                    \"resolved\": \"RefresherEventDetail\",\n                    \"references\": {\n                        \"RefresherEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./refresher-interface\",\n                            \"id\": \"src/components/refresher/refresher-interface.ts::RefresherEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionPull\",\n                \"name\": \"ionPull\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted while the user is pulling down the content and exposing the refresher.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionStart\",\n                \"name\": \"ionStart\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the user begins to start pulling down.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"complete\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Call `complete()` when your async operation has completed.\\nFor example, the `refreshing` state is while the app is performing\\nan asynchronous operation, such as receiving more data from an\\nAJAX request. Once the data has been received, you then call this\\nmethod to signify that the refreshing has completed and to close\\nthe refresher. This method also changes the refresher's state from\\n`refreshing` to `completing`.\",\n                    \"tags\": []\n                }\n            },\n            \"cancel\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Changes the refresher's state from `refreshing` to `cancelling`.\",\n                    \"tags\": []\n                }\n            },\n            \"getProgress\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<number>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<number>\"\n                },\n                \"docs\": {\n                    \"text\": \"A number representing how far down the user has pulled.\\nThe number `0` represents the user hasn't pulled down at all. The\\nnumber `1`, and anything greater than `1`, represents that the user\\nhas pulled far enough down that when they let go then the refresh will\\nhappen. If they let go and the number is less than `1`, then the\\nrefresh will not happen, and the content will return to it's original\\nposition.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"disabled\",\n                \"methodName\": \"disabledChanged\"\n            }];\n    }\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[0,1,2]}