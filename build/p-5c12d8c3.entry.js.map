{"version":3,"names":["pickerColumnInternalIosCss","pickerColumnInternalMdCss","PickerColumnInternal","constructor","hostRef","this","isScrolling","isColumnVisible","canExitInputMode","centerPickerItemInView","target","smooth","el","top","offsetTop","clientHeight","scrollTop","scroll","left","behavior","undefined","setPickerItemActiveState","item","isActive","classList","add","PICKER_ITEM_ACTIVE_CLASS","part","PICKER_ITEM_ACTIVE_PART","remove","inputModeChange","ev","numericInput","useInputMode","inputModeColumn","detail","isColumnActive","setInputModeActive","state","scrollEndCallback","initializeScrollListener","enableHaptics","isPlatform","timeout","activeEl","activeItem","scrollCallback","raf","clearTimeout","hapticSelectionStart","bbox","getBoundingClientRect","centerX","x","width","centerY","y","height","activeElement","shadowRoot","elementFromPoint","disabled","hapticSelectionChanged","exitInputMode","setTimeout","hapticSelectionEnd","dataIndex","getAttribute","index","parseInt","selectedItem","items","value","setValue","addEventListener","destroyScrollListener","removeEventListener","parentEl","color","valueChange","scrollActiveItemIntoView","componentWillLoad","visibleCallback","entries","length","isIntersecting","oldActive","getElementRoot","querySelector","IntersectionObserver","threshold","observe","closest","componentDidRender","_a","findItem","find","ionChange","emit","selector","render","pickerDisabled","mode","getIonMode","h","Host","key","exportparts","PICKER_ITEM_PART","tabindex","class","createColorClasses","map","isItemDisabled","onClick","text","pickerInternalIosCss","pickerInternalMdCss","PickerInternal","isInHighlightBounds","highlightEl","outsideX","clientX","right","outsideY","clientY","bottom","onFocusOut","relatedTarget","tagName","inputEl","onFocusIn","actionOnClick","columnEl","allowInput","enterInputMode","onPointerDown","columns","querySelectorAll","focusInput","hasInputColumn","destroyKeypressListener","focus","onKeyPress","emitInputModeChange","parsedValue","Number","isNaN","onInputChange","selectSingleColumn","singleColumnSearchTimeout","values","filter","startIndex","newString","substring","findItemFromCompleteValue","parsedText","replace","changedCharacter","searchColumn","colEl","zeroBehavior","selectMultiColumn","numericPickers","Array","from","col","firstColumn","lastColumn","minuteValue","firstCharacter","firstCharacterAgain","firstCharacterAgainAgain","minuteValueAgain","ionInputModeChange","preventTouchStartPropagation","stopPropagation","blur","inputmode","type","onKeyDown","ref","onInput","onBlur"],"sources":["node_modules/@ionic/core/dist/collection/components/picker-column-internal/picker-column-internal.ios.css?tag=ion-picker-column-internal&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/picker-column-internal/picker-column-internal.md.css?tag=ion-picker-column-internal&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/picker-column-internal/picker-column-internal.js","node_modules/@ionic/core/dist/collection/components/picker-internal/picker-internal.ios.css?tag=ion-picker-internal&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/picker-internal/picker-internal.md.css?tag=ion-picker-internal&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/picker-internal/picker-internal.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 16px;\n  padding-inline-end: 16px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  height: 200px;\n  outline: none;\n  font-size: 22px;\n  scroll-snap-type: y mandatory;\n  /**\n   * Need to explicitly set overflow-x: hidden\n   * for older implementations of scroll snapping.\n   */\n  overflow-x: hidden;\n  overflow-y: scroll;\n  scrollbar-width: none;\n  text-align: center;\n}\n\n/**\n * Hide scrollbars on Chrome and Safari\n */\n:host::-webkit-scrollbar {\n  display: none;\n}\n\n:host .picker-item {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  display: block;\n  width: 100%;\n  height: 34px;\n  border: 0px;\n  outline: none;\n  background: transparent;\n  color: inherit;\n  font-family: var(--ion-font-family, inherit);\n  font-size: inherit;\n  line-height: 34px;\n  text-align: inherit;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n  overflow: hidden;\n  scroll-snap-align: center;\n}\n\n:host .picker-item-empty,\n:host .picker-item[disabled] {\n  cursor: default;\n}\n\n:host .picker-item-empty,\n:host(:not([disabled])) .picker-item[disabled] {\n  scroll-snap-align: none;\n}\n\n:host([disabled]) {\n  overflow-y: hidden;\n}\n\n:host .picker-item[disabled] {\n  opacity: 0.4;\n}\n\n:host(.picker-column-active) .picker-item.picker-item-active {\n  color: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(:focus) {\n    outline: none;\n    background: rgba(var(--ion-color-base-rgb), 0.2);\n  }\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 16px;\n  padding-inline-end: 16px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  height: 200px;\n  outline: none;\n  font-size: 22px;\n  scroll-snap-type: y mandatory;\n  /**\n   * Need to explicitly set overflow-x: hidden\n   * for older implementations of scroll snapping.\n   */\n  overflow-x: hidden;\n  overflow-y: scroll;\n  scrollbar-width: none;\n  text-align: center;\n}\n\n/**\n * Hide scrollbars on Chrome and Safari\n */\n:host::-webkit-scrollbar {\n  display: none;\n}\n\n:host .picker-item {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  display: block;\n  width: 100%;\n  height: 34px;\n  border: 0px;\n  outline: none;\n  background: transparent;\n  color: inherit;\n  font-family: var(--ion-font-family, inherit);\n  font-size: inherit;\n  line-height: 34px;\n  text-align: inherit;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n  overflow: hidden;\n  scroll-snap-align: center;\n}\n\n:host .picker-item-empty,\n:host .picker-item[disabled] {\n  cursor: default;\n}\n\n:host .picker-item-empty,\n:host(:not([disabled])) .picker-item[disabled] {\n  scroll-snap-align: none;\n}\n\n:host([disabled]) {\n  overflow-y: hidden;\n}\n\n:host .picker-item[disabled] {\n  opacity: 0.4;\n}\n\n:host(.picker-column-active) .picker-item.picker-item-active {\n  color: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(:focus) {\n    outline: none;\n    background: rgba(var(--ion-color-base-rgb), 0.2);\n  }\n}\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host .picker-item-active {\n  color: var(--ion-color-base);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { getElementRoot, raf } from \"../../utils/helpers\";\nimport { hapticSelectionChanged, hapticSelectionEnd, hapticSelectionStart } from \"../../utils/native/haptic\";\nimport { isPlatform } from \"../../utils/platform\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n * @internal\n */\nexport class PickerColumnInternal {\n    constructor() {\n        this.isScrolling = false;\n        this.isColumnVisible = false;\n        this.canExitInputMode = true;\n        this.centerPickerItemInView = (target, smooth = true, canExitInputMode = true) => {\n            const { el, isColumnVisible } = this;\n            if (isColumnVisible) {\n                // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n                const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n                if (el.scrollTop !== top) {\n                    /**\n                     * Setting this flag prevents input\n                     * mode from exiting in the picker column's\n                     * scroll callback. This is useful when the user manually\n                     * taps an item or types on the keyboard as both\n                     * of these can cause a scroll to occur.\n                     */\n                    this.canExitInputMode = canExitInputMode;\n                    el.scroll({\n                        top,\n                        left: 0,\n                        behavior: smooth ? 'smooth' : undefined,\n                    });\n                }\n            }\n        };\n        this.setPickerItemActiveState = (item, isActive) => {\n            if (isActive) {\n                item.classList.add(PICKER_ITEM_ACTIVE_CLASS);\n                item.part.add(PICKER_ITEM_ACTIVE_PART);\n            }\n            else {\n                item.classList.remove(PICKER_ITEM_ACTIVE_CLASS);\n                item.part.remove(PICKER_ITEM_ACTIVE_PART);\n            }\n        };\n        /**\n         * When ionInputModeChange is emitted, each column\n         * needs to check if it is the one being made available\n         * for text entry.\n         */\n        this.inputModeChange = (ev) => {\n            if (!this.numericInput) {\n                return;\n            }\n            const { useInputMode, inputModeColumn } = ev.detail;\n            /**\n             * If inputModeColumn is undefined then this means\n             * all numericInput columns are being selected.\n             */\n            const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n            if (!useInputMode || !isColumnActive) {\n                this.setInputModeActive(false);\n                return;\n            }\n            this.setInputModeActive(true);\n        };\n        /**\n         * Setting isActive will cause a re-render.\n         * As a result, we do not want to cause the\n         * re-render mid scroll as this will cause\n         * the picker column to jump back to\n         * whatever value was selected at the\n         * start of the scroll interaction.\n         */\n        this.setInputModeActive = (state) => {\n            if (this.isScrolling) {\n                this.scrollEndCallback = () => {\n                    this.isActive = state;\n                };\n                return;\n            }\n            this.isActive = state;\n        };\n        /**\n         * When the column scrolls, the component\n         * needs to determine which item is centered\n         * in the view and will emit an ionChange with\n         * the item object.\n         */\n        this.initializeScrollListener = () => {\n            /**\n             * The haptics for the wheel picker are\n             * an iOS-only feature. As a result, they should\n             * be disabled on Android.\n             */\n            const enableHaptics = isPlatform('ios');\n            const { el } = this;\n            let timeout;\n            let activeEl = this.activeItem;\n            const scrollCallback = () => {\n                raf(() => {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        timeout = undefined;\n                    }\n                    if (!this.isScrolling) {\n                        enableHaptics && hapticSelectionStart();\n                        this.isScrolling = true;\n                    }\n                    /**\n                     * Select item in the center of the column\n                     * which is the month/year that we want to select\n                     */\n                    const bbox = el.getBoundingClientRect();\n                    const centerX = bbox.x + bbox.width / 2;\n                    const centerY = bbox.y + bbox.height / 2;\n                    const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n                    if (activeEl !== null) {\n                        this.setPickerItemActiveState(activeEl, false);\n                    }\n                    if (activeElement === null || activeElement.disabled) {\n                        return;\n                    }\n                    /**\n                     * If we are selecting a new value,\n                     * we need to run haptics again.\n                     */\n                    if (activeElement !== activeEl) {\n                        enableHaptics && hapticSelectionChanged();\n                        if (this.canExitInputMode) {\n                            /**\n                             * The native iOS wheel picker\n                             * only dismisses the keyboard\n                             * once the selected item has changed\n                             * as a result of a swipe\n                             * from the user. If `canExitInputMode` is\n                             * `false` then this means that the\n                             * scroll is happening as a result of\n                             * the `value` property programmatically changing\n                             * either by an application or by the user via the keyboard.\n                             */\n                            this.exitInputMode();\n                        }\n                    }\n                    activeEl = activeElement;\n                    this.setPickerItemActiveState(activeElement, true);\n                    timeout = setTimeout(() => {\n                        this.isScrolling = false;\n                        enableHaptics && hapticSelectionEnd();\n                        /**\n                         * Certain tasks (such as those that\n                         * cause re-renders) should only be done\n                         * once scrolling has finished, otherwise\n                         * flickering may occur.\n                         */\n                        const { scrollEndCallback } = this;\n                        if (scrollEndCallback) {\n                            scrollEndCallback();\n                            this.scrollEndCallback = undefined;\n                        }\n                        /**\n                         * Reset this flag as the\n                         * next scroll interaction could\n                         * be a scroll from the user. In this\n                         * case, we should exit input mode.\n                         */\n                        this.canExitInputMode = true;\n                        const dataIndex = activeElement.getAttribute('data-index');\n                        /**\n                         * If no value it is\n                         * possible we hit one of the\n                         * empty padding columns.\n                         */\n                        if (dataIndex === null) {\n                            return;\n                        }\n                        const index = parseInt(dataIndex, 10);\n                        const selectedItem = this.items[index];\n                        if (selectedItem.value !== this.value) {\n                            this.setValue(selectedItem.value);\n                        }\n                    }, 250);\n                });\n            };\n            /**\n             * Wrap this in an raf so that the scroll callback\n             * does not fire when component is initially shown.\n             */\n            raf(() => {\n                el.addEventListener('scroll', scrollCallback);\n                this.destroyScrollListener = () => {\n                    el.removeEventListener('scroll', scrollCallback);\n                };\n            });\n        };\n        /**\n         * Tells the parent picker to\n         * exit text entry mode. This is only called\n         * when the selected item changes during scroll, so\n         * we know that the user likely wants to scroll\n         * instead of type.\n         */\n        this.exitInputMode = () => {\n            const { parentEl } = this;\n            if (parentEl == null)\n                return;\n            parentEl.exitInputMode();\n            /**\n             * setInputModeActive only takes\n             * effect once scrolling stops to avoid\n             * a component re-render while scrolling.\n             * However, we want the visual active\n             * indicator to go away immediately, so\n             * we call classList.remove here.\n             */\n            this.el.classList.remove('picker-column-active');\n        };\n        this.isActive = false;\n        this.disabled = false;\n        this.items = [];\n        this.value = undefined;\n        this.color = 'primary';\n        this.numericInput = false;\n    }\n    valueChange() {\n        if (this.isColumnVisible) {\n            /**\n             * Only scroll the active item into view when the picker column\n             * is actively visible to the user.\n             */\n            this.scrollActiveItemIntoView();\n        }\n    }\n    /**\n     * Only setup scroll listeners\n     * when the picker is visible, otherwise\n     * the container will have a scroll\n     * height of 0px.\n     */\n    componentWillLoad() {\n        const visibleCallback = (entries) => {\n            /**\n             * Browsers will sometimes group multiple IO events into a single callback.\n             * As a result, we want to grab the last/most recent event in case there are multiple events.\n             */\n            const ev = entries[entries.length - 1];\n            if (ev.isIntersecting) {\n                const { activeItem, el } = this;\n                this.isColumnVisible = true;\n                /**\n                 * Because this initial call to scrollActiveItemIntoView has to fire before\n                 * the scroll listener is set up, we need to manage the active class manually.\n                 */\n                const oldActive = getElementRoot(el).querySelector(`.${PICKER_ITEM_ACTIVE_CLASS}`);\n                if (oldActive) {\n                    this.setPickerItemActiveState(oldActive, false);\n                }\n                this.scrollActiveItemIntoView();\n                if (activeItem) {\n                    this.setPickerItemActiveState(activeItem, true);\n                }\n                this.initializeScrollListener();\n            }\n            else {\n                this.isColumnVisible = false;\n                if (this.destroyScrollListener) {\n                    this.destroyScrollListener();\n                    this.destroyScrollListener = undefined;\n                }\n            }\n        };\n        new IntersectionObserver(visibleCallback, { threshold: 0.001 }).observe(this.el);\n        const parentEl = (this.parentEl = this.el.closest('ion-picker-internal'));\n        if (parentEl !== null) {\n            // TODO(FW-2832): type\n            parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n        }\n    }\n    componentDidRender() {\n        var _a;\n        const { activeItem, items, isColumnVisible, value } = this;\n        if (isColumnVisible) {\n            if (activeItem) {\n                this.scrollActiveItemIntoView();\n            }\n            else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n                /**\n                 * If the picker column does not have an active item and the current value\n                 * does not match the first item in the picker column, that means\n                 * the value is out of bounds. In this case, we assign the value to the\n                 * first item to match the scroll position of the column.\n                 *\n                 */\n                this.setValue(items[0].value);\n            }\n        }\n    }\n    /** @internal  */\n    async scrollActiveItemIntoView() {\n        const activeEl = this.activeItem;\n        if (activeEl) {\n            this.centerPickerItemInView(activeEl, false, false);\n        }\n    }\n    /**\n     * Sets the value prop and fires the ionChange event.\n     * This is used when we need to fire ionChange from\n     * user-generated events that cannot be caught with normal\n     * input/change event listeners.\n     * @internal\n     */\n    async setValue(value) {\n        const { items } = this;\n        this.value = value;\n        const findItem = items.find((item) => item.value === value && item.disabled !== true);\n        if (findItem) {\n            this.ionChange.emit(findItem);\n        }\n    }\n    get activeItem() {\n        // If the whole picker column is disabled, the current value should appear active\n        // If the current value item is specifically disabled, it should not appear active\n        const selector = `.picker-item[data-value=\"${this.value}\"]${this.disabled ? '' : ':not([disabled])'}`;\n        return getElementRoot(this.el).querySelector(selector);\n    }\n    render() {\n        const { items, color, disabled: pickerDisabled, isActive, numericInput } = this;\n        const mode = getIonMode(this);\n        /**\n         * exportparts is needed so ion-datetime can expose the parts\n         * from two layers of shadow nesting. If this causes problems,\n         * the attribute can be moved to datetime.tsx and set on every\n         * instance of ion-picker-column-internal there instead.\n         */\n        return (h(Host, { key: '42a034f2533d30d19f96a121eb74d5f757e1c684', exportparts: `${PICKER_ITEM_PART}, ${PICKER_ITEM_ACTIVE_PART}`, disabled: pickerDisabled, tabindex: pickerDisabled ? null : 0, class: createColorClasses(color, {\n                [mode]: true,\n                ['picker-column-active']: isActive,\n                ['picker-column-numeric-input']: numericInput,\n            }) }, h(\"div\", { key: '85efccb40c87d473c06026b8041d57b40d2369c3', class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '9fae4dd6697f23acba18c218ba250ea77954b18d', class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: 'f117afeb204a4f6bb34a1cd0e1b786fa479d8b32', class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), items.map((item, index) => {\n            const isItemDisabled = pickerDisabled || item.disabled || false;\n            {\n                /*\n                Users should be able to tab\n                between multiple columns. As a result,\n                we set tabindex here so that tabbing switches\n                between columns instead of buttons. Users\n                can still use arrow keys on the keyboard to\n                navigate the column up and down.\n              */\n            }\n            return (h(\"button\", { tabindex: \"-1\", class: {\n                    'picker-item': true,\n                }, \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n                    this.centerPickerItemInView(ev.target, true);\n                }, disabled: isItemDisabled, part: PICKER_ITEM_PART }, item.text));\n        }), h(\"div\", { key: '28aa37f9ce90e88b9c3a5b2c399e3066e9f339e1', class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: 'ef4ae6bee2b17918f0c2aba9d5c720c1d95987e4', class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '564967bc8e42a9018163850da3a967a933b3de7b', class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\")));\n    }\n    static get is() { return \"ion-picker-column-internal\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"picker-column-internal.ios.scss\"],\n            \"md\": [\"picker-column-internal.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"picker-column-internal.ios.css\"],\n            \"md\": [\"picker-column-internal.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the picker.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"items\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"PickerColumnItem[]\",\n                    \"resolved\": \"PickerColumnItem[]\",\n                    \"references\": {\n                        \"PickerColumnItem\": {\n                            \"location\": \"import\",\n                            \"path\": \"./picker-column-internal-interfaces\",\n                            \"id\": \"src/components/picker-column-internal/picker-column-internal-interfaces.ts::PickerColumnItem\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A list of options to be displayed in the picker\"\n                },\n                \"defaultValue\": \"[]\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string | number\",\n                    \"resolved\": \"number | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The selected option in the picker.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false\n            },\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true,\n                \"defaultValue\": \"'primary'\"\n            },\n            \"numericInput\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"If `true`, tapping the picker will\\nreveal a number input keyboard that lets\\nthe user type in values for each picker\\ncolumn. This is useful when working\\nwith time pickers.\"\n                },\n                \"attribute\": \"numeric-input\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"isActive\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the value has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"PickerColumnItem\",\n                    \"resolved\": \"PickerColumnItem\",\n                    \"references\": {\n                        \"PickerColumnItem\": {\n                            \"location\": \"import\",\n                            \"path\": \"./picker-column-internal-interfaces\",\n                            \"id\": \"src/components/picker-column-internal/picker-column-internal-interfaces.ts::PickerColumnItem\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"scrollActiveItemIntoView\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            },\n            \"setValue\": {\n                \"complexType\": {\n                    \"signature\": \"(value?: string | number) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"value\",\n                            \"type\": \"string | number | undefined\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets the value prop and fires the ionChange event.\\nThis is used when we need to fire ionChange from\\nuser-generated events that cannot be caught with normal\\ninput/change event listeners.\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"value\",\n                \"methodName\": \"valueChange\"\n            }];\n    }\n}\nconst PICKER_ITEM_ACTIVE_CLASS = 'picker-item-active';\nconst PICKER_ITEM_PART = 'wheel-item';\nconst PICKER_ITEM_ACTIVE_PART = 'active';\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 200px;\n  /**\n   * Picker columns should display\n   * in the order in which developers\n   * added them and should ignore\n   * LTR vs RTL directions.\n   */\n  direction: ltr;\n  /**\n   * This is required otherwise the\n   * highlight will appear behind\n   * the picker when used inline.\n   */\n  z-index: 0;\n}\n\n:host .picker-before,\n:host .picker-after {\n  position: absolute;\n  width: 100%;\n  /**\n   * The transform and z-index\n   * are needed for WebKit otherwise\n   * the fade will appear underneath the picker.\n   */\n  transform: translateZ(0);\n  z-index: 1;\n  pointer-events: none;\n}\n\n:host .picker-before {\n  top: 0;\n  height: 83px;\n}\n@supports (inset-inline-start: 0) {\n  :host .picker-before {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host .picker-before {\n    left: 0;\n  }\n  :host-context([dir=rtl]) .picker-before {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(:dir(rtl)) .picker-before {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n:host .picker-after {\n  top: 116px;\n  height: 84px;\n}\n@supports (inset-inline-start: 0) {\n  :host .picker-after {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host .picker-after {\n    left: 0;\n  }\n  :host-context([dir=rtl]) .picker-after {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(:dir(rtl)) .picker-after {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n:host .picker-highlight {\n  border-radius: 8px;\n  left: 0;\n  right: 0;\n  top: 50%;\n  bottom: 0;\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: 0;\n  margin-bottom: 0;\n  position: absolute;\n  width: calc(100% - 16px);\n  height: 34px;\n  transform: translateY(-50%);\n  background: var(--wheel-highlight-background);\n  z-index: -1;\n}\n\n:host input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n:host ::slotted(ion-picker-column-internal:first-of-type) {\n  text-align: start;\n}\n\n:host ::slotted(ion-picker-column-internal:last-of-type) {\n  text-align: end;\n}\n\n:host ::slotted(ion-picker-column-internal:only-child) {\n  text-align: center;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host .picker-before {\n  background: linear-gradient(to bottom, rgba(var(--wheel-fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--wheel-fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8) 100%);\n}\n\n:host .picker-after {\n  background: linear-gradient(to top, rgba(var(--wheel-fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--wheel-fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0.8) 100%);\n}\n\n:host .picker-highlight {\n  background: var(--wheel-highlight-background, var(--ion-color-step-150, #eeeeef));\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 200px;\n  /**\n   * Picker columns should display\n   * in the order in which developers\n   * added them and should ignore\n   * LTR vs RTL directions.\n   */\n  direction: ltr;\n  /**\n   * This is required otherwise the\n   * highlight will appear behind\n   * the picker when used inline.\n   */\n  z-index: 0;\n}\n\n:host .picker-before,\n:host .picker-after {\n  position: absolute;\n  width: 100%;\n  /**\n   * The transform and z-index\n   * are needed for WebKit otherwise\n   * the fade will appear underneath the picker.\n   */\n  transform: translateZ(0);\n  z-index: 1;\n  pointer-events: none;\n}\n\n:host .picker-before {\n  top: 0;\n  height: 83px;\n}\n@supports (inset-inline-start: 0) {\n  :host .picker-before {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host .picker-before {\n    left: 0;\n  }\n  :host-context([dir=rtl]) .picker-before {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(:dir(rtl)) .picker-before {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n:host .picker-after {\n  top: 116px;\n  height: 84px;\n}\n@supports (inset-inline-start: 0) {\n  :host .picker-after {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host .picker-after {\n    left: 0;\n  }\n  :host-context([dir=rtl]) .picker-after {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(:dir(rtl)) .picker-after {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n:host .picker-highlight {\n  border-radius: 8px;\n  left: 0;\n  right: 0;\n  top: 50%;\n  bottom: 0;\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: 0;\n  margin-bottom: 0;\n  position: absolute;\n  width: calc(100% - 16px);\n  height: 34px;\n  transform: translateY(-50%);\n  background: var(--wheel-highlight-background);\n  z-index: -1;\n}\n\n:host input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n:host ::slotted(ion-picker-column-internal:first-of-type) {\n  text-align: start;\n}\n\n:host ::slotted(ion-picker-column-internal:last-of-type) {\n  text-align: end;\n}\n\n:host ::slotted(ion-picker-column-internal:only-child) {\n  text-align: center;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host .picker-before {\n  background: linear-gradient(to bottom, rgba(var(--wheel-fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 20%, rgba(var(--wheel-fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0) 90%);\n}\n\n:host .picker-after {\n  background: linear-gradient(to top, rgba(var(--wheel-fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 1) 30%, rgba(var(--wheel-fade-background-rgb, var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255))), 0) 90%);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { getElementRoot } from \"../../utils/helpers\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n * @internal\n */\nexport class PickerInternal {\n    constructor() {\n        this.useInputMode = false;\n        this.isInHighlightBounds = (ev) => {\n            const { highlightEl } = this;\n            if (!highlightEl) {\n                return false;\n            }\n            const bbox = highlightEl.getBoundingClientRect();\n            /**\n             * Check to see if the user clicked\n             * outside the bounds of the highlight.\n             */\n            const outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;\n            const outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;\n            if (outsideX || outsideY) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * If we are no longer focused\n         * on a picker column, then we should\n         * exit input mode. An exception is made\n         * for the input in the picker since having\n         * that focused means we are still in input mode.\n         */\n        this.onFocusOut = (ev) => {\n            // TODO(FW-2832): type\n            const { relatedTarget } = ev;\n            if (!relatedTarget || (relatedTarget.tagName !== 'ION-PICKER-COLUMN-INTERNAL' && relatedTarget !== this.inputEl)) {\n                this.exitInputMode();\n            }\n        };\n        /**\n         * When picker columns receive focus\n         * the parent picker needs to determine\n         * whether to enter/exit input mode.\n         */\n        this.onFocusIn = (ev) => {\n            // TODO(FW-2832): type\n            const { target } = ev;\n            /**\n             * Due to browser differences in how/when focus\n             * is dispatched on certain elements, we need to\n             * make sure that this function only ever runs when\n             * focusing a picker column.\n             */\n            if (target.tagName !== 'ION-PICKER-COLUMN-INTERNAL') {\n                return;\n            }\n            /**\n             * If we have actionOnClick\n             * then this means the user focused\n             * a picker column via mouse or\n             * touch (i.e. a PointerEvent). As a result,\n             * we should not enter/exit input mode\n             * until the click event has fired, which happens\n             * after the `focusin` event.\n             *\n             * Otherwise, the user likely focused\n             * the column using their keyboard and\n             * we should enter/exit input mode automatically.\n             */\n            if (!this.actionOnClick) {\n                const columnEl = target;\n                const allowInput = columnEl.numericInput;\n                if (allowInput) {\n                    this.enterInputMode(columnEl, false);\n                }\n                else {\n                    this.exitInputMode();\n                }\n            }\n        };\n        /**\n         * On click we need to run an actionOnClick\n         * function that has been set in onPointerDown\n         * so that we enter/exit input mode correctly.\n         */\n        this.onClick = () => {\n            const { actionOnClick } = this;\n            if (actionOnClick) {\n                actionOnClick();\n                this.actionOnClick = undefined;\n            }\n        };\n        /**\n         * Clicking a column also focuses the column on\n         * certain browsers, so we use onPointerDown\n         * to tell the onFocusIn function that users\n         * are trying to click the column rather than\n         * focus the column using the keyboard. When the\n         * user completes the click, the onClick function\n         * runs and runs the actionOnClick callback.\n         */\n        this.onPointerDown = (ev) => {\n            const { useInputMode, inputModeColumn, el } = this;\n            if (this.isInHighlightBounds(ev)) {\n                /**\n                 * If we were already in\n                 * input mode, then we should determine\n                 * if we tapped a particular column and\n                 * should switch to input mode for\n                 * that specific column.\n                 */\n                if (useInputMode) {\n                    /**\n                     * If we tapped a picker column\n                     * then we should either switch to input\n                     * mode for that column or all columns.\n                     * Otherwise we should exit input mode\n                     * since we just tapped the highlight and\n                     * not a column.\n                     */\n                    if (ev.target.tagName === 'ION-PICKER-COLUMN-INTERNAL') {\n                        /**\n                         * If user taps 2 different columns\n                         * then we should just switch to input mode\n                         * for the new column rather than switching to\n                         * input mode for all columns.\n                         */\n                        if (inputModeColumn && inputModeColumn === ev.target) {\n                            this.actionOnClick = () => {\n                                this.enterInputMode();\n                            };\n                        }\n                        else {\n                            this.actionOnClick = () => {\n                                this.enterInputMode(ev.target);\n                            };\n                        }\n                    }\n                    else {\n                        this.actionOnClick = () => {\n                            this.exitInputMode();\n                        };\n                    }\n                    /**\n                     * If we were not already in\n                     * input mode, then we should\n                     * enter input mode for all columns.\n                     */\n                }\n                else {\n                    /**\n                     * If there is only 1 numeric input column\n                     * then we should skip multi column input.\n                     */\n                    const columns = el.querySelectorAll('ion-picker-column-internal.picker-column-numeric-input');\n                    const columnEl = columns.length === 1 ? ev.target : undefined;\n                    this.actionOnClick = () => {\n                        this.enterInputMode(columnEl);\n                    };\n                }\n                return;\n            }\n            this.actionOnClick = () => {\n                this.exitInputMode();\n            };\n        };\n        /**\n         * Enters input mode to allow\n         * for text entry of numeric values.\n         * If on mobile, we focus a hidden input\n         * field so that the on screen keyboard\n         * is brought up. When tabbing using a\n         * keyboard, picker columns receive an outline\n         * to indicate they are focused. As a result,\n         * we should not focus the hidden input as it\n         * would cause the outline to go away, preventing\n         * users from having any visual indication of which\n         * column is focused.\n         */\n        this.enterInputMode = (columnEl, focusInput = true) => {\n            const { inputEl, el } = this;\n            if (!inputEl) {\n                return;\n            }\n            /**\n             * Only active input mode if there is at\n             * least one column that accepts numeric input.\n             */\n            const hasInputColumn = el.querySelector('ion-picker-column-internal.picker-column-numeric-input');\n            if (!hasInputColumn) {\n                return;\n            }\n            /**\n             * If columnEl is undefined then\n             * it is assumed that all numeric pickers\n             * are eligible for text entry.\n             * (i.e. hour and minute columns)\n             */\n            this.useInputMode = true;\n            this.inputModeColumn = columnEl;\n            /**\n             * Users with a keyboard and mouse can\n             * activate input mode where the input is\n             * focused as well as when it is not focused,\n             * so we need to make sure we clean up any\n             * old listeners.\n             */\n            if (focusInput) {\n                if (this.destroyKeypressListener) {\n                    this.destroyKeypressListener();\n                    this.destroyKeypressListener = undefined;\n                }\n                inputEl.focus();\n            }\n            else {\n                // TODO FW-5900 Use keydown instead\n                el.addEventListener('keypress', this.onKeyPress);\n                this.destroyKeypressListener = () => {\n                    el.removeEventListener('keypress', this.onKeyPress);\n                };\n            }\n            this.emitInputModeChange();\n        };\n        this.onKeyPress = (ev) => {\n            const { inputEl } = this;\n            if (!inputEl) {\n                return;\n            }\n            const parsedValue = parseInt(ev.key, 10);\n            /**\n             * Only numbers should be allowed\n             */\n            if (!Number.isNaN(parsedValue)) {\n                inputEl.value += ev.key;\n                this.onInputChange();\n            }\n        };\n        this.selectSingleColumn = () => {\n            const { inputEl, inputModeColumn, singleColumnSearchTimeout } = this;\n            if (!inputEl || !inputModeColumn) {\n                return;\n            }\n            const values = inputModeColumn.items.filter((item) => item.disabled !== true);\n            /**\n             * If users pause for a bit, the search\n             * value should be reset similar to how a\n             * <select> behaves. So typing \"34\", waiting,\n             * then typing \"5\" should select \"05\".\n             */\n            if (singleColumnSearchTimeout) {\n                clearTimeout(singleColumnSearchTimeout);\n            }\n            this.singleColumnSearchTimeout = setTimeout(() => {\n                inputEl.value = '';\n                this.singleColumnSearchTimeout = undefined;\n            }, 1000);\n            /**\n             * For values that are longer than 2 digits long\n             * we should shift the value over 1 character\n             * to the left. So typing \"456\" would result in \"56\".\n             * TODO: If we want to support more than just\n             * time entry, we should update this value to be\n             * the max length of all of the picker items.\n             */\n            if (inputEl.value.length >= 3) {\n                const startIndex = inputEl.value.length - 2;\n                const newString = inputEl.value.substring(startIndex);\n                inputEl.value = newString;\n                this.selectSingleColumn();\n                return;\n            }\n            /**\n             * Checking the value of the input gets priority\n             * first. For example, if the value of the input\n             * is \"1\" and we entered \"2\", then the complete value\n             * is \"12\" and we should select hour 12.\n             *\n             * Regex removes any leading zeros from values like \"02\",\n             * but it keeps a single zero if there are only zeros in the string.\n             * 0+(?=[1-9]) --> Match 1 or more zeros that are followed by 1-9\n             * 0+(?=0$) --> Match 1 or more zeros that must be followed by one 0 and end.\n             */\n            const findItemFromCompleteValue = values.find(({ text }) => {\n                const parsedText = text.replace(/^0+(?=[1-9])|0+(?=0$)/, '');\n                return parsedText === inputEl.value;\n            });\n            if (findItemFromCompleteValue) {\n                inputModeColumn.setValue(findItemFromCompleteValue.value);\n                return;\n            }\n            /**\n             * If we typed \"56\" to get minute 56, then typed \"7\",\n             * we should select \"07\" as \"567\" is not a valid minute.\n             */\n            if (inputEl.value.length === 2) {\n                const changedCharacter = inputEl.value.substring(inputEl.value.length - 1);\n                inputEl.value = changedCharacter;\n                this.selectSingleColumn();\n            }\n        };\n        /**\n         * Searches a list of column items for a particular\n         * value. This is currently used for numeric values.\n         * The zeroBehavior can be set to account for leading\n         * or trailing zeros when looking at the item text.\n         */\n        this.searchColumn = (colEl, value, zeroBehavior = 'start') => {\n            const behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;\n            const item = colEl.items.find(({ text, disabled }) => disabled !== true && text.replace(behavior, '') === value);\n            if (item) {\n                colEl.setValue(item.value);\n            }\n        };\n        this.selectMultiColumn = () => {\n            const { inputEl, el } = this;\n            if (!inputEl) {\n                return;\n            }\n            const numericPickers = Array.from(el.querySelectorAll('ion-picker-column-internal')).filter((col) => col.numericInput);\n            const firstColumn = numericPickers[0];\n            const lastColumn = numericPickers[1];\n            let value = inputEl.value;\n            let minuteValue;\n            switch (value.length) {\n                case 1:\n                    this.searchColumn(firstColumn, value);\n                    break;\n                case 2:\n                    /**\n                     * If the first character is `0` or `1` it is\n                     * possible that users are trying to type `09`\n                     * or `11` into the hour field, so we should look\n                     * at that first.\n                     */\n                    const firstCharacter = inputEl.value.substring(0, 1);\n                    value = firstCharacter === '0' || firstCharacter === '1' ? inputEl.value : firstCharacter;\n                    this.searchColumn(firstColumn, value);\n                    /**\n                     * If only checked the first value,\n                     * we can check the second value\n                     * for a match in the minutes column\n                     */\n                    if (value.length === 1) {\n                        minuteValue = inputEl.value.substring(inputEl.value.length - 1);\n                        this.searchColumn(lastColumn, minuteValue, 'end');\n                    }\n                    break;\n                case 3:\n                    /**\n                     * If the first character is `0` or `1` it is\n                     * possible that users are trying to type `09`\n                     * or `11` into the hour field, so we should look\n                     * at that first.\n                     */\n                    const firstCharacterAgain = inputEl.value.substring(0, 1);\n                    value =\n                        firstCharacterAgain === '0' || firstCharacterAgain === '1'\n                            ? inputEl.value.substring(0, 2)\n                            : firstCharacterAgain;\n                    this.searchColumn(firstColumn, value);\n                    /**\n                     * If only checked the first value,\n                     * we can check the second value\n                     * for a match in the minutes column\n                     */\n                    minuteValue = value.length === 1 ? inputEl.value.substring(1) : inputEl.value.substring(2);\n                    this.searchColumn(lastColumn, minuteValue, 'end');\n                    break;\n                case 4:\n                    /**\n                     * If the first character is `0` or `1` it is\n                     * possible that users are trying to type `09`\n                     * or `11` into the hour field, so we should look\n                     * at that first.\n                     */\n                    const firstCharacterAgainAgain = inputEl.value.substring(0, 1);\n                    value =\n                        firstCharacterAgainAgain === '0' || firstCharacterAgainAgain === '1'\n                            ? inputEl.value.substring(0, 2)\n                            : firstCharacterAgainAgain;\n                    this.searchColumn(firstColumn, value);\n                    /**\n                     * If only checked the first value,\n                     * we can check the second value\n                     * for a match in the minutes column\n                     */\n                    const minuteValueAgain = value.length === 1\n                        ? inputEl.value.substring(1, inputEl.value.length)\n                        : inputEl.value.substring(2, inputEl.value.length);\n                    this.searchColumn(lastColumn, minuteValueAgain, 'end');\n                    break;\n                default:\n                    const startIndex = inputEl.value.length - 4;\n                    const newString = inputEl.value.substring(startIndex);\n                    inputEl.value = newString;\n                    this.selectMultiColumn();\n                    break;\n            }\n        };\n        /**\n         * Searches the value of the active column\n         * to determine which value users are trying\n         * to select\n         */\n        this.onInputChange = () => {\n            const { useInputMode, inputEl, inputModeColumn } = this;\n            if (!useInputMode || !inputEl) {\n                return;\n            }\n            if (inputModeColumn) {\n                this.selectSingleColumn();\n            }\n            else {\n                this.selectMultiColumn();\n            }\n        };\n        /**\n         * Emit ionInputModeChange. Picker columns\n         * listen for this event to determine whether\n         * or not their column is \"active\" for text input.\n         */\n        this.emitInputModeChange = () => {\n            const { useInputMode, inputModeColumn } = this;\n            this.ionInputModeChange.emit({\n                useInputMode,\n                inputModeColumn,\n            });\n        };\n    }\n    /**\n     * When the picker is interacted with\n     * we need to prevent touchstart so other\n     * gestures do not fire. For example,\n     * scrolling on the wheel picker\n     * in ion-datetime should not cause\n     * a card modal to swipe to close.\n     */\n    preventTouchStartPropagation(ev) {\n        ev.stopPropagation();\n    }\n    componentWillLoad() {\n        getElementRoot(this.el).addEventListener('focusin', this.onFocusIn);\n        getElementRoot(this.el).addEventListener('focusout', this.onFocusOut);\n    }\n    /**\n     * @internal\n     * Exits text entry mode for the picker\n     * This method blurs the hidden input\n     * and cause the keyboard to dismiss.\n     */\n    async exitInputMode() {\n        const { inputEl, useInputMode } = this;\n        if (!useInputMode || !inputEl) {\n            return;\n        }\n        this.useInputMode = false;\n        this.inputModeColumn = undefined;\n        inputEl.blur();\n        inputEl.value = '';\n        if (this.destroyKeypressListener) {\n            this.destroyKeypressListener();\n            this.destroyKeypressListener = undefined;\n        }\n        this.emitInputModeChange();\n    }\n    render() {\n        return (h(Host, { key: '01cbd466787242ad070b01909714089570b4d67f', onPointerDown: (ev) => this.onPointerDown(ev), onClick: () => this.onClick() }, h(\"input\", { key: '7ff8c0a74c107610a6f0dd9fbc2fc7a4a6dc2468', \"aria-hidden\": \"true\", tabindex: -1, inputmode: \"numeric\", type: \"number\", onKeyDown: (ev) => {\n                var _a;\n                /**\n                 * The \"Enter\" key represents\n                 * the user submitting their time\n                 * selection, so we should blur the\n                 * input (and therefore close the keyboard)\n                 *\n                 * Updating the picker's state to no longer\n                 * be in input mode is handled in the onBlur\n                 * callback below.\n                 */\n                if (ev.key === 'Enter') {\n                    (_a = this.inputEl) === null || _a === void 0 ? void 0 : _a.blur();\n                }\n            }, ref: (el) => (this.inputEl = el), onInput: () => this.onInputChange(), onBlur: () => this.exitInputMode() }), h(\"div\", { key: '4700c9d877f54ae8f3fb173122193c27637f70a4', class: \"picker-before\" }), h(\"div\", { key: '7ceae834b15d559f3819ec2116f83669cf6665fc', class: \"picker-after\" }), h(\"div\", { key: '2d3bfda76279c2ee14edc067c53651be23b8b525', class: \"picker-highlight\", ref: (el) => (this.highlightEl = el) }), h(\"slot\", { key: '4797def7a3882a8a911ad47949b76f58a9f448d1' })));\n    }\n    static get is() { return \"ion-picker-internal\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"picker-internal.ios.scss\"],\n            \"md\": [\"picker-internal.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"picker-internal.ios.css\"],\n            \"md\": [\"picker-internal.md.css\"]\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionInputModeChange\",\n                \"name\": \"ionInputModeChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"\"\n                },\n                \"complexType\": {\n                    \"original\": \"PickerInternalChangeEventDetail\",\n                    \"resolved\": \"PickerInternalChangeEventDetail\",\n                    \"references\": {\n                        \"PickerInternalChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./picker-internal-interfaces\",\n                            \"id\": \"src/components/picker-internal/picker-internal-interfaces.ts::PickerInternalChangeEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"exitInputMode\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": \"Exits text entry mode for the picker\\nThis method blurs the hidden input\\nand cause the keyboard to dismiss.\"\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get listeners() {\n        return [{\n                \"name\": \"touchstart\",\n                \"method\": \"preventTouchStartPropagation\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": true\n            }];\n    }\n}\n"],"mappings":"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","ignoreList":[]}